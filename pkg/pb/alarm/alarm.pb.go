// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.15.8
// source: alarm.proto

package alarm

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ThresholdType int32

const (
	ThresholdType_values  ThresholdType = 0
	ThresholdType_ratio   ThresholdType = 1
	ThresholdType_trigger ThresholdType = 2
)

// Enum value maps for ThresholdType.
var (
	ThresholdType_name = map[int32]string{
		0: "values",
		1: "ratio",
		2: "trigger",
	}
	ThresholdType_value = map[string]int32{
		"values":  0,
		"ratio":   1,
		"trigger": 2,
	}
)

func (x ThresholdType) Enum() *ThresholdType {
	p := new(ThresholdType)
	*p = x
	return p
}

func (x ThresholdType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ThresholdType) Descriptor() protoreflect.EnumDescriptor {
	return file_alarm_proto_enumTypes[0].Descriptor()
}

func (ThresholdType) Type() protoreflect.EnumType {
	return &file_alarm_proto_enumTypes[0]
}

func (x ThresholdType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ThresholdType.Descriptor instead.
func (ThresholdType) EnumDescriptor() ([]byte, []int) {
	return file_alarm_proto_rawDescGZIP(), []int{0}
}

type ThresholdLevel int32

const (
	ThresholdLevel_critical ThresholdLevel = 0
	ThresholdLevel_major    ThresholdLevel = 1
	ThresholdLevel_minor    ThresholdLevel = 2
	ThresholdLevel_warning  ThresholdLevel = 3
)

// Enum value maps for ThresholdLevel.
var (
	ThresholdLevel_name = map[int32]string{
		0: "critical",
		1: "major",
		2: "minor",
		3: "warning",
	}
	ThresholdLevel_value = map[string]int32{
		"critical": 0,
		"major":    1,
		"minor":    2,
		"warning":  3,
	}
)

func (x ThresholdLevel) Enum() *ThresholdLevel {
	p := new(ThresholdLevel)
	*p = x
	return p
}

func (x ThresholdLevel) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ThresholdLevel) Descriptor() protoreflect.EnumDescriptor {
	return file_alarm_proto_enumTypes[1].Descriptor()
}

func (ThresholdLevel) Type() protoreflect.EnumType {
	return &file_alarm_proto_enumTypes[1]
}

func (x ThresholdLevel) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ThresholdLevel.Descriptor instead.
func (ThresholdLevel) EnumDescriptor() ([]byte, []int) {
	return file_alarm_proto_rawDescGZIP(), []int{1}
}

type ThresholdName int32

const (
	ThresholdName_cpuUsedRatio       ThresholdName = 0
	ThresholdName_memoryUsedRatio    ThresholdName = 1
	ThresholdName_storageUsedRatio   ThresholdName = 2
	ThresholdName_qps                ThresholdName = 3
	ThresholdName_lps                ThresholdName = 4
	ThresholdName_subnetUsedRatio    ThresholdName = 5
	ThresholdName_haTrigger          ThresholdName = 6
	ThresholdName_nodeOffline        ThresholdName = 7
	ThresholdName_dnsOffline         ThresholdName = 8
	ThresholdName_dhcpOffline        ThresholdName = 9
	ThresholdName_ipConflict         ThresholdName = 10
	ThresholdName_subnetConflict     ThresholdName = 11
	ThresholdName_illegalDhcp        ThresholdName = 12
	ThresholdName_ipBaseLineConflict ThresholdName = 13
)

// Enum value maps for ThresholdName.
var (
	ThresholdName_name = map[int32]string{
		0:  "cpuUsedRatio",
		1:  "memoryUsedRatio",
		2:  "storageUsedRatio",
		3:  "qps",
		4:  "lps",
		5:  "subnetUsedRatio",
		6:  "haTrigger",
		7:  "nodeOffline",
		8:  "dnsOffline",
		9:  "dhcpOffline",
		10: "ipConflict",
		11: "subnetConflict",
		12: "illegalDhcp",
		13: "ipBaseLineConflict",
	}
	ThresholdName_value = map[string]int32{
		"cpuUsedRatio":       0,
		"memoryUsedRatio":    1,
		"storageUsedRatio":   2,
		"qps":                3,
		"lps":                4,
		"subnetUsedRatio":    5,
		"haTrigger":          6,
		"nodeOffline":        7,
		"dnsOffline":         8,
		"dhcpOffline":        9,
		"ipConflict":         10,
		"subnetConflict":     11,
		"illegalDhcp":        12,
		"ipBaseLineConflict": 13,
	}
)

func (x ThresholdName) Enum() *ThresholdName {
	p := new(ThresholdName)
	*p = x
	return p
}

func (x ThresholdName) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ThresholdName) Descriptor() protoreflect.EnumDescriptor {
	return file_alarm_proto_enumTypes[2].Descriptor()
}

func (ThresholdName) Type() protoreflect.EnumType {
	return &file_alarm_proto_enumTypes[2]
}

func (x ThresholdName) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ThresholdName.Descriptor instead.
func (ThresholdName) EnumDescriptor() ([]byte, []int) {
	return file_alarm_proto_rawDescGZIP(), []int{2}
}

type BaseThreshold struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name  ThresholdName  `protobuf:"varint,1,opt,name=name,proto3,enum=proto.ThresholdName" json:"name,omitempty"`
	Level ThresholdLevel `protobuf:"varint,2,opt,name=level,proto3,enum=proto.ThresholdLevel" json:"level,omitempty"`
	Type  ThresholdType  `protobuf:"varint,3,opt,name=type,proto3,enum=proto.ThresholdType" json:"type,omitempty"`
}

func (x *BaseThreshold) Reset() {
	*x = BaseThreshold{}
	if protoimpl.UnsafeEnabled {
		mi := &file_alarm_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BaseThreshold) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BaseThreshold) ProtoMessage() {}

func (x *BaseThreshold) ProtoReflect() protoreflect.Message {
	mi := &file_alarm_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BaseThreshold.ProtoReflect.Descriptor instead.
func (*BaseThreshold) Descriptor() ([]byte, []int) {
	return file_alarm_proto_rawDescGZIP(), []int{0}
}

func (x *BaseThreshold) GetName() ThresholdName {
	if x != nil {
		return x.Name
	}
	return ThresholdName_cpuUsedRatio
}

func (x *BaseThreshold) GetLevel() ThresholdLevel {
	if x != nil {
		return x.Level
	}
	return ThresholdLevel_critical
}

func (x *BaseThreshold) GetType() ThresholdType {
	if x != nil {
		return x.Type
	}
	return ThresholdType_values
}

type BaseAlarm struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseThreshold *BaseThreshold `protobuf:"bytes,1,opt,name=base_threshold,json=baseThreshold,proto3" json:"base_threshold,omitempty"`
	Time          string         `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
	SendMail      bool           `protobuf:"varint,3,opt,name=send_mail,json=sendMail,proto3" json:"send_mail,omitempty"`
}

func (x *BaseAlarm) Reset() {
	*x = BaseAlarm{}
	if protoimpl.UnsafeEnabled {
		mi := &file_alarm_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BaseAlarm) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BaseAlarm) ProtoMessage() {}

func (x *BaseAlarm) ProtoReflect() protoreflect.Message {
	mi := &file_alarm_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BaseAlarm.ProtoReflect.Descriptor instead.
func (*BaseAlarm) Descriptor() ([]byte, []int) {
	return file_alarm_proto_rawDescGZIP(), []int{1}
}

func (x *BaseAlarm) GetBaseThreshold() *BaseThreshold {
	if x != nil {
		return x.BaseThreshold
	}
	return nil
}

func (x *BaseAlarm) GetTime() string {
	if x != nil {
		return x.Time
	}
	return ""
}

func (x *BaseAlarm) GetSendMail() bool {
	if x != nil {
		return x.SendMail
	}
	return false
}

type NodeAlarm struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseAlarm *BaseAlarm `protobuf:"bytes,1,opt,name=base_alarm,json=baseAlarm,proto3" json:"base_alarm,omitempty"`
	NodeIp    string     `protobuf:"bytes,2,opt,name=node_ip,json=nodeIp,proto3" json:"node_ip,omitempty"`
}

func (x *NodeAlarm) Reset() {
	*x = NodeAlarm{}
	if protoimpl.UnsafeEnabled {
		mi := &file_alarm_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeAlarm) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeAlarm) ProtoMessage() {}

func (x *NodeAlarm) ProtoReflect() protoreflect.Message {
	mi := &file_alarm_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeAlarm.ProtoReflect.Descriptor instead.
func (*NodeAlarm) Descriptor() ([]byte, []int) {
	return file_alarm_proto_rawDescGZIP(), []int{2}
}

func (x *NodeAlarm) GetBaseAlarm() *BaseAlarm {
	if x != nil {
		return x.BaseAlarm
	}
	return nil
}

func (x *NodeAlarm) GetNodeIp() string {
	if x != nil {
		return x.NodeIp
	}
	return ""
}

type NodeHaAlarm struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseAlarm *BaseAlarm `protobuf:"bytes,1,opt,name=base_alarm,json=baseAlarm,proto3" json:"base_alarm,omitempty"`
	HaCmd     string     `protobuf:"bytes,2,opt,name=ha_cmd,json=haCmd,proto3" json:"ha_cmd,omitempty"`
	HaRole    string     `protobuf:"bytes,3,opt,name=ha_role,json=haRole,proto3" json:"ha_role,omitempty"`
	MasterIp  string     `protobuf:"bytes,4,opt,name=master_ip,json=masterIp,proto3" json:"master_ip,omitempty"`
	SlaveIp   string     `protobuf:"bytes,5,opt,name=slave_ip,json=slaveIp,proto3" json:"slave_ip,omitempty"`
}

func (x *NodeHaAlarm) Reset() {
	*x = NodeHaAlarm{}
	if protoimpl.UnsafeEnabled {
		mi := &file_alarm_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeHaAlarm) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeHaAlarm) ProtoMessage() {}

func (x *NodeHaAlarm) ProtoReflect() protoreflect.Message {
	mi := &file_alarm_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeHaAlarm.ProtoReflect.Descriptor instead.
func (*NodeHaAlarm) Descriptor() ([]byte, []int) {
	return file_alarm_proto_rawDescGZIP(), []int{3}
}

func (x *NodeHaAlarm) GetBaseAlarm() *BaseAlarm {
	if x != nil {
		return x.BaseAlarm
	}
	return nil
}

func (x *NodeHaAlarm) GetHaCmd() string {
	if x != nil {
		return x.HaCmd
	}
	return ""
}

func (x *NodeHaAlarm) GetHaRole() string {
	if x != nil {
		return x.HaRole
	}
	return ""
}

func (x *NodeHaAlarm) GetMasterIp() string {
	if x != nil {
		return x.MasterIp
	}
	return ""
}

func (x *NodeHaAlarm) GetSlaveIp() string {
	if x != nil {
		return x.SlaveIp
	}
	return ""
}

type MetricValueAlarm struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseAlarm *BaseAlarm `protobuf:"bytes,1,opt,name=base_alarm,json=baseAlarm,proto3" json:"base_alarm,omitempty"`
	NodeIp    string     `protobuf:"bytes,2,opt,name=node_ip,json=nodeIp,proto3" json:"node_ip,omitempty"`
	Value     uint64     `protobuf:"varint,3,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *MetricValueAlarm) Reset() {
	*x = MetricValueAlarm{}
	if protoimpl.UnsafeEnabled {
		mi := &file_alarm_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MetricValueAlarm) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetricValueAlarm) ProtoMessage() {}

func (x *MetricValueAlarm) ProtoReflect() protoreflect.Message {
	mi := &file_alarm_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetricValueAlarm.ProtoReflect.Descriptor instead.
func (*MetricValueAlarm) Descriptor() ([]byte, []int) {
	return file_alarm_proto_rawDescGZIP(), []int{4}
}

func (x *MetricValueAlarm) GetBaseAlarm() *BaseAlarm {
	if x != nil {
		return x.BaseAlarm
	}
	return nil
}

func (x *MetricValueAlarm) GetNodeIp() string {
	if x != nil {
		return x.NodeIp
	}
	return ""
}

func (x *MetricValueAlarm) GetValue() uint64 {
	if x != nil {
		return x.Value
	}
	return 0
}

type SubnetRadioAlarm struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseAlarm *BaseAlarm `protobuf:"bytes,1,opt,name=base_alarm,json=baseAlarm,proto3" json:"base_alarm,omitempty"`
	NodeIp    string     `protobuf:"bytes,2,opt,name=node_ip,json=nodeIp,proto3" json:"node_ip,omitempty"`
	Value     uint64     `protobuf:"varint,3,opt,name=value,proto3" json:"value,omitempty"`
	Subnet    string     `protobuf:"bytes,4,opt,name=subnet,proto3" json:"subnet,omitempty"`
	Threshold uint64     `protobuf:"varint,5,opt,name=threshold,proto3" json:"threshold,omitempty"`
}

func (x *SubnetRadioAlarm) Reset() {
	*x = SubnetRadioAlarm{}
	if protoimpl.UnsafeEnabled {
		mi := &file_alarm_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubnetRadioAlarm) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubnetRadioAlarm) ProtoMessage() {}

func (x *SubnetRadioAlarm) ProtoReflect() protoreflect.Message {
	mi := &file_alarm_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubnetRadioAlarm.ProtoReflect.Descriptor instead.
func (*SubnetRadioAlarm) Descriptor() ([]byte, []int) {
	return file_alarm_proto_rawDescGZIP(), []int{5}
}

func (x *SubnetRadioAlarm) GetBaseAlarm() *BaseAlarm {
	if x != nil {
		return x.BaseAlarm
	}
	return nil
}

func (x *SubnetRadioAlarm) GetNodeIp() string {
	if x != nil {
		return x.NodeIp
	}
	return ""
}

func (x *SubnetRadioAlarm) GetValue() uint64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *SubnetRadioAlarm) GetSubnet() string {
	if x != nil {
		return x.Subnet
	}
	return ""
}

func (x *SubnetRadioAlarm) GetThreshold() uint64 {
	if x != nil {
		return x.Threshold
	}
	return 0
}

type ConflictIpAlarm struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseAlarm      *BaseAlarm `protobuf:"bytes,1,opt,name=base_alarm,json=baseAlarm,proto3" json:"base_alarm,omitempty"`
	ConflictIp     string     `protobuf:"bytes,2,opt,name=conflict_ip,json=conflictIp,proto3" json:"conflict_ip,omitempty"`
	ConflictIpType string     `protobuf:"bytes,3,opt,name=conflict_ip_type,json=conflictIpType,proto3" json:"conflict_ip_type,omitempty"`
}

func (x *ConflictIpAlarm) Reset() {
	*x = ConflictIpAlarm{}
	if protoimpl.UnsafeEnabled {
		mi := &file_alarm_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConflictIpAlarm) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConflictIpAlarm) ProtoMessage() {}

func (x *ConflictIpAlarm) ProtoReflect() protoreflect.Message {
	mi := &file_alarm_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConflictIpAlarm.ProtoReflect.Descriptor instead.
func (*ConflictIpAlarm) Descriptor() ([]byte, []int) {
	return file_alarm_proto_rawDescGZIP(), []int{6}
}

func (x *ConflictIpAlarm) GetBaseAlarm() *BaseAlarm {
	if x != nil {
		return x.BaseAlarm
	}
	return nil
}

func (x *ConflictIpAlarm) GetConflictIp() string {
	if x != nil {
		return x.ConflictIp
	}
	return ""
}

func (x *ConflictIpAlarm) GetConflictIpType() string {
	if x != nil {
		return x.ConflictIpType
	}
	return ""
}

type ConflictSubnetAlarm struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseAlarm      *BaseAlarm `protobuf:"bytes,1,opt,name=base_alarm,json=baseAlarm,proto3" json:"base_alarm,omitempty"`
	ConflictSubnet string     `protobuf:"bytes,2,opt,name=conflict_subnet,json=conflictSubnet,proto3" json:"conflict_subnet,omitempty"`
}

func (x *ConflictSubnetAlarm) Reset() {
	*x = ConflictSubnetAlarm{}
	if protoimpl.UnsafeEnabled {
		mi := &file_alarm_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConflictSubnetAlarm) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConflictSubnetAlarm) ProtoMessage() {}

func (x *ConflictSubnetAlarm) ProtoReflect() protoreflect.Message {
	mi := &file_alarm_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConflictSubnetAlarm.ProtoReflect.Descriptor instead.
func (*ConflictSubnetAlarm) Descriptor() ([]byte, []int) {
	return file_alarm_proto_rawDescGZIP(), []int{7}
}

func (x *ConflictSubnetAlarm) GetBaseAlarm() *BaseAlarm {
	if x != nil {
		return x.BaseAlarm
	}
	return nil
}

func (x *ConflictSubnetAlarm) GetConflictSubnet() string {
	if x != nil {
		return x.ConflictSubnet
	}
	return ""
}

type IllegalDhcpAlarm struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseAlarm      *BaseAlarm `protobuf:"bytes,1,opt,name=base_alarm,json=baseAlarm,proto3" json:"base_alarm,omitempty"`
	IllegalDhcpIp  string     `protobuf:"bytes,2,opt,name=illegal_dhcp_ip,json=illegalDhcpIp,proto3" json:"illegal_dhcp_ip,omitempty"`
	IllegalDhcpMac string     `protobuf:"bytes,3,opt,name=illegal_dhcp_mac,json=illegalDhcpMac,proto3" json:"illegal_dhcp_mac,omitempty"`
}

func (x *IllegalDhcpAlarm) Reset() {
	*x = IllegalDhcpAlarm{}
	if protoimpl.UnsafeEnabled {
		mi := &file_alarm_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IllegalDhcpAlarm) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IllegalDhcpAlarm) ProtoMessage() {}

func (x *IllegalDhcpAlarm) ProtoReflect() protoreflect.Message {
	mi := &file_alarm_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IllegalDhcpAlarm.ProtoReflect.Descriptor instead.
func (*IllegalDhcpAlarm) Descriptor() ([]byte, []int) {
	return file_alarm_proto_rawDescGZIP(), []int{8}
}

func (x *IllegalDhcpAlarm) GetBaseAlarm() *BaseAlarm {
	if x != nil {
		return x.BaseAlarm
	}
	return nil
}

func (x *IllegalDhcpAlarm) GetIllegalDhcpIp() string {
	if x != nil {
		return x.IllegalDhcpIp
	}
	return ""
}

func (x *IllegalDhcpAlarm) GetIllegalDhcpMac() string {
	if x != nil {
		return x.IllegalDhcpMac
	}
	return ""
}

type IllegalLPSAlarm struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseAlarm   *BaseAlarm `protobuf:"bytes,1,opt,name=base_alarm,json=baseAlarm,proto3" json:"base_alarm,omitempty"`
	LatestValue uint64     `protobuf:"varint,2,opt,name=latest_value,json=latestValue,proto3" json:"latest_value,omitempty"`
}

func (x *IllegalLPSAlarm) Reset() {
	*x = IllegalLPSAlarm{}
	if protoimpl.UnsafeEnabled {
		mi := &file_alarm_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IllegalLPSAlarm) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IllegalLPSAlarm) ProtoMessage() {}

func (x *IllegalLPSAlarm) ProtoReflect() protoreflect.Message {
	mi := &file_alarm_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IllegalLPSAlarm.ProtoReflect.Descriptor instead.
func (*IllegalLPSAlarm) Descriptor() ([]byte, []int) {
	return file_alarm_proto_rawDescGZIP(), []int{9}
}

func (x *IllegalLPSAlarm) GetBaseAlarm() *BaseAlarm {
	if x != nil {
		return x.BaseAlarm
	}
	return nil
}

func (x *IllegalLPSAlarm) GetLatestValue() uint64 {
	if x != nil {
		return x.LatestValue
	}
	return 0
}

type IpBaseLineAlarm struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseAlarm                 *BaseAlarm `protobuf:"bytes,1,opt,name=base_alarm,json=baseAlarm,proto3" json:"base_alarm,omitempty"`
	ConflictIp                string     `protobuf:"bytes,2,opt,name=conflict_ip,json=conflictIp,proto3" json:"conflict_ip,omitempty"`
	ConflictMac               string     `protobuf:"bytes,3,opt,name=conflict_mac,json=conflictMac,proto3" json:"conflict_mac,omitempty"`
	ConflictUplinkEquipment   string     `protobuf:"bytes,4,opt,name=conflict_uplink_equipment,json=conflictUplinkEquipment,proto3" json:"conflict_uplink_equipment,omitempty"`
	ConflictUplinkPort        string     `protobuf:"bytes,5,opt,name=conflict_uplink_port,json=conflictUplinkPort,proto3" json:"conflict_uplink_port,omitempty"`
	IpBaseLineMac             string     `protobuf:"bytes,6,opt,name=ip_base_line_mac,json=ipBaseLineMac,proto3" json:"ip_base_line_mac,omitempty"`
	IpBaseLineUplinkEquipment string     `protobuf:"bytes,7,opt,name=ip_base_line_uplink_equipment,json=ipBaseLineUplinkEquipment,proto3" json:"ip_base_line_uplink_equipment,omitempty"`
	IpBaseLineUplinkPort      string     `protobuf:"bytes,8,opt,name=ip_base_line_uplink_port,json=ipBaseLineUplinkPort,proto3" json:"ip_base_line_uplink_port,omitempty"`
}

func (x *IpBaseLineAlarm) Reset() {
	*x = IpBaseLineAlarm{}
	if protoimpl.UnsafeEnabled {
		mi := &file_alarm_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IpBaseLineAlarm) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IpBaseLineAlarm) ProtoMessage() {}

func (x *IpBaseLineAlarm) ProtoReflect() protoreflect.Message {
	mi := &file_alarm_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IpBaseLineAlarm.ProtoReflect.Descriptor instead.
func (*IpBaseLineAlarm) Descriptor() ([]byte, []int) {
	return file_alarm_proto_rawDescGZIP(), []int{10}
}

func (x *IpBaseLineAlarm) GetBaseAlarm() *BaseAlarm {
	if x != nil {
		return x.BaseAlarm
	}
	return nil
}

func (x *IpBaseLineAlarm) GetConflictIp() string {
	if x != nil {
		return x.ConflictIp
	}
	return ""
}

func (x *IpBaseLineAlarm) GetConflictMac() string {
	if x != nil {
		return x.ConflictMac
	}
	return ""
}

func (x *IpBaseLineAlarm) GetConflictUplinkEquipment() string {
	if x != nil {
		return x.ConflictUplinkEquipment
	}
	return ""
}

func (x *IpBaseLineAlarm) GetConflictUplinkPort() string {
	if x != nil {
		return x.ConflictUplinkPort
	}
	return ""
}

func (x *IpBaseLineAlarm) GetIpBaseLineMac() string {
	if x != nil {
		return x.IpBaseLineMac
	}
	return ""
}

func (x *IpBaseLineAlarm) GetIpBaseLineUplinkEquipment() string {
	if x != nil {
		return x.IpBaseLineUplinkEquipment
	}
	return ""
}

func (x *IpBaseLineAlarm) GetIpBaseLineUplinkPort() string {
	if x != nil {
		return x.IpBaseLineUplinkPort
	}
	return ""
}

type AlarmResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *AlarmResponse) Reset() {
	*x = AlarmResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_alarm_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AlarmResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AlarmResponse) ProtoMessage() {}

func (x *AlarmResponse) ProtoReflect() protoreflect.Message {
	mi := &file_alarm_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AlarmResponse.ProtoReflect.Descriptor instead.
func (*AlarmResponse) Descriptor() ([]byte, []int) {
	return file_alarm_proto_rawDescGZIP(), []int{11}
}

func (x *AlarmResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *AlarmResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

var File_alarm_proto protoreflect.FileDescriptor

var file_alarm_proto_rawDesc = []byte{
	0x0a, 0x0b, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0x90, 0x01, 0x0a, 0x0d, 0x42, 0x61, 0x73, 0x65, 0x54, 0x68, 0x72,
	0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x28, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x68, 0x72,
	0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x2b, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c,
	0x64, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x28, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x79, 0x0a, 0x09, 0x42, 0x61, 0x73, 0x65, 0x41,
	0x6c, 0x61, 0x72, 0x6d, 0x12, 0x3b, 0x0a, 0x0e, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x74, 0x68, 0x72,
	0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f,
	0x6c, 0x64, 0x52, 0x0d, 0x62, 0x61, 0x73, 0x65, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x6d, 0x61,
	0x69, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x73, 0x65, 0x6e, 0x64, 0x4d, 0x61,
	0x69, 0x6c, 0x22, 0x55, 0x0a, 0x09, 0x4e, 0x6f, 0x64, 0x65, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x12,
	0x2f, 0x0a, 0x0a, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x61, 0x73, 0x65,
	0x41, 0x6c, 0x61, 0x72, 0x6d, 0x52, 0x09, 0x62, 0x61, 0x73, 0x65, 0x41, 0x6c, 0x61, 0x72, 0x6d,
	0x12, 0x17, 0x0a, 0x07, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x70, 0x22, 0xa6, 0x01, 0x0a, 0x0b, 0x4e, 0x6f,
	0x64, 0x65, 0x48, 0x61, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x12, 0x2f, 0x0a, 0x0a, 0x62, 0x61, 0x73,
	0x65, 0x5f, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x52,
	0x09, 0x62, 0x61, 0x73, 0x65, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x12, 0x15, 0x0a, 0x06, 0x68, 0x61,
	0x5f, 0x63, 0x6d, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x68, 0x61, 0x43, 0x6d,
	0x64, 0x12, 0x17, 0x0a, 0x07, 0x68, 0x61, 0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x68, 0x61, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61,
	0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d,
	0x61, 0x73, 0x74, 0x65, 0x72, 0x49, 0x70, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x6c, 0x61, 0x76, 0x65,
	0x5f, 0x69, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x6c, 0x61, 0x76, 0x65,
	0x49, 0x70, 0x22, 0x72, 0x0a, 0x10, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x12, 0x2f, 0x0a, 0x0a, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x61,
	0x6c, 0x61, 0x72, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x52, 0x09, 0x62, 0x61,
	0x73, 0x65, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x12, 0x17, 0x0a, 0x07, 0x6e, 0x6f, 0x64, 0x65, 0x5f,
	0x69, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x70,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xa8, 0x01, 0x0a, 0x10, 0x53, 0x75, 0x62, 0x6e, 0x65,
	0x74, 0x52, 0x61, 0x64, 0x69, 0x6f, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x12, 0x2f, 0x0a, 0x0a, 0x62,
	0x61, 0x73, 0x65, 0x5f, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x41, 0x6c, 0x61, 0x72,
	0x6d, 0x52, 0x09, 0x62, 0x61, 0x73, 0x65, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x12, 0x17, 0x0a, 0x07,
	0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e,
	0x6f, 0x64, 0x65, 0x49, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x75, 0x62, 0x6e, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x75, 0x62,
	0x6e, 0x65, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c,
	0x64, 0x22, 0x8d, 0x01, 0x0a, 0x0f, 0x43, 0x6f, 0x6e, 0x66, 0x6c, 0x69, 0x63, 0x74, 0x49, 0x70,
	0x41, 0x6c, 0x61, 0x72, 0x6d, 0x12, 0x2f, 0x0a, 0x0a, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x61, 0x6c,
	0x61, 0x72, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x52, 0x09, 0x62, 0x61, 0x73,
	0x65, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x66, 0x6c, 0x69,
	0x63, 0x74, 0x5f, 0x69, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6e,
	0x66, 0x6c, 0x69, 0x63, 0x74, 0x49, 0x70, 0x12, 0x28, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x66, 0x6c,
	0x69, 0x63, 0x74, 0x5f, 0x69, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x66, 0x6c, 0x69, 0x63, 0x74, 0x49, 0x70, 0x54, 0x79, 0x70,
	0x65, 0x22, 0x6f, 0x0a, 0x13, 0x43, 0x6f, 0x6e, 0x66, 0x6c, 0x69, 0x63, 0x74, 0x53, 0x75, 0x62,
	0x6e, 0x65, 0x74, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x12, 0x2f, 0x0a, 0x0a, 0x62, 0x61, 0x73, 0x65,
	0x5f, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x52, 0x09,
	0x62, 0x61, 0x73, 0x65, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6e,
	0x66, 0x6c, 0x69, 0x63, 0x74, 0x5f, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x66, 0x6c, 0x69, 0x63, 0x74, 0x53, 0x75, 0x62, 0x6e,
	0x65, 0x74, 0x22, 0x95, 0x01, 0x0a, 0x10, 0x49, 0x6c, 0x6c, 0x65, 0x67, 0x61, 0x6c, 0x44, 0x68,
	0x63, 0x70, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x12, 0x2f, 0x0a, 0x0a, 0x62, 0x61, 0x73, 0x65, 0x5f,
	0x61, 0x6c, 0x61, 0x72, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x52, 0x09, 0x62,
	0x61, 0x73, 0x65, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x12, 0x26, 0x0a, 0x0f, 0x69, 0x6c, 0x6c, 0x65,
	0x67, 0x61, 0x6c, 0x5f, 0x64, 0x68, 0x63, 0x70, 0x5f, 0x69, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x69, 0x6c, 0x6c, 0x65, 0x67, 0x61, 0x6c, 0x44, 0x68, 0x63, 0x70, 0x49, 0x70,
	0x12, 0x28, 0x0a, 0x10, 0x69, 0x6c, 0x6c, 0x65, 0x67, 0x61, 0x6c, 0x5f, 0x64, 0x68, 0x63, 0x70,
	0x5f, 0x6d, 0x61, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x69, 0x6c, 0x6c, 0x65,
	0x67, 0x61, 0x6c, 0x44, 0x68, 0x63, 0x70, 0x4d, 0x61, 0x63, 0x22, 0x65, 0x0a, 0x0f, 0x49, 0x6c,
	0x6c, 0x65, 0x67, 0x61, 0x6c, 0x4c, 0x50, 0x53, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x12, 0x2f, 0x0a,
	0x0a, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x41, 0x6c,
	0x61, 0x72, 0x6d, 0x52, 0x09, 0x62, 0x61, 0x73, 0x65, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x12, 0x21,
	0x0a, 0x0c, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x22, 0x97, 0x03, 0x0a, 0x0f, 0x49, 0x70, 0x42, 0x61, 0x73, 0x65, 0x4c, 0x69, 0x6e, 0x65,
	0x41, 0x6c, 0x61, 0x72, 0x6d, 0x12, 0x2f, 0x0a, 0x0a, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x61, 0x6c,
	0x61, 0x72, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x52, 0x09, 0x62, 0x61, 0x73,
	0x65, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x66, 0x6c, 0x69,
	0x63, 0x74, 0x5f, 0x69, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6e,
	0x66, 0x6c, 0x69, 0x63, 0x74, 0x49, 0x70, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x66, 0x6c,
	0x69, 0x63, 0x74, 0x5f, 0x6d, 0x61, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63,
	0x6f, 0x6e, 0x66, 0x6c, 0x69, 0x63, 0x74, 0x4d, 0x61, 0x63, 0x12, 0x3a, 0x0a, 0x19, 0x63, 0x6f,
	0x6e, 0x66, 0x6c, 0x69, 0x63, 0x74, 0x5f, 0x75, 0x70, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x65, 0x71,
	0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x63,
	0x6f, 0x6e, 0x66, 0x6c, 0x69, 0x63, 0x74, 0x55, 0x70, 0x6c, 0x69, 0x6e, 0x6b, 0x45, 0x71, 0x75,
	0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x30, 0x0a, 0x14, 0x63, 0x6f, 0x6e, 0x66, 0x6c, 0x69,
	0x63, 0x74, 0x5f, 0x75, 0x70, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x63, 0x6f, 0x6e, 0x66, 0x6c, 0x69, 0x63, 0x74, 0x55, 0x70,
	0x6c, 0x69, 0x6e, 0x6b, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x27, 0x0a, 0x10, 0x69, 0x70, 0x5f, 0x62,
	0x61, 0x73, 0x65, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x6d, 0x61, 0x63, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x69, 0x70, 0x42, 0x61, 0x73, 0x65, 0x4c, 0x69, 0x6e, 0x65, 0x4d, 0x61,
	0x63, 0x12, 0x40, 0x0a, 0x1d, 0x69, 0x70, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x6c, 0x69, 0x6e,
	0x65, 0x5f, 0x75, 0x70, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x65, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65,
	0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x19, 0x69, 0x70, 0x42, 0x61, 0x73, 0x65,
	0x4c, 0x69, 0x6e, 0x65, 0x55, 0x70, 0x6c, 0x69, 0x6e, 0x6b, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d,
	0x65, 0x6e, 0x74, 0x12, 0x36, 0x0a, 0x18, 0x69, 0x70, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x6c,
	0x69, 0x6e, 0x65, 0x5f, 0x75, 0x70, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x69, 0x70, 0x42, 0x61, 0x73, 0x65, 0x4c, 0x69, 0x6e,
	0x65, 0x55, 0x70, 0x6c, 0x69, 0x6e, 0x6b, 0x50, 0x6f, 0x72, 0x74, 0x22, 0x43, 0x0a, 0x0d, 0x41,
	0x6c, 0x61, 0x72, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x2a, 0x33, 0x0a, 0x0d, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x0a, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x10, 0x00, 0x12, 0x09, 0x0a,
	0x05, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x74, 0x72, 0x69, 0x67,
	0x67, 0x65, 0x72, 0x10, 0x02, 0x2a, 0x41, 0x0a, 0x0e, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f,
	0x6c, 0x64, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x0c, 0x0a, 0x08, 0x63, 0x72, 0x69, 0x74, 0x69,
	0x63, 0x61, 0x6c, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x6d, 0x61, 0x6a, 0x6f, 0x72, 0x10, 0x01,
	0x12, 0x09, 0x0a, 0x05, 0x6d, 0x69, 0x6e, 0x6f, 0x72, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x77,
	0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x10, 0x03, 0x2a, 0x81, 0x02, 0x0a, 0x0d, 0x54, 0x68, 0x72,
	0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x0c, 0x63, 0x70,
	0x75, 0x55, 0x73, 0x65, 0x64, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f,
	0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x55, 0x73, 0x65, 0x64, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x10,
	0x01, 0x12, 0x14, 0x0a, 0x10, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x55, 0x73, 0x65, 0x64,
	0x52, 0x61, 0x74, 0x69, 0x6f, 0x10, 0x02, 0x12, 0x07, 0x0a, 0x03, 0x71, 0x70, 0x73, 0x10, 0x03,
	0x12, 0x07, 0x0a, 0x03, 0x6c, 0x70, 0x73, 0x10, 0x04, 0x12, 0x13, 0x0a, 0x0f, 0x73, 0x75, 0x62,
	0x6e, 0x65, 0x74, 0x55, 0x73, 0x65, 0x64, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x10, 0x05, 0x12, 0x0d,
	0x0a, 0x09, 0x68, 0x61, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x10, 0x06, 0x12, 0x0f, 0x0a,
	0x0b, 0x6e, 0x6f, 0x64, 0x65, 0x4f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x10, 0x07, 0x12, 0x0e,
	0x0a, 0x0a, 0x64, 0x6e, 0x73, 0x4f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x10, 0x08, 0x12, 0x0f,
	0x0a, 0x0b, 0x64, 0x68, 0x63, 0x70, 0x4f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x10, 0x09, 0x12,
	0x0e, 0x0a, 0x0a, 0x69, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x6c, 0x69, 0x63, 0x74, 0x10, 0x0a, 0x12,
	0x12, 0x0a, 0x0e, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x6c, 0x69, 0x63,
	0x74, 0x10, 0x0b, 0x12, 0x0f, 0x0a, 0x0b, 0x69, 0x6c, 0x6c, 0x65, 0x67, 0x61, 0x6c, 0x44, 0x68,
	0x63, 0x70, 0x10, 0x0c, 0x12, 0x16, 0x0a, 0x12, 0x69, 0x70, 0x42, 0x61, 0x73, 0x65, 0x4c, 0x69,
	0x6e, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x6c, 0x69, 0x63, 0x74, 0x10, 0x0d, 0x42, 0x08, 0x5a, 0x06,
	0x61, 0x6c, 0x61, 0x72, 0x6d, 0x2f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_alarm_proto_rawDescOnce sync.Once
	file_alarm_proto_rawDescData = file_alarm_proto_rawDesc
)

func file_alarm_proto_rawDescGZIP() []byte {
	file_alarm_proto_rawDescOnce.Do(func() {
		file_alarm_proto_rawDescData = protoimpl.X.CompressGZIP(file_alarm_proto_rawDescData)
	})
	return file_alarm_proto_rawDescData
}

var file_alarm_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_alarm_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_alarm_proto_goTypes = []interface{}{
	(ThresholdType)(0),          // 0: proto.ThresholdType
	(ThresholdLevel)(0),         // 1: proto.ThresholdLevel
	(ThresholdName)(0),          // 2: proto.ThresholdName
	(*BaseThreshold)(nil),       // 3: proto.BaseThreshold
	(*BaseAlarm)(nil),           // 4: proto.BaseAlarm
	(*NodeAlarm)(nil),           // 5: proto.NodeAlarm
	(*NodeHaAlarm)(nil),         // 6: proto.NodeHaAlarm
	(*MetricValueAlarm)(nil),    // 7: proto.MetricValueAlarm
	(*SubnetRadioAlarm)(nil),    // 8: proto.SubnetRadioAlarm
	(*ConflictIpAlarm)(nil),     // 9: proto.ConflictIpAlarm
	(*ConflictSubnetAlarm)(nil), // 10: proto.ConflictSubnetAlarm
	(*IllegalDhcpAlarm)(nil),    // 11: proto.IllegalDhcpAlarm
	(*IllegalLPSAlarm)(nil),     // 12: proto.IllegalLPSAlarm
	(*IpBaseLineAlarm)(nil),     // 13: proto.IpBaseLineAlarm
	(*AlarmResponse)(nil),       // 14: proto.AlarmResponse
}
var file_alarm_proto_depIdxs = []int32{
	2,  // 0: proto.BaseThreshold.name:type_name -> proto.ThresholdName
	1,  // 1: proto.BaseThreshold.level:type_name -> proto.ThresholdLevel
	0,  // 2: proto.BaseThreshold.type:type_name -> proto.ThresholdType
	3,  // 3: proto.BaseAlarm.base_threshold:type_name -> proto.BaseThreshold
	4,  // 4: proto.NodeAlarm.base_alarm:type_name -> proto.BaseAlarm
	4,  // 5: proto.NodeHaAlarm.base_alarm:type_name -> proto.BaseAlarm
	4,  // 6: proto.MetricValueAlarm.base_alarm:type_name -> proto.BaseAlarm
	4,  // 7: proto.SubnetRadioAlarm.base_alarm:type_name -> proto.BaseAlarm
	4,  // 8: proto.ConflictIpAlarm.base_alarm:type_name -> proto.BaseAlarm
	4,  // 9: proto.ConflictSubnetAlarm.base_alarm:type_name -> proto.BaseAlarm
	4,  // 10: proto.IllegalDhcpAlarm.base_alarm:type_name -> proto.BaseAlarm
	4,  // 11: proto.IllegalLPSAlarm.base_alarm:type_name -> proto.BaseAlarm
	4,  // 12: proto.IpBaseLineAlarm.base_alarm:type_name -> proto.BaseAlarm
	13, // [13:13] is the sub-list for method output_type
	13, // [13:13] is the sub-list for method input_type
	13, // [13:13] is the sub-list for extension type_name
	13, // [13:13] is the sub-list for extension extendee
	0,  // [0:13] is the sub-list for field type_name
}

func init() { file_alarm_proto_init() }
func file_alarm_proto_init() {
	if File_alarm_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_alarm_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BaseThreshold); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_alarm_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BaseAlarm); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_alarm_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeAlarm); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_alarm_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeHaAlarm); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_alarm_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MetricValueAlarm); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_alarm_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubnetRadioAlarm); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_alarm_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConflictIpAlarm); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_alarm_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConflictSubnetAlarm); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_alarm_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IllegalDhcpAlarm); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_alarm_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IllegalLPSAlarm); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_alarm_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IpBaseLineAlarm); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_alarm_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AlarmResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_alarm_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_alarm_proto_goTypes,
		DependencyIndexes: file_alarm_proto_depIdxs,
		EnumInfos:         file_alarm_proto_enumTypes,
		MessageInfos:      file_alarm_proto_msgTypes,
	}.Build()
	File_alarm_proto = out.File
	file_alarm_proto_rawDesc = nil
	file_alarm_proto_goTypes = nil
	file_alarm_proto_depIdxs = nil
}
