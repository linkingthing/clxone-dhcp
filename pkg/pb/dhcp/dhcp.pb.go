// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.15.8
// source: dhcp.proto

package dhcp

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type SearchSubnetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id []string `protobuf:"bytes,1,rep,name=id,proto3" json:"id,omitempty"`
}

func (x *SearchSubnetRequest) Reset() {
	*x = SearchSubnetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchSubnetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchSubnetRequest) ProtoMessage() {}

func (x *SearchSubnetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchSubnetRequest.ProtoReflect.Descriptor instead.
func (*SearchSubnetRequest) Descriptor() ([]byte, []int) {
	return file_dhcp_proto_rawDescGZIP(), []int{0}
}

func (x *SearchSubnetRequest) GetId() []string {
	if x != nil {
		return x.Id
	}
	return nil
}

type SearchSubnetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Subnets []*Subnet `protobuf:"bytes,1,rep,name=subnets,proto3" json:"subnets,omitempty"`
}

func (x *SearchSubnetResponse) Reset() {
	*x = SearchSubnetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchSubnetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchSubnetResponse) ProtoMessage() {}

func (x *SearchSubnetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchSubnetResponse.ProtoReflect.Descriptor instead.
func (*SearchSubnetResponse) Descriptor() ([]byte, []int) {
	return file_dhcp_proto_rawDescGZIP(), []int{1}
}

func (x *SearchSubnetResponse) GetSubnets() []*Subnet {
	if x != nil {
		return x.Subnets
	}
	return nil
}

type SearchClosestSubnetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id []string `protobuf:"bytes,1,rep,name=id,proto3" json:"id,omitempty"`
	Ip string   `protobuf:"bytes,2,opt,name=ip,proto3" json:"ip,omitempty"`
}

func (x *SearchClosestSubnetRequest) Reset() {
	*x = SearchClosestSubnetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchClosestSubnetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchClosestSubnetRequest) ProtoMessage() {}

func (x *SearchClosestSubnetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchClosestSubnetRequest.ProtoReflect.Descriptor instead.
func (*SearchClosestSubnetRequest) Descriptor() ([]byte, []int) {
	return file_dhcp_proto_rawDescGZIP(), []int{2}
}

func (x *SearchClosestSubnetRequest) GetId() []string {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *SearchClosestSubnetRequest) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

type SearchClosestSubnetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Subnet *Subnet `protobuf:"bytes,1,opt,name=subnet,proto3" json:"subnet,omitempty"`
}

func (x *SearchClosestSubnetResponse) Reset() {
	*x = SearchClosestSubnetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchClosestSubnetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchClosestSubnetResponse) ProtoMessage() {}

func (x *SearchClosestSubnetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchClosestSubnetResponse.ProtoReflect.Descriptor instead.
func (*SearchClosestSubnetResponse) Descriptor() ([]byte, []int) {
	return file_dhcp_proto_rawDescGZIP(), []int{3}
}

func (x *SearchClosestSubnetResponse) GetSubnet() *Subnet {
	if x != nil {
		return x.Subnet
	}
	return nil
}

type Subnet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Subnet      string `protobuf:"bytes,2,opt,name=subnet,proto3" json:"subnet,omitempty"`
	SubnetId    uint32 `protobuf:"varint,3,opt,name=subnet_id,json=subnetId,proto3" json:"subnet_id,omitempty"`
	Tags        string `protobuf:"bytes,4,opt,name=tags,proto3" json:"tags,omitempty"`
	NetworkType string `protobuf:"bytes,5,opt,name=network_type,json=networkType,proto3" json:"network_type,omitempty"`
	Capacity    uint64 `protobuf:"varint,6,opt,name=capacity,proto3" json:"capacity,omitempty"`
	UsedRatio   string `protobuf:"bytes,7,opt,name=used_ratio,json=usedRatio,proto3" json:"used_ratio,omitempty"`
	UsedCount   uint64 `protobuf:"varint,8,opt,name=used_count,json=usedCount,proto3" json:"used_count,omitempty"`
	Version     uint32 `protobuf:"varint,9,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *Subnet) Reset() {
	*x = Subnet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Subnet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Subnet) ProtoMessage() {}

func (x *Subnet) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Subnet.ProtoReflect.Descriptor instead.
func (*Subnet) Descriptor() ([]byte, []int) {
	return file_dhcp_proto_rawDescGZIP(), []int{4}
}

func (x *Subnet) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Subnet) GetSubnet() string {
	if x != nil {
		return x.Subnet
	}
	return ""
}

func (x *Subnet) GetSubnetId() uint32 {
	if x != nil {
		return x.SubnetId
	}
	return 0
}

func (x *Subnet) GetTags() string {
	if x != nil {
		return x.Tags
	}
	return ""
}

func (x *Subnet) GetNetworkType() string {
	if x != nil {
		return x.NetworkType
	}
	return ""
}

func (x *Subnet) GetCapacity() uint64 {
	if x != nil {
		return x.Capacity
	}
	return 0
}

func (x *Subnet) GetUsedRatio() string {
	if x != nil {
		return x.UsedRatio
	}
	return ""
}

func (x *Subnet) GetUsedCount() uint64 {
	if x != nil {
		return x.UsedCount
	}
	return 0
}

func (x *Subnet) GetVersion() uint32 {
	if x != nil {
		return x.Version
	}
	return 0
}

var File_dhcp_proto protoreflect.FileDescriptor

var file_dhcp_proto_rawDesc = []byte{
	0x0a, 0x0a, 0x64, 0x68, 0x63, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x25, 0x0a, 0x13,
	0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x22, 0x39, 0x0a, 0x14, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x53, 0x75, 0x62,
	0x6e, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x21, 0x0a, 0x07, 0x73,
	0x75, 0x62, 0x6e, 0x65, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x07, 0x2e, 0x53,
	0x75, 0x62, 0x6e, 0x65, 0x74, 0x52, 0x07, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x73, 0x22, 0x3c,
	0x0a, 0x1a, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x73, 0x74, 0x53,
	0x75, 0x62, 0x6e, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x70, 0x22, 0x3e, 0x0a, 0x1b,
	0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x73, 0x74, 0x53, 0x75, 0x62,
	0x6e, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1f, 0x0a, 0x06, 0x73,
	0x75, 0x62, 0x6e, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x07, 0x2e, 0x53, 0x75,
	0x62, 0x6e, 0x65, 0x74, 0x52, 0x06, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x22, 0xf8, 0x01, 0x0a,
	0x06, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x75, 0x62, 0x6e, 0x65,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x12,
	0x1b, 0x0a, 0x09, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x08, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x61, 0x67, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73,
	0x12, 0x21, 0x0a, 0x0c, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x12,
	0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x64, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x73, 0x65, 0x64, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x12, 0x1d,
	0x0a, 0x0a, 0x75, 0x73, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x09, 0x75, 0x73, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x18, 0x0a,
	0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x32, 0x9c, 0x01, 0x0a, 0x0b, 0x44, 0x68, 0x63, 0x70,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x3b, 0x0a, 0x0c, 0x53, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x12, 0x14, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e,
	0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x50, 0x0a, 0x13, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x43, 0x6c,
	0x6f, 0x73, 0x65, 0x73, 0x74, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x12, 0x1b, 0x2e, 0x53, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x73, 0x74, 0x53, 0x75, 0x62, 0x6e, 0x65,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x73, 0x74, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x09, 0x5a, 0x07, 0x2e, 0x2e, 0x2f, 0x64, 0x68, 0x63,
	0x70, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_dhcp_proto_rawDescOnce sync.Once
	file_dhcp_proto_rawDescData = file_dhcp_proto_rawDesc
)

func file_dhcp_proto_rawDescGZIP() []byte {
	file_dhcp_proto_rawDescOnce.Do(func() {
		file_dhcp_proto_rawDescData = protoimpl.X.CompressGZIP(file_dhcp_proto_rawDescData)
	})
	return file_dhcp_proto_rawDescData
}

var file_dhcp_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_dhcp_proto_goTypes = []interface{}{
	(*SearchSubnetRequest)(nil),         // 0: SearchSubnetRequest
	(*SearchSubnetResponse)(nil),        // 1: SearchSubnetResponse
	(*SearchClosestSubnetRequest)(nil),  // 2: SearchClosestSubnetRequest
	(*SearchClosestSubnetResponse)(nil), // 3: SearchClosestSubnetResponse
	(*Subnet)(nil),                      // 4: Subnet
}
var file_dhcp_proto_depIdxs = []int32{
	4, // 0: SearchSubnetResponse.subnets:type_name -> Subnet
	4, // 1: SearchClosestSubnetResponse.subnet:type_name -> Subnet
	0, // 2: DhcpService.SearchSubnet:input_type -> SearchSubnetRequest
	2, // 3: DhcpService.SearchClosestSubnet:input_type -> SearchClosestSubnetRequest
	1, // 4: DhcpService.SearchSubnet:output_type -> SearchSubnetResponse
	3, // 5: DhcpService.SearchClosestSubnet:output_type -> SearchClosestSubnetResponse
	4, // [4:6] is the sub-list for method output_type
	2, // [2:4] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_dhcp_proto_init() }
func file_dhcp_proto_init() {
	if File_dhcp_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_dhcp_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchSubnetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchSubnetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchClosestSubnetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchClosestSubnetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Subnet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_dhcp_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_dhcp_proto_goTypes,
		DependencyIndexes: file_dhcp_proto_depIdxs,
		MessageInfos:      file_dhcp_proto_msgTypes,
	}.Build()
	File_dhcp_proto = out.File
	file_dhcp_proto_rawDesc = nil
	file_dhcp_proto_goTypes = nil
	file_dhcp_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// DhcpServiceClient is the client API for DhcpService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DhcpServiceClient interface {
	SearchSubnet(ctx context.Context, in *SearchSubnetRequest, opts ...grpc.CallOption) (*SearchSubnetResponse, error)
	SearchClosestSubnet(ctx context.Context, in *SearchClosestSubnetRequest, opts ...grpc.CallOption) (*SearchClosestSubnetResponse, error)
}

type dhcpServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDhcpServiceClient(cc grpc.ClientConnInterface) DhcpServiceClient {
	return &dhcpServiceClient{cc}
}

func (c *dhcpServiceClient) SearchSubnet(ctx context.Context, in *SearchSubnetRequest, opts ...grpc.CallOption) (*SearchSubnetResponse, error) {
	out := new(SearchSubnetResponse)
	err := c.cc.Invoke(ctx, "/DhcpService/SearchSubnet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dhcpServiceClient) SearchClosestSubnet(ctx context.Context, in *SearchClosestSubnetRequest, opts ...grpc.CallOption) (*SearchClosestSubnetResponse, error) {
	out := new(SearchClosestSubnetResponse)
	err := c.cc.Invoke(ctx, "/DhcpService/SearchClosestSubnet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DhcpServiceServer is the server API for DhcpService service.
type DhcpServiceServer interface {
	SearchSubnet(context.Context, *SearchSubnetRequest) (*SearchSubnetResponse, error)
	SearchClosestSubnet(context.Context, *SearchClosestSubnetRequest) (*SearchClosestSubnetResponse, error)
}

// UnimplementedDhcpServiceServer can be embedded to have forward compatible implementations.
type UnimplementedDhcpServiceServer struct {
}

func (*UnimplementedDhcpServiceServer) SearchSubnet(context.Context, *SearchSubnetRequest) (*SearchSubnetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchSubnet not implemented")
}
func (*UnimplementedDhcpServiceServer) SearchClosestSubnet(context.Context, *SearchClosestSubnetRequest) (*SearchClosestSubnetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchClosestSubnet not implemented")
}

func RegisterDhcpServiceServer(s *grpc.Server, srv DhcpServiceServer) {
	s.RegisterService(&_DhcpService_serviceDesc, srv)
}

func _DhcpService_SearchSubnet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchSubnetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DhcpServiceServer).SearchSubnet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DhcpService/SearchSubnet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DhcpServiceServer).SearchSubnet(ctx, req.(*SearchSubnetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DhcpService_SearchClosestSubnet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchClosestSubnetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DhcpServiceServer).SearchClosestSubnet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DhcpService/SearchClosestSubnet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DhcpServiceServer).SearchClosestSubnet(ctx, req.(*SearchClosestSubnetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _DhcpService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "DhcpService",
	HandlerType: (*DhcpServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SearchSubnet",
			Handler:    _DhcpService_SearchSubnet_Handler,
		},
		{
			MethodName: "SearchClosestSubnet",
			Handler:    _DhcpService_SearchClosestSubnet_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dhcp.proto",
}
