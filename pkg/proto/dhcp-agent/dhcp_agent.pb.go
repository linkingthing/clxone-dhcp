// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.21.0
// 	protoc        v3.6.1
// source: dhcp_agent.proto

package dhcp_agent

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type LeaseState int32

const (
	LeaseState_NORMAL    LeaseState = 0
	LeaseState_DECLINED  LeaseState = 1
	LeaseState_RECLAIMED LeaseState = 2
)

// Enum value maps for LeaseState.
var (
	LeaseState_name = map[int32]string{
		0: "NORMAL",
		1: "DECLINED",
		2: "RECLAIMED",
	}
	LeaseState_value = map[string]int32{
		"NORMAL":    0,
		"DECLINED":  1,
		"RECLAIMED": 2,
	}
)

func (x LeaseState) Enum() *LeaseState {
	p := new(LeaseState)
	*p = x
	return p
}

func (x LeaseState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LeaseState) Descriptor() protoreflect.EnumDescriptor {
	return file_dhcp_agent_proto_enumTypes[0].Descriptor()
}

func (LeaseState) Type() protoreflect.EnumType {
	return &file_dhcp_agent_proto_enumTypes[0]
}

func (x LeaseState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LeaseState.Descriptor instead.
func (LeaseState) EnumDescriptor() ([]byte, []int) {
	return file_dhcp_agent_proto_rawDescGZIP(), []int{0}
}

type HwAddressSource int32

const (
	HwAddressSource_UNKNOWN         HwAddressSource = 0
	HwAddressSource_DUID            HwAddressSource = 2
	HwAddressSource_IPv6_LINKLOCAL  HwAddressSource = 4
	HwAddressSource_CLIENT_LINKADDR HwAddressSource = 8
	HwAddressSource_REMOTE_ID       HwAddressSource = 16
	HwAddressSource_DOCSIS_CMTS     HwAddressSource = 64
	HwAddressSource_DOCSIS_MODEM    HwAddressSource = 128
)

// Enum value maps for HwAddressSource.
var (
	HwAddressSource_name = map[int32]string{
		0:   "UNKNOWN",
		2:   "DUID",
		4:   "IPv6_LINKLOCAL",
		8:   "CLIENT_LINKADDR",
		16:  "REMOTE_ID",
		64:  "DOCSIS_CMTS",
		128: "DOCSIS_MODEM",
	}
	HwAddressSource_value = map[string]int32{
		"UNKNOWN":         0,
		"DUID":            2,
		"IPv6_LINKLOCAL":  4,
		"CLIENT_LINKADDR": 8,
		"REMOTE_ID":       16,
		"DOCSIS_CMTS":     64,
		"DOCSIS_MODEM":    128,
	}
)

func (x HwAddressSource) Enum() *HwAddressSource {
	p := new(HwAddressSource)
	*p = x
	return p
}

func (x HwAddressSource) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HwAddressSource) Descriptor() protoreflect.EnumDescriptor {
	return file_dhcp_agent_proto_enumTypes[1].Descriptor()
}

func (HwAddressSource) Type() protoreflect.EnumType {
	return &file_dhcp_agent_proto_enumTypes[1]
}

func (x HwAddressSource) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HwAddressSource.Descriptor instead.
func (HwAddressSource) EnumDescriptor() ([]byte, []int) {
	return file_dhcp_agent_proto_rawDescGZIP(), []int{1}
}

type GetDHCPNodesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetDHCPNodesRequest) Reset() {
	*x = GetDHCPNodesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_agent_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDHCPNodesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDHCPNodesRequest) ProtoMessage() {}

func (x *GetDHCPNodesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_agent_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDHCPNodesRequest.ProtoReflect.Descriptor instead.
func (*GetDHCPNodesRequest) Descriptor() ([]byte, []int) {
	return file_dhcp_agent_proto_rawDescGZIP(), []int{0}
}

type GetDHCPNodesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Succeed bool     `protobuf:"varint,1,opt,name=succeed,proto3" json:"succeed,omitempty"`
	Ipv4S   []string `protobuf:"bytes,2,rep,name=ipv4s,proto3" json:"ipv4s,omitempty"`
	Ipv6S   []string `protobuf:"bytes,3,rep,name=ipv6s,proto3" json:"ipv6s,omitempty"`
}

func (x *GetDHCPNodesResponse) Reset() {
	*x = GetDHCPNodesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_agent_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDHCPNodesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDHCPNodesResponse) ProtoMessage() {}

func (x *GetDHCPNodesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_agent_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDHCPNodesResponse.ProtoReflect.Descriptor instead.
func (*GetDHCPNodesResponse) Descriptor() ([]byte, []int) {
	return file_dhcp_agent_proto_rawDescGZIP(), []int{1}
}

func (x *GetDHCPNodesResponse) GetSucceed() bool {
	if x != nil {
		return x.Succeed
	}
	return false
}

func (x *GetDHCPNodesResponse) GetIpv4S() []string {
	if x != nil {
		return x.Ipv4S
	}
	return nil
}

func (x *GetDHCPNodesResponse) GetIpv6S() []string {
	if x != nil {
		return x.Ipv6S
	}
	return nil
}

type SubnetOption struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Code uint32 `protobuf:"varint,2,opt,name=code,proto3" json:"code,omitempty"`
	Data string `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *SubnetOption) Reset() {
	*x = SubnetOption{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_agent_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubnetOption) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubnetOption) ProtoMessage() {}

func (x *SubnetOption) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_agent_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubnetOption.ProtoReflect.Descriptor instead.
func (*SubnetOption) Descriptor() ([]byte, []int) {
	return file_dhcp_agent_proto_rawDescGZIP(), []int{2}
}

func (x *SubnetOption) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SubnetOption) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *SubnetOption) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

type CreateSubnet4Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                       uint64          `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Subnet                   string          `protobuf:"bytes,2,opt,name=subnet,proto3" json:"subnet,omitempty"`
	ValidLifetime            uint32          `protobuf:"varint,3,opt,name=valid_lifetime,json=validLifetime,proto3" json:"valid_lifetime,omitempty"`
	MaxValidLifetime         uint32          `protobuf:"varint,4,opt,name=max_valid_lifetime,json=maxValidLifetime,proto3" json:"max_valid_lifetime,omitempty"`
	MinValidLifetime         uint32          `protobuf:"varint,5,opt,name=min_valid_lifetime,json=minValidLifetime,proto3" json:"min_valid_lifetime,omitempty"`
	RenewTime                uint32          `protobuf:"varint,6,opt,name=renew_time,json=renewTime,proto3" json:"renew_time,omitempty"`
	RebindTime               uint32          `protobuf:"varint,7,opt,name=rebind_time,json=rebindTime,proto3" json:"rebind_time,omitempty"`
	WhiteClientClassStrategy string          `protobuf:"bytes,8,opt,name=white_client_class_strategy,json=whiteClientClassStrategy,proto3" json:"white_client_class_strategy,omitempty"`
	WhiteClientClasses       []string        `protobuf:"bytes,9,rep,name=white_client_classes,json=whiteClientClasses,proto3" json:"white_client_classes,omitempty"`
	BlackClientClassStrategy string          `protobuf:"bytes,10,opt,name=black_client_class_strategy,json=blackClientClassStrategy,proto3" json:"black_client_class_strategy,omitempty"`
	BlackClientClasses       []string        `protobuf:"bytes,11,rep,name=black_client_classes,json=blackClientClasses,proto3" json:"black_client_classes,omitempty"`
	RelayAgentCircuitId      string          `protobuf:"bytes,12,opt,name=relay_agent_circuit_id,json=relayAgentCircuitId,proto3" json:"relay_agent_circuit_id,omitempty"`
	RelayAgentRemoteId       string          `protobuf:"bytes,13,opt,name=relay_agent_remote_id,json=relayAgentRemoteId,proto3" json:"relay_agent_remote_id,omitempty"`
	RelayAgentAddresses      []string        `protobuf:"bytes,14,rep,name=relay_agent_addresses,json=relayAgentAddresses,proto3" json:"relay_agent_addresses,omitempty"`
	IfaceName                string          `protobuf:"bytes,15,opt,name=iface_name,json=ifaceName,proto3" json:"iface_name,omitempty"`
	NextServer               string          `protobuf:"bytes,16,opt,name=next_server,json=nextServer,proto3" json:"next_server,omitempty"`
	SubnetOptions            []*SubnetOption `protobuf:"bytes,17,rep,name=subnet_options,json=subnetOptions,proto3" json:"subnet_options,omitempty"`
}

func (x *CreateSubnet4Request) Reset() {
	*x = CreateSubnet4Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_agent_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateSubnet4Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSubnet4Request) ProtoMessage() {}

func (x *CreateSubnet4Request) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_agent_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSubnet4Request.ProtoReflect.Descriptor instead.
func (*CreateSubnet4Request) Descriptor() ([]byte, []int) {
	return file_dhcp_agent_proto_rawDescGZIP(), []int{3}
}

func (x *CreateSubnet4Request) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *CreateSubnet4Request) GetSubnet() string {
	if x != nil {
		return x.Subnet
	}
	return ""
}

func (x *CreateSubnet4Request) GetValidLifetime() uint32 {
	if x != nil {
		return x.ValidLifetime
	}
	return 0
}

func (x *CreateSubnet4Request) GetMaxValidLifetime() uint32 {
	if x != nil {
		return x.MaxValidLifetime
	}
	return 0
}

func (x *CreateSubnet4Request) GetMinValidLifetime() uint32 {
	if x != nil {
		return x.MinValidLifetime
	}
	return 0
}

func (x *CreateSubnet4Request) GetRenewTime() uint32 {
	if x != nil {
		return x.RenewTime
	}
	return 0
}

func (x *CreateSubnet4Request) GetRebindTime() uint32 {
	if x != nil {
		return x.RebindTime
	}
	return 0
}

func (x *CreateSubnet4Request) GetWhiteClientClassStrategy() string {
	if x != nil {
		return x.WhiteClientClassStrategy
	}
	return ""
}

func (x *CreateSubnet4Request) GetWhiteClientClasses() []string {
	if x != nil {
		return x.WhiteClientClasses
	}
	return nil
}

func (x *CreateSubnet4Request) GetBlackClientClassStrategy() string {
	if x != nil {
		return x.BlackClientClassStrategy
	}
	return ""
}

func (x *CreateSubnet4Request) GetBlackClientClasses() []string {
	if x != nil {
		return x.BlackClientClasses
	}
	return nil
}

func (x *CreateSubnet4Request) GetRelayAgentCircuitId() string {
	if x != nil {
		return x.RelayAgentCircuitId
	}
	return ""
}

func (x *CreateSubnet4Request) GetRelayAgentRemoteId() string {
	if x != nil {
		return x.RelayAgentRemoteId
	}
	return ""
}

func (x *CreateSubnet4Request) GetRelayAgentAddresses() []string {
	if x != nil {
		return x.RelayAgentAddresses
	}
	return nil
}

func (x *CreateSubnet4Request) GetIfaceName() string {
	if x != nil {
		return x.IfaceName
	}
	return ""
}

func (x *CreateSubnet4Request) GetNextServer() string {
	if x != nil {
		return x.NextServer
	}
	return ""
}

func (x *CreateSubnet4Request) GetSubnetOptions() []*SubnetOption {
	if x != nil {
		return x.SubnetOptions
	}
	return nil
}

type DeleteSubnet4Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteSubnet4Request) Reset() {
	*x = DeleteSubnet4Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_agent_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteSubnet4Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteSubnet4Request) ProtoMessage() {}

func (x *DeleteSubnet4Request) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_agent_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteSubnet4Request.ProtoReflect.Descriptor instead.
func (*DeleteSubnet4Request) Descriptor() ([]byte, []int) {
	return file_dhcp_agent_proto_rawDescGZIP(), []int{4}
}

func (x *DeleteSubnet4Request) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type UpdateSubnet4Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                       uint64          `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Subnet                   string          `protobuf:"bytes,2,opt,name=subnet,proto3" json:"subnet,omitempty"`
	ValidLifetime            uint32          `protobuf:"varint,3,opt,name=valid_lifetime,json=validLifetime,proto3" json:"valid_lifetime,omitempty"`
	MaxValidLifetime         uint32          `protobuf:"varint,4,opt,name=max_valid_lifetime,json=maxValidLifetime,proto3" json:"max_valid_lifetime,omitempty"`
	MinValidLifetime         uint32          `protobuf:"varint,5,opt,name=min_valid_lifetime,json=minValidLifetime,proto3" json:"min_valid_lifetime,omitempty"`
	RenewTime                uint32          `protobuf:"varint,6,opt,name=renew_time,json=renewTime,proto3" json:"renew_time,omitempty"`
	RebindTime               uint32          `protobuf:"varint,7,opt,name=rebind_time,json=rebindTime,proto3" json:"rebind_time,omitempty"`
	WhiteClientClassStrategy string          `protobuf:"bytes,8,opt,name=white_client_class_strategy,json=whiteClientClassStrategy,proto3" json:"white_client_class_strategy,omitempty"`
	WhiteClientClasses       []string        `protobuf:"bytes,9,rep,name=white_client_classes,json=whiteClientClasses,proto3" json:"white_client_classes,omitempty"`
	BlackClientClassStrategy string          `protobuf:"bytes,10,opt,name=black_client_class_strategy,json=blackClientClassStrategy,proto3" json:"black_client_class_strategy,omitempty"`
	BlackClientClasses       []string        `protobuf:"bytes,11,rep,name=black_client_classes,json=blackClientClasses,proto3" json:"black_client_classes,omitempty"`
	RelayAgentCircuitId      string          `protobuf:"bytes,12,opt,name=relay_agent_circuit_id,json=relayAgentCircuitId,proto3" json:"relay_agent_circuit_id,omitempty"`
	RelayAgentRemoteId       string          `protobuf:"bytes,13,opt,name=relay_agent_remote_id,json=relayAgentRemoteId,proto3" json:"relay_agent_remote_id,omitempty"`
	RelayAgentAddresses      []string        `protobuf:"bytes,14,rep,name=relay_agent_addresses,json=relayAgentAddresses,proto3" json:"relay_agent_addresses,omitempty"`
	IfaceName                string          `protobuf:"bytes,15,opt,name=iface_name,json=ifaceName,proto3" json:"iface_name,omitempty"`
	NextServer               string          `protobuf:"bytes,16,opt,name=next_server,json=nextServer,proto3" json:"next_server,omitempty"`
	SubnetOptions            []*SubnetOption `protobuf:"bytes,17,rep,name=subnet_options,json=subnetOptions,proto3" json:"subnet_options,omitempty"`
}

func (x *UpdateSubnet4Request) Reset() {
	*x = UpdateSubnet4Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_agent_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateSubnet4Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSubnet4Request) ProtoMessage() {}

func (x *UpdateSubnet4Request) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_agent_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSubnet4Request.ProtoReflect.Descriptor instead.
func (*UpdateSubnet4Request) Descriptor() ([]byte, []int) {
	return file_dhcp_agent_proto_rawDescGZIP(), []int{5}
}

func (x *UpdateSubnet4Request) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpdateSubnet4Request) GetSubnet() string {
	if x != nil {
		return x.Subnet
	}
	return ""
}

func (x *UpdateSubnet4Request) GetValidLifetime() uint32 {
	if x != nil {
		return x.ValidLifetime
	}
	return 0
}

func (x *UpdateSubnet4Request) GetMaxValidLifetime() uint32 {
	if x != nil {
		return x.MaxValidLifetime
	}
	return 0
}

func (x *UpdateSubnet4Request) GetMinValidLifetime() uint32 {
	if x != nil {
		return x.MinValidLifetime
	}
	return 0
}

func (x *UpdateSubnet4Request) GetRenewTime() uint32 {
	if x != nil {
		return x.RenewTime
	}
	return 0
}

func (x *UpdateSubnet4Request) GetRebindTime() uint32 {
	if x != nil {
		return x.RebindTime
	}
	return 0
}

func (x *UpdateSubnet4Request) GetWhiteClientClassStrategy() string {
	if x != nil {
		return x.WhiteClientClassStrategy
	}
	return ""
}

func (x *UpdateSubnet4Request) GetWhiteClientClasses() []string {
	if x != nil {
		return x.WhiteClientClasses
	}
	return nil
}

func (x *UpdateSubnet4Request) GetBlackClientClassStrategy() string {
	if x != nil {
		return x.BlackClientClassStrategy
	}
	return ""
}

func (x *UpdateSubnet4Request) GetBlackClientClasses() []string {
	if x != nil {
		return x.BlackClientClasses
	}
	return nil
}

func (x *UpdateSubnet4Request) GetRelayAgentCircuitId() string {
	if x != nil {
		return x.RelayAgentCircuitId
	}
	return ""
}

func (x *UpdateSubnet4Request) GetRelayAgentRemoteId() string {
	if x != nil {
		return x.RelayAgentRemoteId
	}
	return ""
}

func (x *UpdateSubnet4Request) GetRelayAgentAddresses() []string {
	if x != nil {
		return x.RelayAgentAddresses
	}
	return nil
}

func (x *UpdateSubnet4Request) GetIfaceName() string {
	if x != nil {
		return x.IfaceName
	}
	return ""
}

func (x *UpdateSubnet4Request) GetNextServer() string {
	if x != nil {
		return x.NextServer
	}
	return ""
}

func (x *UpdateSubnet4Request) GetSubnetOptions() []*SubnetOption {
	if x != nil {
		return x.SubnetOptions
	}
	return nil
}

type CreateSubnet6Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                       uint64          `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Subnet                   string          `protobuf:"bytes,2,opt,name=subnet,proto3" json:"subnet,omitempty"`
	ValidLifetime            uint32          `protobuf:"varint,3,opt,name=valid_lifetime,json=validLifetime,proto3" json:"valid_lifetime,omitempty"`
	MaxValidLifetime         uint32          `protobuf:"varint,4,opt,name=max_valid_lifetime,json=maxValidLifetime,proto3" json:"max_valid_lifetime,omitempty"`
	MinValidLifetime         uint32          `protobuf:"varint,5,opt,name=min_valid_lifetime,json=minValidLifetime,proto3" json:"min_valid_lifetime,omitempty"`
	RenewTime                uint32          `protobuf:"varint,6,opt,name=renew_time,json=renewTime,proto3" json:"renew_time,omitempty"`
	RebindTime               uint32          `protobuf:"varint,7,opt,name=rebind_time,json=rebindTime,proto3" json:"rebind_time,omitempty"`
	WhiteClientClassStrategy string          `protobuf:"bytes,8,opt,name=white_client_class_strategy,json=whiteClientClassStrategy,proto3" json:"white_client_class_strategy,omitempty"`
	WhiteClientClasses       []string        `protobuf:"bytes,9,rep,name=white_client_classes,json=whiteClientClasses,proto3" json:"white_client_classes,omitempty"`
	BlackClientClassStrategy string          `protobuf:"bytes,10,opt,name=black_client_class_strategy,json=blackClientClassStrategy,proto3" json:"black_client_class_strategy,omitempty"`
	BlackClientClasses       []string        `protobuf:"bytes,11,rep,name=black_client_classes,json=blackClientClasses,proto3" json:"black_client_classes,omitempty"`
	RelayAgentAddresses      []string        `protobuf:"bytes,12,rep,name=relay_agent_addresses,json=relayAgentAddresses,proto3" json:"relay_agent_addresses,omitempty"`
	RelayAgentInterfaceId    string          `protobuf:"bytes,13,opt,name=relay_agent_interface_id,json=relayAgentInterfaceId,proto3" json:"relay_agent_interface_id,omitempty"`
	IfaceName                string          `protobuf:"bytes,14,opt,name=iface_name,json=ifaceName,proto3" json:"iface_name,omitempty"`
	RapidCommit              bool            `protobuf:"varint,15,opt,name=rapid_commit,json=rapidCommit,proto3" json:"rapid_commit,omitempty"`
	UseEui64                 bool            `protobuf:"varint,16,opt,name=use_eui64,json=useEui64,proto3" json:"use_eui64,omitempty"`
	AddressCode              string          `protobuf:"bytes,17,opt,name=address_code,json=addressCode,proto3" json:"address_code,omitempty"`
	PreferredLifetime        uint32          `protobuf:"varint,18,opt,name=preferred_lifetime,json=preferredLifetime,proto3" json:"preferred_lifetime,omitempty"`
	MinPreferredLifetime     uint32          `protobuf:"varint,19,opt,name=min_preferred_lifetime,json=minPreferredLifetime,proto3" json:"min_preferred_lifetime,omitempty"`
	MaxPreferredLifetime     uint32          `protobuf:"varint,20,opt,name=max_preferred_lifetime,json=maxPreferredLifetime,proto3" json:"max_preferred_lifetime,omitempty"`
	SubnetOptions            []*SubnetOption `protobuf:"bytes,21,rep,name=subnet_options,json=subnetOptions,proto3" json:"subnet_options,omitempty"`
}

func (x *CreateSubnet6Request) Reset() {
	*x = CreateSubnet6Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_agent_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateSubnet6Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSubnet6Request) ProtoMessage() {}

func (x *CreateSubnet6Request) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_agent_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSubnet6Request.ProtoReflect.Descriptor instead.
func (*CreateSubnet6Request) Descriptor() ([]byte, []int) {
	return file_dhcp_agent_proto_rawDescGZIP(), []int{6}
}

func (x *CreateSubnet6Request) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *CreateSubnet6Request) GetSubnet() string {
	if x != nil {
		return x.Subnet
	}
	return ""
}

func (x *CreateSubnet6Request) GetValidLifetime() uint32 {
	if x != nil {
		return x.ValidLifetime
	}
	return 0
}

func (x *CreateSubnet6Request) GetMaxValidLifetime() uint32 {
	if x != nil {
		return x.MaxValidLifetime
	}
	return 0
}

func (x *CreateSubnet6Request) GetMinValidLifetime() uint32 {
	if x != nil {
		return x.MinValidLifetime
	}
	return 0
}

func (x *CreateSubnet6Request) GetRenewTime() uint32 {
	if x != nil {
		return x.RenewTime
	}
	return 0
}

func (x *CreateSubnet6Request) GetRebindTime() uint32 {
	if x != nil {
		return x.RebindTime
	}
	return 0
}

func (x *CreateSubnet6Request) GetWhiteClientClassStrategy() string {
	if x != nil {
		return x.WhiteClientClassStrategy
	}
	return ""
}

func (x *CreateSubnet6Request) GetWhiteClientClasses() []string {
	if x != nil {
		return x.WhiteClientClasses
	}
	return nil
}

func (x *CreateSubnet6Request) GetBlackClientClassStrategy() string {
	if x != nil {
		return x.BlackClientClassStrategy
	}
	return ""
}

func (x *CreateSubnet6Request) GetBlackClientClasses() []string {
	if x != nil {
		return x.BlackClientClasses
	}
	return nil
}

func (x *CreateSubnet6Request) GetRelayAgentAddresses() []string {
	if x != nil {
		return x.RelayAgentAddresses
	}
	return nil
}

func (x *CreateSubnet6Request) GetRelayAgentInterfaceId() string {
	if x != nil {
		return x.RelayAgentInterfaceId
	}
	return ""
}

func (x *CreateSubnet6Request) GetIfaceName() string {
	if x != nil {
		return x.IfaceName
	}
	return ""
}

func (x *CreateSubnet6Request) GetRapidCommit() bool {
	if x != nil {
		return x.RapidCommit
	}
	return false
}

func (x *CreateSubnet6Request) GetUseEui64() bool {
	if x != nil {
		return x.UseEui64
	}
	return false
}

func (x *CreateSubnet6Request) GetAddressCode() string {
	if x != nil {
		return x.AddressCode
	}
	return ""
}

func (x *CreateSubnet6Request) GetPreferredLifetime() uint32 {
	if x != nil {
		return x.PreferredLifetime
	}
	return 0
}

func (x *CreateSubnet6Request) GetMinPreferredLifetime() uint32 {
	if x != nil {
		return x.MinPreferredLifetime
	}
	return 0
}

func (x *CreateSubnet6Request) GetMaxPreferredLifetime() uint32 {
	if x != nil {
		return x.MaxPreferredLifetime
	}
	return 0
}

func (x *CreateSubnet6Request) GetSubnetOptions() []*SubnetOption {
	if x != nil {
		return x.SubnetOptions
	}
	return nil
}

type DeleteSubnet6Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteSubnet6Request) Reset() {
	*x = DeleteSubnet6Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_agent_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteSubnet6Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteSubnet6Request) ProtoMessage() {}

func (x *DeleteSubnet6Request) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_agent_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteSubnet6Request.ProtoReflect.Descriptor instead.
func (*DeleteSubnet6Request) Descriptor() ([]byte, []int) {
	return file_dhcp_agent_proto_rawDescGZIP(), []int{7}
}

func (x *DeleteSubnet6Request) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type UpdateSubnet6Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                       uint64          `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Subnet                   string          `protobuf:"bytes,2,opt,name=subnet,proto3" json:"subnet,omitempty"`
	ValidLifetime            uint32          `protobuf:"varint,3,opt,name=valid_lifetime,json=validLifetime,proto3" json:"valid_lifetime,omitempty"`
	MaxValidLifetime         uint32          `protobuf:"varint,4,opt,name=max_valid_lifetime,json=maxValidLifetime,proto3" json:"max_valid_lifetime,omitempty"`
	MinValidLifetime         uint32          `protobuf:"varint,5,opt,name=min_valid_lifetime,json=minValidLifetime,proto3" json:"min_valid_lifetime,omitempty"`
	RenewTime                uint32          `protobuf:"varint,6,opt,name=renew_time,json=renewTime,proto3" json:"renew_time,omitempty"`
	RebindTime               uint32          `protobuf:"varint,7,opt,name=rebind_time,json=rebindTime,proto3" json:"rebind_time,omitempty"`
	WhiteClientClassStrategy string          `protobuf:"bytes,8,opt,name=white_client_class_strategy,json=whiteClientClassStrategy,proto3" json:"white_client_class_strategy,omitempty"`
	WhiteClientClasses       []string        `protobuf:"bytes,9,rep,name=white_client_classes,json=whiteClientClasses,proto3" json:"white_client_classes,omitempty"`
	BlackClientClassStrategy string          `protobuf:"bytes,10,opt,name=black_client_class_strategy,json=blackClientClassStrategy,proto3" json:"black_client_class_strategy,omitempty"`
	BlackClientClasses       []string        `protobuf:"bytes,11,rep,name=black_client_classes,json=blackClientClasses,proto3" json:"black_client_classes,omitempty"`
	RelayAgentAddresses      []string        `protobuf:"bytes,12,rep,name=relay_agent_addresses,json=relayAgentAddresses,proto3" json:"relay_agent_addresses,omitempty"`
	RelayAgentInterfaceId    string          `protobuf:"bytes,13,opt,name=relay_agent_interface_id,json=relayAgentInterfaceId,proto3" json:"relay_agent_interface_id,omitempty"`
	IfaceName                string          `protobuf:"bytes,14,opt,name=iface_name,json=ifaceName,proto3" json:"iface_name,omitempty"`
	RapidCommit              bool            `protobuf:"varint,15,opt,name=rapid_commit,json=rapidCommit,proto3" json:"rapid_commit,omitempty"`
	UseEui64                 bool            `protobuf:"varint,16,opt,name=use_eui64,json=useEui64,proto3" json:"use_eui64,omitempty"`
	AddressCode              string          `protobuf:"bytes,17,opt,name=address_code,json=addressCode,proto3" json:"address_code,omitempty"`
	PreferredLifetime        uint32          `protobuf:"varint,18,opt,name=preferred_lifetime,json=preferredLifetime,proto3" json:"preferred_lifetime,omitempty"`
	MinPreferredLifetime     uint32          `protobuf:"varint,19,opt,name=min_preferred_lifetime,json=minPreferredLifetime,proto3" json:"min_preferred_lifetime,omitempty"`
	MaxPreferredLifetime     uint32          `protobuf:"varint,20,opt,name=max_preferred_lifetime,json=maxPreferredLifetime,proto3" json:"max_preferred_lifetime,omitempty"`
	SubnetOptions            []*SubnetOption `protobuf:"bytes,21,rep,name=subnet_options,json=subnetOptions,proto3" json:"subnet_options,omitempty"`
}

func (x *UpdateSubnet6Request) Reset() {
	*x = UpdateSubnet6Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_agent_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateSubnet6Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSubnet6Request) ProtoMessage() {}

func (x *UpdateSubnet6Request) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_agent_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSubnet6Request.ProtoReflect.Descriptor instead.
func (*UpdateSubnet6Request) Descriptor() ([]byte, []int) {
	return file_dhcp_agent_proto_rawDescGZIP(), []int{8}
}

func (x *UpdateSubnet6Request) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpdateSubnet6Request) GetSubnet() string {
	if x != nil {
		return x.Subnet
	}
	return ""
}

func (x *UpdateSubnet6Request) GetValidLifetime() uint32 {
	if x != nil {
		return x.ValidLifetime
	}
	return 0
}

func (x *UpdateSubnet6Request) GetMaxValidLifetime() uint32 {
	if x != nil {
		return x.MaxValidLifetime
	}
	return 0
}

func (x *UpdateSubnet6Request) GetMinValidLifetime() uint32 {
	if x != nil {
		return x.MinValidLifetime
	}
	return 0
}

func (x *UpdateSubnet6Request) GetRenewTime() uint32 {
	if x != nil {
		return x.RenewTime
	}
	return 0
}

func (x *UpdateSubnet6Request) GetRebindTime() uint32 {
	if x != nil {
		return x.RebindTime
	}
	return 0
}

func (x *UpdateSubnet6Request) GetWhiteClientClassStrategy() string {
	if x != nil {
		return x.WhiteClientClassStrategy
	}
	return ""
}

func (x *UpdateSubnet6Request) GetWhiteClientClasses() []string {
	if x != nil {
		return x.WhiteClientClasses
	}
	return nil
}

func (x *UpdateSubnet6Request) GetBlackClientClassStrategy() string {
	if x != nil {
		return x.BlackClientClassStrategy
	}
	return ""
}

func (x *UpdateSubnet6Request) GetBlackClientClasses() []string {
	if x != nil {
		return x.BlackClientClasses
	}
	return nil
}

func (x *UpdateSubnet6Request) GetRelayAgentAddresses() []string {
	if x != nil {
		return x.RelayAgentAddresses
	}
	return nil
}

func (x *UpdateSubnet6Request) GetRelayAgentInterfaceId() string {
	if x != nil {
		return x.RelayAgentInterfaceId
	}
	return ""
}

func (x *UpdateSubnet6Request) GetIfaceName() string {
	if x != nil {
		return x.IfaceName
	}
	return ""
}

func (x *UpdateSubnet6Request) GetRapidCommit() bool {
	if x != nil {
		return x.RapidCommit
	}
	return false
}

func (x *UpdateSubnet6Request) GetUseEui64() bool {
	if x != nil {
		return x.UseEui64
	}
	return false
}

func (x *UpdateSubnet6Request) GetAddressCode() string {
	if x != nil {
		return x.AddressCode
	}
	return ""
}

func (x *UpdateSubnet6Request) GetPreferredLifetime() uint32 {
	if x != nil {
		return x.PreferredLifetime
	}
	return 0
}

func (x *UpdateSubnet6Request) GetMinPreferredLifetime() uint32 {
	if x != nil {
		return x.MinPreferredLifetime
	}
	return 0
}

func (x *UpdateSubnet6Request) GetMaxPreferredLifetime() uint32 {
	if x != nil {
		return x.MaxPreferredLifetime
	}
	return 0
}

func (x *UpdateSubnet6Request) GetSubnetOptions() []*SubnetOption {
	if x != nil {
		return x.SubnetOptions
	}
	return nil
}

type CreatePool4Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubnetId     uint64 `protobuf:"varint,1,opt,name=subnet_id,json=subnetId,proto3" json:"subnet_id,omitempty"`
	BeginAddress string `protobuf:"bytes,2,opt,name=begin_address,json=beginAddress,proto3" json:"begin_address,omitempty"`
	EndAddress   string `protobuf:"bytes,3,opt,name=end_address,json=endAddress,proto3" json:"end_address,omitempty"`
}

func (x *CreatePool4Request) Reset() {
	*x = CreatePool4Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_agent_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreatePool4Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePool4Request) ProtoMessage() {}

func (x *CreatePool4Request) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_agent_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePool4Request.ProtoReflect.Descriptor instead.
func (*CreatePool4Request) Descriptor() ([]byte, []int) {
	return file_dhcp_agent_proto_rawDescGZIP(), []int{9}
}

func (x *CreatePool4Request) GetSubnetId() uint64 {
	if x != nil {
		return x.SubnetId
	}
	return 0
}

func (x *CreatePool4Request) GetBeginAddress() string {
	if x != nil {
		return x.BeginAddress
	}
	return ""
}

func (x *CreatePool4Request) GetEndAddress() string {
	if x != nil {
		return x.EndAddress
	}
	return ""
}

type DeletePool4Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubnetId     uint64 `protobuf:"varint,1,opt,name=subnet_id,json=subnetId,proto3" json:"subnet_id,omitempty"`
	BeginAddress string `protobuf:"bytes,2,opt,name=begin_address,json=beginAddress,proto3" json:"begin_address,omitempty"`
	EndAddress   string `protobuf:"bytes,3,opt,name=end_address,json=endAddress,proto3" json:"end_address,omitempty"`
}

func (x *DeletePool4Request) Reset() {
	*x = DeletePool4Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_agent_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeletePool4Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeletePool4Request) ProtoMessage() {}

func (x *DeletePool4Request) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_agent_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeletePool4Request.ProtoReflect.Descriptor instead.
func (*DeletePool4Request) Descriptor() ([]byte, []int) {
	return file_dhcp_agent_proto_rawDescGZIP(), []int{10}
}

func (x *DeletePool4Request) GetSubnetId() uint64 {
	if x != nil {
		return x.SubnetId
	}
	return 0
}

func (x *DeletePool4Request) GetBeginAddress() string {
	if x != nil {
		return x.BeginAddress
	}
	return ""
}

func (x *DeletePool4Request) GetEndAddress() string {
	if x != nil {
		return x.EndAddress
	}
	return ""
}

type CreateReservedPool4Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubnetId     uint64 `protobuf:"varint,1,opt,name=subnet_id,json=subnetId,proto3" json:"subnet_id,omitempty"`
	BeginAddress string `protobuf:"bytes,2,opt,name=begin_address,json=beginAddress,proto3" json:"begin_address,omitempty"`
	EndAddress   string `protobuf:"bytes,3,opt,name=end_address,json=endAddress,proto3" json:"end_address,omitempty"`
}

func (x *CreateReservedPool4Request) Reset() {
	*x = CreateReservedPool4Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_agent_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateReservedPool4Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateReservedPool4Request) ProtoMessage() {}

func (x *CreateReservedPool4Request) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_agent_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateReservedPool4Request.ProtoReflect.Descriptor instead.
func (*CreateReservedPool4Request) Descriptor() ([]byte, []int) {
	return file_dhcp_agent_proto_rawDescGZIP(), []int{11}
}

func (x *CreateReservedPool4Request) GetSubnetId() uint64 {
	if x != nil {
		return x.SubnetId
	}
	return 0
}

func (x *CreateReservedPool4Request) GetBeginAddress() string {
	if x != nil {
		return x.BeginAddress
	}
	return ""
}

func (x *CreateReservedPool4Request) GetEndAddress() string {
	if x != nil {
		return x.EndAddress
	}
	return ""
}

type DeleteReservedPool4Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubnetId     uint64 `protobuf:"varint,1,opt,name=subnet_id,json=subnetId,proto3" json:"subnet_id,omitempty"`
	BeginAddress string `protobuf:"bytes,2,opt,name=begin_address,json=beginAddress,proto3" json:"begin_address,omitempty"`
	EndAddress   string `protobuf:"bytes,3,opt,name=end_address,json=endAddress,proto3" json:"end_address,omitempty"`
}

func (x *DeleteReservedPool4Request) Reset() {
	*x = DeleteReservedPool4Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_agent_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteReservedPool4Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteReservedPool4Request) ProtoMessage() {}

func (x *DeleteReservedPool4Request) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_agent_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteReservedPool4Request.ProtoReflect.Descriptor instead.
func (*DeleteReservedPool4Request) Descriptor() ([]byte, []int) {
	return file_dhcp_agent_proto_rawDescGZIP(), []int{12}
}

func (x *DeleteReservedPool4Request) GetSubnetId() uint64 {
	if x != nil {
		return x.SubnetId
	}
	return 0
}

func (x *DeleteReservedPool4Request) GetBeginAddress() string {
	if x != nil {
		return x.BeginAddress
	}
	return ""
}

func (x *DeleteReservedPool4Request) GetEndAddress() string {
	if x != nil {
		return x.EndAddress
	}
	return ""
}

type CreatePool6Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubnetId     uint64 `protobuf:"varint,1,opt,name=subnet_id,json=subnetId,proto3" json:"subnet_id,omitempty"`
	BeginAddress string `protobuf:"bytes,2,opt,name=begin_address,json=beginAddress,proto3" json:"begin_address,omitempty"`
	EndAddress   string `protobuf:"bytes,3,opt,name=end_address,json=endAddress,proto3" json:"end_address,omitempty"`
}

func (x *CreatePool6Request) Reset() {
	*x = CreatePool6Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_agent_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreatePool6Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePool6Request) ProtoMessage() {}

func (x *CreatePool6Request) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_agent_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePool6Request.ProtoReflect.Descriptor instead.
func (*CreatePool6Request) Descriptor() ([]byte, []int) {
	return file_dhcp_agent_proto_rawDescGZIP(), []int{13}
}

func (x *CreatePool6Request) GetSubnetId() uint64 {
	if x != nil {
		return x.SubnetId
	}
	return 0
}

func (x *CreatePool6Request) GetBeginAddress() string {
	if x != nil {
		return x.BeginAddress
	}
	return ""
}

func (x *CreatePool6Request) GetEndAddress() string {
	if x != nil {
		return x.EndAddress
	}
	return ""
}

type DeletePool6Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubnetId     uint64 `protobuf:"varint,1,opt,name=subnet_id,json=subnetId,proto3" json:"subnet_id,omitempty"`
	BeginAddress string `protobuf:"bytes,2,opt,name=begin_address,json=beginAddress,proto3" json:"begin_address,omitempty"`
	EndAddress   string `protobuf:"bytes,3,opt,name=end_address,json=endAddress,proto3" json:"end_address,omitempty"`
}

func (x *DeletePool6Request) Reset() {
	*x = DeletePool6Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_agent_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeletePool6Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeletePool6Request) ProtoMessage() {}

func (x *DeletePool6Request) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_agent_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeletePool6Request.ProtoReflect.Descriptor instead.
func (*DeletePool6Request) Descriptor() ([]byte, []int) {
	return file_dhcp_agent_proto_rawDescGZIP(), []int{14}
}

func (x *DeletePool6Request) GetSubnetId() uint64 {
	if x != nil {
		return x.SubnetId
	}
	return 0
}

func (x *DeletePool6Request) GetBeginAddress() string {
	if x != nil {
		return x.BeginAddress
	}
	return ""
}

func (x *DeletePool6Request) GetEndAddress() string {
	if x != nil {
		return x.EndAddress
	}
	return ""
}

type CreateReservedPool6Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubnetId     uint64 `protobuf:"varint,1,opt,name=subnet_id,json=subnetId,proto3" json:"subnet_id,omitempty"`
	BeginAddress string `protobuf:"bytes,2,opt,name=begin_address,json=beginAddress,proto3" json:"begin_address,omitempty"`
	EndAddress   string `protobuf:"bytes,3,opt,name=end_address,json=endAddress,proto3" json:"end_address,omitempty"`
}

func (x *CreateReservedPool6Request) Reset() {
	*x = CreateReservedPool6Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_agent_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateReservedPool6Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateReservedPool6Request) ProtoMessage() {}

func (x *CreateReservedPool6Request) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_agent_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateReservedPool6Request.ProtoReflect.Descriptor instead.
func (*CreateReservedPool6Request) Descriptor() ([]byte, []int) {
	return file_dhcp_agent_proto_rawDescGZIP(), []int{15}
}

func (x *CreateReservedPool6Request) GetSubnetId() uint64 {
	if x != nil {
		return x.SubnetId
	}
	return 0
}

func (x *CreateReservedPool6Request) GetBeginAddress() string {
	if x != nil {
		return x.BeginAddress
	}
	return ""
}

func (x *CreateReservedPool6Request) GetEndAddress() string {
	if x != nil {
		return x.EndAddress
	}
	return ""
}

type DeleteReservedPool6Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubnetId     uint64 `protobuf:"varint,1,opt,name=subnet_id,json=subnetId,proto3" json:"subnet_id,omitempty"`
	BeginAddress string `protobuf:"bytes,2,opt,name=begin_address,json=beginAddress,proto3" json:"begin_address,omitempty"`
	EndAddress   string `protobuf:"bytes,3,opt,name=end_address,json=endAddress,proto3" json:"end_address,omitempty"`
}

func (x *DeleteReservedPool6Request) Reset() {
	*x = DeleteReservedPool6Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_agent_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteReservedPool6Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteReservedPool6Request) ProtoMessage() {}

func (x *DeleteReservedPool6Request) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_agent_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteReservedPool6Request.ProtoReflect.Descriptor instead.
func (*DeleteReservedPool6Request) Descriptor() ([]byte, []int) {
	return file_dhcp_agent_proto_rawDescGZIP(), []int{16}
}

func (x *DeleteReservedPool6Request) GetSubnetId() uint64 {
	if x != nil {
		return x.SubnetId
	}
	return 0
}

func (x *DeleteReservedPool6Request) GetBeginAddress() string {
	if x != nil {
		return x.BeginAddress
	}
	return ""
}

func (x *DeleteReservedPool6Request) GetEndAddress() string {
	if x != nil {
		return x.EndAddress
	}
	return ""
}

type CreateReservation4Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubnetId  uint64 `protobuf:"varint,1,opt,name=subnet_id,json=subnetId,proto3" json:"subnet_id,omitempty"`
	HwAddress string `protobuf:"bytes,2,opt,name=hw_address,json=hwAddress,proto3" json:"hw_address,omitempty"`
	Hostname  string `protobuf:"bytes,3,opt,name=hostname,proto3" json:"hostname,omitempty"`
	IpAddress string `protobuf:"bytes,4,opt,name=ip_address,json=ipAddress,proto3" json:"ip_address,omitempty"`
}

func (x *CreateReservation4Request) Reset() {
	*x = CreateReservation4Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_agent_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateReservation4Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateReservation4Request) ProtoMessage() {}

func (x *CreateReservation4Request) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_agent_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateReservation4Request.ProtoReflect.Descriptor instead.
func (*CreateReservation4Request) Descriptor() ([]byte, []int) {
	return file_dhcp_agent_proto_rawDescGZIP(), []int{17}
}

func (x *CreateReservation4Request) GetSubnetId() uint64 {
	if x != nil {
		return x.SubnetId
	}
	return 0
}

func (x *CreateReservation4Request) GetHwAddress() string {
	if x != nil {
		return x.HwAddress
	}
	return ""
}

func (x *CreateReservation4Request) GetHostname() string {
	if x != nil {
		return x.Hostname
	}
	return ""
}

func (x *CreateReservation4Request) GetIpAddress() string {
	if x != nil {
		return x.IpAddress
	}
	return ""
}

type DeleteReservation4Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubnetId  uint64 `protobuf:"varint,1,opt,name=subnet_id,json=subnetId,proto3" json:"subnet_id,omitempty"`
	HwAddress string `protobuf:"bytes,2,opt,name=hw_address,json=hwAddress,proto3" json:"hw_address,omitempty"`
	Hostname  string `protobuf:"bytes,3,opt,name=hostname,proto3" json:"hostname,omitempty"`
	IpAddress string `protobuf:"bytes,4,opt,name=ip_address,json=ipAddress,proto3" json:"ip_address,omitempty"`
}

func (x *DeleteReservation4Request) Reset() {
	*x = DeleteReservation4Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_agent_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteReservation4Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteReservation4Request) ProtoMessage() {}

func (x *DeleteReservation4Request) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_agent_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteReservation4Request.ProtoReflect.Descriptor instead.
func (*DeleteReservation4Request) Descriptor() ([]byte, []int) {
	return file_dhcp_agent_proto_rawDescGZIP(), []int{18}
}

func (x *DeleteReservation4Request) GetSubnetId() uint64 {
	if x != nil {
		return x.SubnetId
	}
	return 0
}

func (x *DeleteReservation4Request) GetHwAddress() string {
	if x != nil {
		return x.HwAddress
	}
	return ""
}

func (x *DeleteReservation4Request) GetHostname() string {
	if x != nil {
		return x.Hostname
	}
	return ""
}

func (x *DeleteReservation4Request) GetIpAddress() string {
	if x != nil {
		return x.IpAddress
	}
	return ""
}

type CreateReservation6Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubnetId    uint64   `protobuf:"varint,1,opt,name=subnet_id,json=subnetId,proto3" json:"subnet_id,omitempty"`
	HwAddress   string   `protobuf:"bytes,2,opt,name=hw_address,json=hwAddress,proto3" json:"hw_address,omitempty"`
	Duid        string   `protobuf:"bytes,3,opt,name=duid,proto3" json:"duid,omitempty"`
	Hostname    string   `protobuf:"bytes,4,opt,name=hostname,proto3" json:"hostname,omitempty"`
	IpAddresses []string `protobuf:"bytes,5,rep,name=ip_addresses,json=ipAddresses,proto3" json:"ip_addresses,omitempty"`
	Prefixes    []string `protobuf:"bytes,6,rep,name=prefixes,proto3" json:"prefixes,omitempty"`
}

func (x *CreateReservation6Request) Reset() {
	*x = CreateReservation6Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_agent_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateReservation6Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateReservation6Request) ProtoMessage() {}

func (x *CreateReservation6Request) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_agent_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateReservation6Request.ProtoReflect.Descriptor instead.
func (*CreateReservation6Request) Descriptor() ([]byte, []int) {
	return file_dhcp_agent_proto_rawDescGZIP(), []int{19}
}

func (x *CreateReservation6Request) GetSubnetId() uint64 {
	if x != nil {
		return x.SubnetId
	}
	return 0
}

func (x *CreateReservation6Request) GetHwAddress() string {
	if x != nil {
		return x.HwAddress
	}
	return ""
}

func (x *CreateReservation6Request) GetDuid() string {
	if x != nil {
		return x.Duid
	}
	return ""
}

func (x *CreateReservation6Request) GetHostname() string {
	if x != nil {
		return x.Hostname
	}
	return ""
}

func (x *CreateReservation6Request) GetIpAddresses() []string {
	if x != nil {
		return x.IpAddresses
	}
	return nil
}

func (x *CreateReservation6Request) GetPrefixes() []string {
	if x != nil {
		return x.Prefixes
	}
	return nil
}

type DeleteReservation6Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubnetId    uint64   `protobuf:"varint,1,opt,name=subnet_id,json=subnetId,proto3" json:"subnet_id,omitempty"`
	HwAddress   string   `protobuf:"bytes,2,opt,name=hw_address,json=hwAddress,proto3" json:"hw_address,omitempty"`
	Duid        string   `protobuf:"bytes,3,opt,name=duid,proto3" json:"duid,omitempty"`
	Hostname    string   `protobuf:"bytes,4,opt,name=hostname,proto3" json:"hostname,omitempty"`
	IpAddresses []string `protobuf:"bytes,5,rep,name=ip_addresses,json=ipAddresses,proto3" json:"ip_addresses,omitempty"`
	Prefixes    []string `protobuf:"bytes,6,rep,name=prefixes,proto3" json:"prefixes,omitempty"`
}

func (x *DeleteReservation6Request) Reset() {
	*x = DeleteReservation6Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_agent_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteReservation6Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteReservation6Request) ProtoMessage() {}

func (x *DeleteReservation6Request) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_agent_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteReservation6Request.ProtoReflect.Descriptor instead.
func (*DeleteReservation6Request) Descriptor() ([]byte, []int) {
	return file_dhcp_agent_proto_rawDescGZIP(), []int{20}
}

func (x *DeleteReservation6Request) GetSubnetId() uint64 {
	if x != nil {
		return x.SubnetId
	}
	return 0
}

func (x *DeleteReservation6Request) GetHwAddress() string {
	if x != nil {
		return x.HwAddress
	}
	return ""
}

func (x *DeleteReservation6Request) GetDuid() string {
	if x != nil {
		return x.Duid
	}
	return ""
}

func (x *DeleteReservation6Request) GetHostname() string {
	if x != nil {
		return x.Hostname
	}
	return ""
}

func (x *DeleteReservation6Request) GetIpAddresses() []string {
	if x != nil {
		return x.IpAddresses
	}
	return nil
}

func (x *DeleteReservation6Request) GetPrefixes() []string {
	if x != nil {
		return x.Prefixes
	}
	return nil
}

type CreatePdPoolRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubnetId     uint64 `protobuf:"varint,1,opt,name=subnet_id,json=subnetId,proto3" json:"subnet_id,omitempty"`
	Prefix       string `protobuf:"bytes,2,opt,name=prefix,proto3" json:"prefix,omitempty"`
	PrefixLen    uint32 `protobuf:"varint,3,opt,name=prefix_len,json=prefixLen,proto3" json:"prefix_len,omitempty"`
	DelegatedLen uint32 `protobuf:"varint,4,opt,name=delegated_len,json=delegatedLen,proto3" json:"delegated_len,omitempty"`
}

func (x *CreatePdPoolRequest) Reset() {
	*x = CreatePdPoolRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_agent_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreatePdPoolRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePdPoolRequest) ProtoMessage() {}

func (x *CreatePdPoolRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_agent_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePdPoolRequest.ProtoReflect.Descriptor instead.
func (*CreatePdPoolRequest) Descriptor() ([]byte, []int) {
	return file_dhcp_agent_proto_rawDescGZIP(), []int{21}
}

func (x *CreatePdPoolRequest) GetSubnetId() uint64 {
	if x != nil {
		return x.SubnetId
	}
	return 0
}

func (x *CreatePdPoolRequest) GetPrefix() string {
	if x != nil {
		return x.Prefix
	}
	return ""
}

func (x *CreatePdPoolRequest) GetPrefixLen() uint32 {
	if x != nil {
		return x.PrefixLen
	}
	return 0
}

func (x *CreatePdPoolRequest) GetDelegatedLen() uint32 {
	if x != nil {
		return x.DelegatedLen
	}
	return 0
}

type DeletePdPoolRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubnetId     uint64 `protobuf:"varint,1,opt,name=subnet_id,json=subnetId,proto3" json:"subnet_id,omitempty"`
	Prefix       string `protobuf:"bytes,2,opt,name=prefix,proto3" json:"prefix,omitempty"`
	PrefixLen    uint32 `protobuf:"varint,3,opt,name=prefix_len,json=prefixLen,proto3" json:"prefix_len,omitempty"`
	DelegatedLen uint32 `protobuf:"varint,4,opt,name=delegated_len,json=delegatedLen,proto3" json:"delegated_len,omitempty"`
}

func (x *DeletePdPoolRequest) Reset() {
	*x = DeletePdPoolRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_agent_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeletePdPoolRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeletePdPoolRequest) ProtoMessage() {}

func (x *DeletePdPoolRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_agent_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeletePdPoolRequest.ProtoReflect.Descriptor instead.
func (*DeletePdPoolRequest) Descriptor() ([]byte, []int) {
	return file_dhcp_agent_proto_rawDescGZIP(), []int{22}
}

func (x *DeletePdPoolRequest) GetSubnetId() uint64 {
	if x != nil {
		return x.SubnetId
	}
	return 0
}

func (x *DeletePdPoolRequest) GetPrefix() string {
	if x != nil {
		return x.Prefix
	}
	return ""
}

func (x *DeletePdPoolRequest) GetPrefixLen() uint32 {
	if x != nil {
		return x.PrefixLen
	}
	return 0
}

func (x *DeletePdPoolRequest) GetDelegatedLen() uint32 {
	if x != nil {
		return x.DelegatedLen
	}
	return 0
}

type CreateReservedPdPoolRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubnetId     uint64 `protobuf:"varint,1,opt,name=subnet_id,json=subnetId,proto3" json:"subnet_id,omitempty"`
	Prefix       string `protobuf:"bytes,2,opt,name=prefix,proto3" json:"prefix,omitempty"`
	PrefixLen    uint32 `protobuf:"varint,3,opt,name=prefix_len,json=prefixLen,proto3" json:"prefix_len,omitempty"`
	DelegatedLen uint32 `protobuf:"varint,4,opt,name=delegated_len,json=delegatedLen,proto3" json:"delegated_len,omitempty"`
}

func (x *CreateReservedPdPoolRequest) Reset() {
	*x = CreateReservedPdPoolRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_agent_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateReservedPdPoolRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateReservedPdPoolRequest) ProtoMessage() {}

func (x *CreateReservedPdPoolRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_agent_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateReservedPdPoolRequest.ProtoReflect.Descriptor instead.
func (*CreateReservedPdPoolRequest) Descriptor() ([]byte, []int) {
	return file_dhcp_agent_proto_rawDescGZIP(), []int{23}
}

func (x *CreateReservedPdPoolRequest) GetSubnetId() uint64 {
	if x != nil {
		return x.SubnetId
	}
	return 0
}

func (x *CreateReservedPdPoolRequest) GetPrefix() string {
	if x != nil {
		return x.Prefix
	}
	return ""
}

func (x *CreateReservedPdPoolRequest) GetPrefixLen() uint32 {
	if x != nil {
		return x.PrefixLen
	}
	return 0
}

func (x *CreateReservedPdPoolRequest) GetDelegatedLen() uint32 {
	if x != nil {
		return x.DelegatedLen
	}
	return 0
}

type DeleteReservedPdPoolRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubnetId     uint64 `protobuf:"varint,1,opt,name=subnet_id,json=subnetId,proto3" json:"subnet_id,omitempty"`
	Prefix       string `protobuf:"bytes,2,opt,name=prefix,proto3" json:"prefix,omitempty"`
	PrefixLen    uint32 `protobuf:"varint,3,opt,name=prefix_len,json=prefixLen,proto3" json:"prefix_len,omitempty"`
	DelegatedLen uint32 `protobuf:"varint,4,opt,name=delegated_len,json=delegatedLen,proto3" json:"delegated_len,omitempty"`
}

func (x *DeleteReservedPdPoolRequest) Reset() {
	*x = DeleteReservedPdPoolRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_agent_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteReservedPdPoolRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteReservedPdPoolRequest) ProtoMessage() {}

func (x *DeleteReservedPdPoolRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_agent_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteReservedPdPoolRequest.ProtoReflect.Descriptor instead.
func (*DeleteReservedPdPoolRequest) Descriptor() ([]byte, []int) {
	return file_dhcp_agent_proto_rawDescGZIP(), []int{24}
}

func (x *DeleteReservedPdPoolRequest) GetSubnetId() uint64 {
	if x != nil {
		return x.SubnetId
	}
	return 0
}

func (x *DeleteReservedPdPoolRequest) GetPrefix() string {
	if x != nil {
		return x.Prefix
	}
	return ""
}

func (x *DeleteReservedPdPoolRequest) GetPrefixLen() uint32 {
	if x != nil {
		return x.PrefixLen
	}
	return 0
}

func (x *DeleteReservedPdPoolRequest) GetDelegatedLen() uint32 {
	if x != nil {
		return x.DelegatedLen
	}
	return 0
}

type CreateClientClasses4Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientClasses []*CreateClientClass4Request `protobuf:"bytes,1,rep,name=client_classes,json=clientClasses,proto3" json:"client_classes,omitempty"`
}

func (x *CreateClientClasses4Request) Reset() {
	*x = CreateClientClasses4Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_agent_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateClientClasses4Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateClientClasses4Request) ProtoMessage() {}

func (x *CreateClientClasses4Request) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_agent_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateClientClasses4Request.ProtoReflect.Descriptor instead.
func (*CreateClientClasses4Request) Descriptor() ([]byte, []int) {
	return file_dhcp_agent_proto_rawDescGZIP(), []int{25}
}

func (x *CreateClientClasses4Request) GetClientClasses() []*CreateClientClass4Request {
	if x != nil {
		return x.ClientClasses
	}
	return nil
}

type CreateClientClass4Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name   string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Code   uint32 `protobuf:"varint,2,opt,name=code,proto3" json:"code,omitempty"`
	Regexp string `protobuf:"bytes,3,opt,name=regexp,proto3" json:"regexp,omitempty"`
}

func (x *CreateClientClass4Request) Reset() {
	*x = CreateClientClass4Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_agent_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateClientClass4Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateClientClass4Request) ProtoMessage() {}

func (x *CreateClientClass4Request) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_agent_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateClientClass4Request.ProtoReflect.Descriptor instead.
func (*CreateClientClass4Request) Descriptor() ([]byte, []int) {
	return file_dhcp_agent_proto_rawDescGZIP(), []int{26}
}

func (x *CreateClientClass4Request) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateClientClass4Request) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *CreateClientClass4Request) GetRegexp() string {
	if x != nil {
		return x.Regexp
	}
	return ""
}

type DeleteClientClasses4Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Names []string `protobuf:"bytes,1,rep,name=names,proto3" json:"names,omitempty"`
}

func (x *DeleteClientClasses4Request) Reset() {
	*x = DeleteClientClasses4Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_agent_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteClientClasses4Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteClientClasses4Request) ProtoMessage() {}

func (x *DeleteClientClasses4Request) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_agent_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteClientClasses4Request.ProtoReflect.Descriptor instead.
func (*DeleteClientClasses4Request) Descriptor() ([]byte, []int) {
	return file_dhcp_agent_proto_rawDescGZIP(), []int{27}
}

func (x *DeleteClientClasses4Request) GetNames() []string {
	if x != nil {
		return x.Names
	}
	return nil
}

type DeleteClientClass4Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *DeleteClientClass4Request) Reset() {
	*x = DeleteClientClass4Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_agent_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteClientClass4Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteClientClass4Request) ProtoMessage() {}

func (x *DeleteClientClass4Request) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_agent_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteClientClass4Request.ProtoReflect.Descriptor instead.
func (*DeleteClientClass4Request) Descriptor() ([]byte, []int) {
	return file_dhcp_agent_proto_rawDescGZIP(), []int{28}
}

func (x *DeleteClientClass4Request) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type UpdateClientClass4Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name   string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Code   uint32 `protobuf:"varint,2,opt,name=code,proto3" json:"code,omitempty"`
	Regexp string `protobuf:"bytes,3,opt,name=regexp,proto3" json:"regexp,omitempty"`
}

func (x *UpdateClientClass4Request) Reset() {
	*x = UpdateClientClass4Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_agent_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateClientClass4Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateClientClass4Request) ProtoMessage() {}

func (x *UpdateClientClass4Request) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_agent_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateClientClass4Request.ProtoReflect.Descriptor instead.
func (*UpdateClientClass4Request) Descriptor() ([]byte, []int) {
	return file_dhcp_agent_proto_rawDescGZIP(), []int{29}
}

func (x *UpdateClientClass4Request) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateClientClass4Request) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *UpdateClientClass4Request) GetRegexp() string {
	if x != nil {
		return x.Regexp
	}
	return ""
}

type CreateClientClasses6Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientClasses []*CreateClientClass6Request `protobuf:"bytes,1,rep,name=client_classes,json=clientClasses,proto3" json:"client_classes,omitempty"`
}

func (x *CreateClientClasses6Request) Reset() {
	*x = CreateClientClasses6Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_agent_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateClientClasses6Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateClientClasses6Request) ProtoMessage() {}

func (x *CreateClientClasses6Request) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_agent_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateClientClasses6Request.ProtoReflect.Descriptor instead.
func (*CreateClientClasses6Request) Descriptor() ([]byte, []int) {
	return file_dhcp_agent_proto_rawDescGZIP(), []int{30}
}

func (x *CreateClientClasses6Request) GetClientClasses() []*CreateClientClass6Request {
	if x != nil {
		return x.ClientClasses
	}
	return nil
}

type CreateClientClass6Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name   string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Code   uint32 `protobuf:"varint,2,opt,name=code,proto3" json:"code,omitempty"`
	Regexp string `protobuf:"bytes,3,opt,name=regexp,proto3" json:"regexp,omitempty"`
}

func (x *CreateClientClass6Request) Reset() {
	*x = CreateClientClass6Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_agent_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateClientClass6Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateClientClass6Request) ProtoMessage() {}

func (x *CreateClientClass6Request) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_agent_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateClientClass6Request.ProtoReflect.Descriptor instead.
func (*CreateClientClass6Request) Descriptor() ([]byte, []int) {
	return file_dhcp_agent_proto_rawDescGZIP(), []int{31}
}

func (x *CreateClientClass6Request) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateClientClass6Request) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *CreateClientClass6Request) GetRegexp() string {
	if x != nil {
		return x.Regexp
	}
	return ""
}

type DeleteClientClasses6Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Names []string `protobuf:"bytes,1,rep,name=names,proto3" json:"names,omitempty"`
}

func (x *DeleteClientClasses6Request) Reset() {
	*x = DeleteClientClasses6Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_agent_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteClientClasses6Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteClientClasses6Request) ProtoMessage() {}

func (x *DeleteClientClasses6Request) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_agent_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteClientClasses6Request.ProtoReflect.Descriptor instead.
func (*DeleteClientClasses6Request) Descriptor() ([]byte, []int) {
	return file_dhcp_agent_proto_rawDescGZIP(), []int{32}
}

func (x *DeleteClientClasses6Request) GetNames() []string {
	if x != nil {
		return x.Names
	}
	return nil
}

type DeleteClientClass6Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *DeleteClientClass6Request) Reset() {
	*x = DeleteClientClass6Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_agent_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteClientClass6Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteClientClass6Request) ProtoMessage() {}

func (x *DeleteClientClass6Request) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_agent_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteClientClass6Request.ProtoReflect.Descriptor instead.
func (*DeleteClientClass6Request) Descriptor() ([]byte, []int) {
	return file_dhcp_agent_proto_rawDescGZIP(), []int{33}
}

func (x *DeleteClientClass6Request) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type UpdateClientClass6Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name   string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Code   uint32 `protobuf:"varint,2,opt,name=code,proto3" json:"code,omitempty"`
	Regexp string `protobuf:"bytes,3,opt,name=regexp,proto3" json:"regexp,omitempty"`
}

func (x *UpdateClientClass6Request) Reset() {
	*x = UpdateClientClass6Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_agent_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateClientClass6Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateClientClass6Request) ProtoMessage() {}

func (x *UpdateClientClass6Request) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_agent_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateClientClass6Request.ProtoReflect.Descriptor instead.
func (*UpdateClientClass6Request) Descriptor() ([]byte, []int) {
	return file_dhcp_agent_proto_rawDescGZIP(), []int{34}
}

func (x *UpdateClientClass6Request) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateClientClass6Request) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *UpdateClientClass6Request) GetRegexp() string {
	if x != nil {
		return x.Regexp
	}
	return ""
}

type CreateFingerprintsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fingerprints []*CreateFingerprintRequest `protobuf:"bytes,1,rep,name=fingerprints,proto3" json:"fingerprints,omitempty"`
}

func (x *CreateFingerprintsRequest) Reset() {
	*x = CreateFingerprintsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_agent_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateFingerprintsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateFingerprintsRequest) ProtoMessage() {}

func (x *CreateFingerprintsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_agent_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateFingerprintsRequest.ProtoReflect.Descriptor instead.
func (*CreateFingerprintsRequest) Descriptor() ([]byte, []int) {
	return file_dhcp_agent_proto_rawDescGZIP(), []int{35}
}

func (x *CreateFingerprintsRequest) GetFingerprints() []*CreateFingerprintRequest {
	if x != nil {
		return x.Fingerprints
	}
	return nil
}

type CreateFingerprintRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fingerprint     string `protobuf:"bytes,1,opt,name=fingerprint,proto3" json:"fingerprint,omitempty"`
	VendorId        string `protobuf:"bytes,2,opt,name=vendor_id,json=vendorId,proto3" json:"vendor_id,omitempty"`
	OperatingSystem string `protobuf:"bytes,3,opt,name=operating_system,json=operatingSystem,proto3" json:"operating_system,omitempty"`
	ClientType      string `protobuf:"bytes,4,opt,name=client_type,json=clientType,proto3" json:"client_type,omitempty"`
	MatchPattern    string `protobuf:"bytes,5,opt,name=match_pattern,json=matchPattern,proto3" json:"match_pattern,omitempty"`
}

func (x *CreateFingerprintRequest) Reset() {
	*x = CreateFingerprintRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_agent_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateFingerprintRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateFingerprintRequest) ProtoMessage() {}

func (x *CreateFingerprintRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_agent_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateFingerprintRequest.ProtoReflect.Descriptor instead.
func (*CreateFingerprintRequest) Descriptor() ([]byte, []int) {
	return file_dhcp_agent_proto_rawDescGZIP(), []int{36}
}

func (x *CreateFingerprintRequest) GetFingerprint() string {
	if x != nil {
		return x.Fingerprint
	}
	return ""
}

func (x *CreateFingerprintRequest) GetVendorId() string {
	if x != nil {
		return x.VendorId
	}
	return ""
}

func (x *CreateFingerprintRequest) GetOperatingSystem() string {
	if x != nil {
		return x.OperatingSystem
	}
	return ""
}

func (x *CreateFingerprintRequest) GetClientType() string {
	if x != nil {
		return x.ClientType
	}
	return ""
}

func (x *CreateFingerprintRequest) GetMatchPattern() string {
	if x != nil {
		return x.MatchPattern
	}
	return ""
}

type DeleteFingerprintsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fingerprints []*DeleteFingerprintRequest `protobuf:"bytes,1,rep,name=fingerprints,proto3" json:"fingerprints,omitempty"`
}

func (x *DeleteFingerprintsRequest) Reset() {
	*x = DeleteFingerprintsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_agent_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteFingerprintsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteFingerprintsRequest) ProtoMessage() {}

func (x *DeleteFingerprintsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_agent_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteFingerprintsRequest.ProtoReflect.Descriptor instead.
func (*DeleteFingerprintsRequest) Descriptor() ([]byte, []int) {
	return file_dhcp_agent_proto_rawDescGZIP(), []int{37}
}

func (x *DeleteFingerprintsRequest) GetFingerprints() []*DeleteFingerprintRequest {
	if x != nil {
		return x.Fingerprints
	}
	return nil
}

type DeleteFingerprintRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fingerprint     string `protobuf:"bytes,1,opt,name=fingerprint,proto3" json:"fingerprint,omitempty"`
	VendorId        string `protobuf:"bytes,2,opt,name=vendor_id,json=vendorId,proto3" json:"vendor_id,omitempty"`
	OperatingSystem string `protobuf:"bytes,3,opt,name=operating_system,json=operatingSystem,proto3" json:"operating_system,omitempty"`
	ClientType      string `protobuf:"bytes,4,opt,name=client_type,json=clientType,proto3" json:"client_type,omitempty"`
}

func (x *DeleteFingerprintRequest) Reset() {
	*x = DeleteFingerprintRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_agent_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteFingerprintRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteFingerprintRequest) ProtoMessage() {}

func (x *DeleteFingerprintRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_agent_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteFingerprintRequest.ProtoReflect.Descriptor instead.
func (*DeleteFingerprintRequest) Descriptor() ([]byte, []int) {
	return file_dhcp_agent_proto_rawDescGZIP(), []int{38}
}

func (x *DeleteFingerprintRequest) GetFingerprint() string {
	if x != nil {
		return x.Fingerprint
	}
	return ""
}

func (x *DeleteFingerprintRequest) GetVendorId() string {
	if x != nil {
		return x.VendorId
	}
	return ""
}

func (x *DeleteFingerprintRequest) GetOperatingSystem() string {
	if x != nil {
		return x.OperatingSystem
	}
	return ""
}

func (x *DeleteFingerprintRequest) GetClientType() string {
	if x != nil {
		return x.ClientType
	}
	return ""
}

type UpdateFingerprintRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Old *DeleteFingerprintRequest `protobuf:"bytes,1,opt,name=old,proto3" json:"old,omitempty"`
	New *CreateFingerprintRequest `protobuf:"bytes,2,opt,name=new,proto3" json:"new,omitempty"`
}

func (x *UpdateFingerprintRequest) Reset() {
	*x = UpdateFingerprintRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_agent_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateFingerprintRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateFingerprintRequest) ProtoMessage() {}

func (x *UpdateFingerprintRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_agent_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateFingerprintRequest.ProtoReflect.Descriptor instead.
func (*UpdateFingerprintRequest) Descriptor() ([]byte, []int) {
	return file_dhcp_agent_proto_rawDescGZIP(), []int{39}
}

func (x *UpdateFingerprintRequest) GetOld() *DeleteFingerprintRequest {
	if x != nil {
		return x.Old
	}
	return nil
}

func (x *UpdateFingerprintRequest) GetNew() *CreateFingerprintRequest {
	if x != nil {
		return x.New
	}
	return nil
}

type CreateOuisRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ouis []*CreateOuiRequest `protobuf:"bytes,1,rep,name=ouis,proto3" json:"ouis,omitempty"`
}

func (x *CreateOuisRequest) Reset() {
	*x = CreateOuisRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_agent_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateOuisRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateOuisRequest) ProtoMessage() {}

func (x *CreateOuisRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_agent_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateOuisRequest.ProtoReflect.Descriptor instead.
func (*CreateOuisRequest) Descriptor() ([]byte, []int) {
	return file_dhcp_agent_proto_rawDescGZIP(), []int{40}
}

func (x *CreateOuisRequest) GetOuis() []*CreateOuiRequest {
	if x != nil {
		return x.Ouis
	}
	return nil
}

type CreateOuiRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Oui          string `protobuf:"bytes,1,opt,name=oui,proto3" json:"oui,omitempty"`
	Organization string `protobuf:"bytes,2,opt,name=organization,proto3" json:"organization,omitempty"`
}

func (x *CreateOuiRequest) Reset() {
	*x = CreateOuiRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_agent_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateOuiRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateOuiRequest) ProtoMessage() {}

func (x *CreateOuiRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_agent_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateOuiRequest.ProtoReflect.Descriptor instead.
func (*CreateOuiRequest) Descriptor() ([]byte, []int) {
	return file_dhcp_agent_proto_rawDescGZIP(), []int{41}
}

func (x *CreateOuiRequest) GetOui() string {
	if x != nil {
		return x.Oui
	}
	return ""
}

func (x *CreateOuiRequest) GetOrganization() string {
	if x != nil {
		return x.Organization
	}
	return ""
}

type DeleteOuisRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ouis []string `protobuf:"bytes,1,rep,name=ouis,proto3" json:"ouis,omitempty"`
}

func (x *DeleteOuisRequest) Reset() {
	*x = DeleteOuisRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_agent_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteOuisRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteOuisRequest) ProtoMessage() {}

func (x *DeleteOuisRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_agent_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteOuisRequest.ProtoReflect.Descriptor instead.
func (*DeleteOuisRequest) Descriptor() ([]byte, []int) {
	return file_dhcp_agent_proto_rawDescGZIP(), []int{42}
}

func (x *DeleteOuisRequest) GetOuis() []string {
	if x != nil {
		return x.Ouis
	}
	return nil
}

type DeleteOuiRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Oui string `protobuf:"bytes,1,opt,name=oui,proto3" json:"oui,omitempty"`
}

func (x *DeleteOuiRequest) Reset() {
	*x = DeleteOuiRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_agent_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteOuiRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteOuiRequest) ProtoMessage() {}

func (x *DeleteOuiRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_agent_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteOuiRequest.ProtoReflect.Descriptor instead.
func (*DeleteOuiRequest) Descriptor() ([]byte, []int) {
	return file_dhcp_agent_proto_rawDescGZIP(), []int{43}
}

func (x *DeleteOuiRequest) GetOui() string {
	if x != nil {
		return x.Oui
	}
	return ""
}

type UpdateOuiRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Oui          string `protobuf:"bytes,1,opt,name=oui,proto3" json:"oui,omitempty"`
	Organization string `protobuf:"bytes,2,opt,name=organization,proto3" json:"organization,omitempty"`
}

func (x *UpdateOuiRequest) Reset() {
	*x = UpdateOuiRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_agent_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateOuiRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateOuiRequest) ProtoMessage() {}

func (x *UpdateOuiRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_agent_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateOuiRequest.ProtoReflect.Descriptor instead.
func (*UpdateOuiRequest) Descriptor() ([]byte, []int) {
	return file_dhcp_agent_proto_rawDescGZIP(), []int{44}
}

func (x *UpdateOuiRequest) GetOui() string {
	if x != nil {
		return x.Oui
	}
	return ""
}

func (x *UpdateOuiRequest) GetOrganization() string {
	if x != nil {
		return x.Organization
	}
	return ""
}

type UpdateAdmitRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enabled bool `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
}

func (x *UpdateAdmitRequest) Reset() {
	*x = UpdateAdmitRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_agent_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateAdmitRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateAdmitRequest) ProtoMessage() {}

func (x *UpdateAdmitRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_agent_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateAdmitRequest.ProtoReflect.Descriptor instead.
func (*UpdateAdmitRequest) Descriptor() ([]byte, []int) {
	return file_dhcp_agent_proto_rawDescGZIP(), []int{45}
}

func (x *UpdateAdmitRequest) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

type CreateAdmitMacsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HwAddresses []string `protobuf:"bytes,1,rep,name=hw_addresses,json=hwAddresses,proto3" json:"hw_addresses,omitempty"`
}

func (x *CreateAdmitMacsRequest) Reset() {
	*x = CreateAdmitMacsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_agent_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateAdmitMacsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateAdmitMacsRequest) ProtoMessage() {}

func (x *CreateAdmitMacsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_agent_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateAdmitMacsRequest.ProtoReflect.Descriptor instead.
func (*CreateAdmitMacsRequest) Descriptor() ([]byte, []int) {
	return file_dhcp_agent_proto_rawDescGZIP(), []int{46}
}

func (x *CreateAdmitMacsRequest) GetHwAddresses() []string {
	if x != nil {
		return x.HwAddresses
	}
	return nil
}

type CreateAdmitMacRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HwAddress string `protobuf:"bytes,1,opt,name=hw_address,json=hwAddress,proto3" json:"hw_address,omitempty"`
}

func (x *CreateAdmitMacRequest) Reset() {
	*x = CreateAdmitMacRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_agent_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateAdmitMacRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateAdmitMacRequest) ProtoMessage() {}

func (x *CreateAdmitMacRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_agent_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateAdmitMacRequest.ProtoReflect.Descriptor instead.
func (*CreateAdmitMacRequest) Descriptor() ([]byte, []int) {
	return file_dhcp_agent_proto_rawDescGZIP(), []int{47}
}

func (x *CreateAdmitMacRequest) GetHwAddress() string {
	if x != nil {
		return x.HwAddress
	}
	return ""
}

type DeleteAdmitMacsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HwAddresses []string `protobuf:"bytes,1,rep,name=hw_addresses,json=hwAddresses,proto3" json:"hw_addresses,omitempty"`
}

func (x *DeleteAdmitMacsRequest) Reset() {
	*x = DeleteAdmitMacsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_agent_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteAdmitMacsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteAdmitMacsRequest) ProtoMessage() {}

func (x *DeleteAdmitMacsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_agent_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteAdmitMacsRequest.ProtoReflect.Descriptor instead.
func (*DeleteAdmitMacsRequest) Descriptor() ([]byte, []int) {
	return file_dhcp_agent_proto_rawDescGZIP(), []int{48}
}

func (x *DeleteAdmitMacsRequest) GetHwAddresses() []string {
	if x != nil {
		return x.HwAddresses
	}
	return nil
}

type DeleteAdmitMacRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HwAddress string `protobuf:"bytes,1,opt,name=hw_address,json=hwAddress,proto3" json:"hw_address,omitempty"`
}

func (x *DeleteAdmitMacRequest) Reset() {
	*x = DeleteAdmitMacRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_agent_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteAdmitMacRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteAdmitMacRequest) ProtoMessage() {}

func (x *DeleteAdmitMacRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_agent_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteAdmitMacRequest.ProtoReflect.Descriptor instead.
func (*DeleteAdmitMacRequest) Descriptor() ([]byte, []int) {
	return file_dhcp_agent_proto_rawDescGZIP(), []int{49}
}

func (x *DeleteAdmitMacRequest) GetHwAddress() string {
	if x != nil {
		return x.HwAddress
	}
	return ""
}

type CreateAdmitDuidsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Duids []string `protobuf:"bytes,1,rep,name=duids,proto3" json:"duids,omitempty"`
}

func (x *CreateAdmitDuidsRequest) Reset() {
	*x = CreateAdmitDuidsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_agent_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateAdmitDuidsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateAdmitDuidsRequest) ProtoMessage() {}

func (x *CreateAdmitDuidsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_agent_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateAdmitDuidsRequest.ProtoReflect.Descriptor instead.
func (*CreateAdmitDuidsRequest) Descriptor() ([]byte, []int) {
	return file_dhcp_agent_proto_rawDescGZIP(), []int{50}
}

func (x *CreateAdmitDuidsRequest) GetDuids() []string {
	if x != nil {
		return x.Duids
	}
	return nil
}

type CreateAdmitDuidRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Duid string `protobuf:"bytes,1,opt,name=duid,proto3" json:"duid,omitempty"`
}

func (x *CreateAdmitDuidRequest) Reset() {
	*x = CreateAdmitDuidRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_agent_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateAdmitDuidRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateAdmitDuidRequest) ProtoMessage() {}

func (x *CreateAdmitDuidRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_agent_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateAdmitDuidRequest.ProtoReflect.Descriptor instead.
func (*CreateAdmitDuidRequest) Descriptor() ([]byte, []int) {
	return file_dhcp_agent_proto_rawDescGZIP(), []int{51}
}

func (x *CreateAdmitDuidRequest) GetDuid() string {
	if x != nil {
		return x.Duid
	}
	return ""
}

type DeleteAdmitDuidsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Duids []string `protobuf:"bytes,1,rep,name=duids,proto3" json:"duids,omitempty"`
}

func (x *DeleteAdmitDuidsRequest) Reset() {
	*x = DeleteAdmitDuidsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_agent_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteAdmitDuidsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteAdmitDuidsRequest) ProtoMessage() {}

func (x *DeleteAdmitDuidsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_agent_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteAdmitDuidsRequest.ProtoReflect.Descriptor instead.
func (*DeleteAdmitDuidsRequest) Descriptor() ([]byte, []int) {
	return file_dhcp_agent_proto_rawDescGZIP(), []int{52}
}

func (x *DeleteAdmitDuidsRequest) GetDuids() []string {
	if x != nil {
		return x.Duids
	}
	return nil
}

type DeleteAdmitDuidRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Duid string `protobuf:"bytes,1,opt,name=duid,proto3" json:"duid,omitempty"`
}

func (x *DeleteAdmitDuidRequest) Reset() {
	*x = DeleteAdmitDuidRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_agent_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteAdmitDuidRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteAdmitDuidRequest) ProtoMessage() {}

func (x *DeleteAdmitDuidRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_agent_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteAdmitDuidRequest.ProtoReflect.Descriptor instead.
func (*DeleteAdmitDuidRequest) Descriptor() ([]byte, []int) {
	return file_dhcp_agent_proto_rawDescGZIP(), []int{53}
}

func (x *DeleteAdmitDuidRequest) GetDuid() string {
	if x != nil {
		return x.Duid
	}
	return ""
}

type CreateAdmitFingerprintsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientTypes []string `protobuf:"bytes,1,rep,name=client_types,json=clientTypes,proto3" json:"client_types,omitempty"`
}

func (x *CreateAdmitFingerprintsRequest) Reset() {
	*x = CreateAdmitFingerprintsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_agent_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateAdmitFingerprintsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateAdmitFingerprintsRequest) ProtoMessage() {}

func (x *CreateAdmitFingerprintsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_agent_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateAdmitFingerprintsRequest.ProtoReflect.Descriptor instead.
func (*CreateAdmitFingerprintsRequest) Descriptor() ([]byte, []int) {
	return file_dhcp_agent_proto_rawDescGZIP(), []int{54}
}

func (x *CreateAdmitFingerprintsRequest) GetClientTypes() []string {
	if x != nil {
		return x.ClientTypes
	}
	return nil
}

type CreateAdmitFingerprintRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientType string `protobuf:"bytes,1,opt,name=client_type,json=clientType,proto3" json:"client_type,omitempty"`
}

func (x *CreateAdmitFingerprintRequest) Reset() {
	*x = CreateAdmitFingerprintRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_agent_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateAdmitFingerprintRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateAdmitFingerprintRequest) ProtoMessage() {}

func (x *CreateAdmitFingerprintRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_agent_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateAdmitFingerprintRequest.ProtoReflect.Descriptor instead.
func (*CreateAdmitFingerprintRequest) Descriptor() ([]byte, []int) {
	return file_dhcp_agent_proto_rawDescGZIP(), []int{55}
}

func (x *CreateAdmitFingerprintRequest) GetClientType() string {
	if x != nil {
		return x.ClientType
	}
	return ""
}

type DeleteAdmitFingerprintsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientTypes []string `protobuf:"bytes,1,rep,name=client_types,json=clientTypes,proto3" json:"client_types,omitempty"`
}

func (x *DeleteAdmitFingerprintsRequest) Reset() {
	*x = DeleteAdmitFingerprintsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_agent_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteAdmitFingerprintsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteAdmitFingerprintsRequest) ProtoMessage() {}

func (x *DeleteAdmitFingerprintsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_agent_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteAdmitFingerprintsRequest.ProtoReflect.Descriptor instead.
func (*DeleteAdmitFingerprintsRequest) Descriptor() ([]byte, []int) {
	return file_dhcp_agent_proto_rawDescGZIP(), []int{56}
}

func (x *DeleteAdmitFingerprintsRequest) GetClientTypes() []string {
	if x != nil {
		return x.ClientTypes
	}
	return nil
}

type DeleteAdmitFingerprintRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientType string `protobuf:"bytes,1,opt,name=client_type,json=clientType,proto3" json:"client_type,omitempty"`
}

func (x *DeleteAdmitFingerprintRequest) Reset() {
	*x = DeleteAdmitFingerprintRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_agent_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteAdmitFingerprintRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteAdmitFingerprintRequest) ProtoMessage() {}

func (x *DeleteAdmitFingerprintRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_agent_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteAdmitFingerprintRequest.ProtoReflect.Descriptor instead.
func (*DeleteAdmitFingerprintRequest) Descriptor() ([]byte, []int) {
	return file_dhcp_agent_proto_rawDescGZIP(), []int{57}
}

func (x *DeleteAdmitFingerprintRequest) GetClientType() string {
	if x != nil {
		return x.ClientType
	}
	return ""
}

type UpdateRateLimitRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enabled bool `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
}

func (x *UpdateRateLimitRequest) Reset() {
	*x = UpdateRateLimitRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_agent_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateRateLimitRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateRateLimitRequest) ProtoMessage() {}

func (x *UpdateRateLimitRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_agent_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateRateLimitRequest.ProtoReflect.Descriptor instead.
func (*UpdateRateLimitRequest) Descriptor() ([]byte, []int) {
	return file_dhcp_agent_proto_rawDescGZIP(), []int{58}
}

func (x *UpdateRateLimitRequest) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

type CreateRateLimitMacsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Macs []*CreateRateLimitMacRequest `protobuf:"bytes,1,rep,name=macs,proto3" json:"macs,omitempty"`
}

func (x *CreateRateLimitMacsRequest) Reset() {
	*x = CreateRateLimitMacsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_agent_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateRateLimitMacsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateRateLimitMacsRequest) ProtoMessage() {}

func (x *CreateRateLimitMacsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_agent_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateRateLimitMacsRequest.ProtoReflect.Descriptor instead.
func (*CreateRateLimitMacsRequest) Descriptor() ([]byte, []int) {
	return file_dhcp_agent_proto_rawDescGZIP(), []int{59}
}

func (x *CreateRateLimitMacsRequest) GetMacs() []*CreateRateLimitMacRequest {
	if x != nil {
		return x.Macs
	}
	return nil
}

type CreateRateLimitMacRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HwAddress string `protobuf:"bytes,1,opt,name=hw_address,json=hwAddress,proto3" json:"hw_address,omitempty"`
	Limit     uint32 `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *CreateRateLimitMacRequest) Reset() {
	*x = CreateRateLimitMacRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_agent_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateRateLimitMacRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateRateLimitMacRequest) ProtoMessage() {}

func (x *CreateRateLimitMacRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_agent_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateRateLimitMacRequest.ProtoReflect.Descriptor instead.
func (*CreateRateLimitMacRequest) Descriptor() ([]byte, []int) {
	return file_dhcp_agent_proto_rawDescGZIP(), []int{60}
}

func (x *CreateRateLimitMacRequest) GetHwAddress() string {
	if x != nil {
		return x.HwAddress
	}
	return ""
}

func (x *CreateRateLimitMacRequest) GetLimit() uint32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type DeleteRateLimitMacsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HwAddresses []string `protobuf:"bytes,1,rep,name=hw_addresses,json=hwAddresses,proto3" json:"hw_addresses,omitempty"`
}

func (x *DeleteRateLimitMacsRequest) Reset() {
	*x = DeleteRateLimitMacsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_agent_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteRateLimitMacsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteRateLimitMacsRequest) ProtoMessage() {}

func (x *DeleteRateLimitMacsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_agent_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteRateLimitMacsRequest.ProtoReflect.Descriptor instead.
func (*DeleteRateLimitMacsRequest) Descriptor() ([]byte, []int) {
	return file_dhcp_agent_proto_rawDescGZIP(), []int{61}
}

func (x *DeleteRateLimitMacsRequest) GetHwAddresses() []string {
	if x != nil {
		return x.HwAddresses
	}
	return nil
}

type DeleteRateLimitMacRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HwAddress string `protobuf:"bytes,1,opt,name=hw_address,json=hwAddress,proto3" json:"hw_address,omitempty"`
}

func (x *DeleteRateLimitMacRequest) Reset() {
	*x = DeleteRateLimitMacRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_agent_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteRateLimitMacRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteRateLimitMacRequest) ProtoMessage() {}

func (x *DeleteRateLimitMacRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_agent_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteRateLimitMacRequest.ProtoReflect.Descriptor instead.
func (*DeleteRateLimitMacRequest) Descriptor() ([]byte, []int) {
	return file_dhcp_agent_proto_rawDescGZIP(), []int{62}
}

func (x *DeleteRateLimitMacRequest) GetHwAddress() string {
	if x != nil {
		return x.HwAddress
	}
	return ""
}

type UpdateRateLimitMacRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HwAddress string `protobuf:"bytes,1,opt,name=hw_address,json=hwAddress,proto3" json:"hw_address,omitempty"`
	Limit     uint32 `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *UpdateRateLimitMacRequest) Reset() {
	*x = UpdateRateLimitMacRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_agent_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateRateLimitMacRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateRateLimitMacRequest) ProtoMessage() {}

func (x *UpdateRateLimitMacRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_agent_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateRateLimitMacRequest.ProtoReflect.Descriptor instead.
func (*UpdateRateLimitMacRequest) Descriptor() ([]byte, []int) {
	return file_dhcp_agent_proto_rawDescGZIP(), []int{63}
}

func (x *UpdateRateLimitMacRequest) GetHwAddress() string {
	if x != nil {
		return x.HwAddress
	}
	return ""
}

func (x *UpdateRateLimitMacRequest) GetLimit() uint32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type CreateRateLimitDuidsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Duids []*CreateRateLimitDuidRequest `protobuf:"bytes,1,rep,name=duids,proto3" json:"duids,omitempty"`
}

func (x *CreateRateLimitDuidsRequest) Reset() {
	*x = CreateRateLimitDuidsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_agent_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateRateLimitDuidsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateRateLimitDuidsRequest) ProtoMessage() {}

func (x *CreateRateLimitDuidsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_agent_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateRateLimitDuidsRequest.ProtoReflect.Descriptor instead.
func (*CreateRateLimitDuidsRequest) Descriptor() ([]byte, []int) {
	return file_dhcp_agent_proto_rawDescGZIP(), []int{64}
}

func (x *CreateRateLimitDuidsRequest) GetDuids() []*CreateRateLimitDuidRequest {
	if x != nil {
		return x.Duids
	}
	return nil
}

type CreateRateLimitDuidRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Duid  string `protobuf:"bytes,1,opt,name=duid,proto3" json:"duid,omitempty"`
	Limit uint32 `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *CreateRateLimitDuidRequest) Reset() {
	*x = CreateRateLimitDuidRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_agent_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateRateLimitDuidRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateRateLimitDuidRequest) ProtoMessage() {}

func (x *CreateRateLimitDuidRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_agent_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateRateLimitDuidRequest.ProtoReflect.Descriptor instead.
func (*CreateRateLimitDuidRequest) Descriptor() ([]byte, []int) {
	return file_dhcp_agent_proto_rawDescGZIP(), []int{65}
}

func (x *CreateRateLimitDuidRequest) GetDuid() string {
	if x != nil {
		return x.Duid
	}
	return ""
}

func (x *CreateRateLimitDuidRequest) GetLimit() uint32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type DeleteRateLimitDuidsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Duids []string `protobuf:"bytes,1,rep,name=duids,proto3" json:"duids,omitempty"`
}

func (x *DeleteRateLimitDuidsRequest) Reset() {
	*x = DeleteRateLimitDuidsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_agent_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteRateLimitDuidsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteRateLimitDuidsRequest) ProtoMessage() {}

func (x *DeleteRateLimitDuidsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_agent_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteRateLimitDuidsRequest.ProtoReflect.Descriptor instead.
func (*DeleteRateLimitDuidsRequest) Descriptor() ([]byte, []int) {
	return file_dhcp_agent_proto_rawDescGZIP(), []int{66}
}

func (x *DeleteRateLimitDuidsRequest) GetDuids() []string {
	if x != nil {
		return x.Duids
	}
	return nil
}

type DeleteRateLimitDuidRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Duid string `protobuf:"bytes,1,opt,name=duid,proto3" json:"duid,omitempty"`
}

func (x *DeleteRateLimitDuidRequest) Reset() {
	*x = DeleteRateLimitDuidRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_agent_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteRateLimitDuidRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteRateLimitDuidRequest) ProtoMessage() {}

func (x *DeleteRateLimitDuidRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_agent_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteRateLimitDuidRequest.ProtoReflect.Descriptor instead.
func (*DeleteRateLimitDuidRequest) Descriptor() ([]byte, []int) {
	return file_dhcp_agent_proto_rawDescGZIP(), []int{67}
}

func (x *DeleteRateLimitDuidRequest) GetDuid() string {
	if x != nil {
		return x.Duid
	}
	return ""
}

type UpdateRateLimitDuidRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Duid  string `protobuf:"bytes,1,opt,name=duid,proto3" json:"duid,omitempty"`
	Limit uint32 `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *UpdateRateLimitDuidRequest) Reset() {
	*x = UpdateRateLimitDuidRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_agent_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateRateLimitDuidRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateRateLimitDuidRequest) ProtoMessage() {}

func (x *UpdateRateLimitDuidRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_agent_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateRateLimitDuidRequest.ProtoReflect.Descriptor instead.
func (*UpdateRateLimitDuidRequest) Descriptor() ([]byte, []int) {
	return file_dhcp_agent_proto_rawDescGZIP(), []int{68}
}

func (x *UpdateRateLimitDuidRequest) GetDuid() string {
	if x != nil {
		return x.Duid
	}
	return ""
}

func (x *UpdateRateLimitDuidRequest) GetLimit() uint32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type UpdatePingerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enabled bool   `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	Timeout uint32 `protobuf:"varint,2,opt,name=timeout,proto3" json:"timeout,omitempty"`
}

func (x *UpdatePingerRequest) Reset() {
	*x = UpdatePingerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_agent_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdatePingerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatePingerRequest) ProtoMessage() {}

func (x *UpdatePingerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_agent_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatePingerRequest.ProtoReflect.Descriptor instead.
func (*UpdatePingerRequest) Descriptor() ([]byte, []int) {
	return file_dhcp_agent_proto_rawDescGZIP(), []int{69}
}

func (x *UpdatePingerRequest) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *UpdatePingerRequest) GetTimeout() uint32 {
	if x != nil {
		return x.Timeout
	}
	return 0
}

type AddressCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name    string               `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Layouts []*AddressCodeLayout `protobuf:"bytes,2,rep,name=layouts,proto3" json:"layouts,omitempty"`
}

func (x *AddressCode) Reset() {
	*x = AddressCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_agent_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddressCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddressCode) ProtoMessage() {}

func (x *AddressCode) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_agent_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddressCode.ProtoReflect.Descriptor instead.
func (*AddressCode) Descriptor() ([]byte, []int) {
	return file_dhcp_agent_proto_rawDescGZIP(), []int{70}
}

func (x *AddressCode) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AddressCode) GetLayouts() []*AddressCodeLayout {
	if x != nil {
		return x.Layouts
	}
	return nil
}

type AddressCodeLayout struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Label    string                      `protobuf:"bytes,1,opt,name=label,proto3" json:"label,omitempty"`
	Begin    uint32                      `protobuf:"varint,2,opt,name=begin,proto3" json:"begin,omitempty"`
	End      uint32                      `protobuf:"varint,3,opt,name=end,proto3" json:"end,omitempty"`
	Segments []*AddressCodeLayoutSegment `protobuf:"bytes,4,rep,name=segments,proto3" json:"segments,omitempty"`
}

func (x *AddressCodeLayout) Reset() {
	*x = AddressCodeLayout{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_agent_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddressCodeLayout) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddressCodeLayout) ProtoMessage() {}

func (x *AddressCodeLayout) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_agent_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddressCodeLayout.ProtoReflect.Descriptor instead.
func (*AddressCodeLayout) Descriptor() ([]byte, []int) {
	return file_dhcp_agent_proto_rawDescGZIP(), []int{71}
}

func (x *AddressCodeLayout) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *AddressCodeLayout) GetBegin() uint32 {
	if x != nil {
		return x.Begin
	}
	return 0
}

func (x *AddressCodeLayout) GetEnd() uint32 {
	if x != nil {
		return x.End
	}
	return 0
}

func (x *AddressCodeLayout) GetSegments() []*AddressCodeLayoutSegment {
	if x != nil {
		return x.Segments
	}
	return nil
}

type AddressCodeLayoutSegment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code  string `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *AddressCodeLayoutSegment) Reset() {
	*x = AddressCodeLayoutSegment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_agent_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddressCodeLayoutSegment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddressCodeLayoutSegment) ProtoMessage() {}

func (x *AddressCodeLayoutSegment) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_agent_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddressCodeLayoutSegment.ProtoReflect.Descriptor instead.
func (*AddressCodeLayoutSegment) Descriptor() ([]byte, []int) {
	return file_dhcp_agent_proto_rawDescGZIP(), []int{72}
}

func (x *AddressCodeLayoutSegment) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *AddressCodeLayoutSegment) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type CreateAddressCodesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AddressCodes []*AddressCode `protobuf:"bytes,1,rep,name=address_codes,json=addressCodes,proto3" json:"address_codes,omitempty"`
}

func (x *CreateAddressCodesRequest) Reset() {
	*x = CreateAddressCodesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_agent_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateAddressCodesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateAddressCodesRequest) ProtoMessage() {}

func (x *CreateAddressCodesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_agent_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateAddressCodesRequest.ProtoReflect.Descriptor instead.
func (*CreateAddressCodesRequest) Descriptor() ([]byte, []int) {
	return file_dhcp_agent_proto_rawDescGZIP(), []int{73}
}

func (x *CreateAddressCodesRequest) GetAddressCodes() []*AddressCode {
	if x != nil {
		return x.AddressCodes
	}
	return nil
}

type CreateAddressCodeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *CreateAddressCodeRequest) Reset() {
	*x = CreateAddressCodeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_agent_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateAddressCodeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateAddressCodeRequest) ProtoMessage() {}

func (x *CreateAddressCodeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_agent_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateAddressCodeRequest.ProtoReflect.Descriptor instead.
func (*CreateAddressCodeRequest) Descriptor() ([]byte, []int) {
	return file_dhcp_agent_proto_rawDescGZIP(), []int{74}
}

func (x *CreateAddressCodeRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type DeleteAddressCodesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Names []string `protobuf:"bytes,1,rep,name=names,proto3" json:"names,omitempty"`
}

func (x *DeleteAddressCodesRequest) Reset() {
	*x = DeleteAddressCodesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_agent_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteAddressCodesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteAddressCodesRequest) ProtoMessage() {}

func (x *DeleteAddressCodesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_agent_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteAddressCodesRequest.ProtoReflect.Descriptor instead.
func (*DeleteAddressCodesRequest) Descriptor() ([]byte, []int) {
	return file_dhcp_agent_proto_rawDescGZIP(), []int{75}
}

func (x *DeleteAddressCodesRequest) GetNames() []string {
	if x != nil {
		return x.Names
	}
	return nil
}

type DeleteAddressCodeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *DeleteAddressCodeRequest) Reset() {
	*x = DeleteAddressCodeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_agent_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteAddressCodeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteAddressCodeRequest) ProtoMessage() {}

func (x *DeleteAddressCodeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_agent_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteAddressCodeRequest.ProtoReflect.Descriptor instead.
func (*DeleteAddressCodeRequest) Descriptor() ([]byte, []int) {
	return file_dhcp_agent_proto_rawDescGZIP(), []int{76}
}

func (x *DeleteAddressCodeRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type UpdateAddressCodeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OldName string `protobuf:"bytes,1,opt,name=old_name,json=oldName,proto3" json:"old_name,omitempty"`
	NewName string `protobuf:"bytes,2,opt,name=new_name,json=newName,proto3" json:"new_name,omitempty"`
}

func (x *UpdateAddressCodeRequest) Reset() {
	*x = UpdateAddressCodeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_agent_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateAddressCodeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateAddressCodeRequest) ProtoMessage() {}

func (x *UpdateAddressCodeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_agent_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateAddressCodeRequest.ProtoReflect.Descriptor instead.
func (*UpdateAddressCodeRequest) Descriptor() ([]byte, []int) {
	return file_dhcp_agent_proto_rawDescGZIP(), []int{77}
}

func (x *UpdateAddressCodeRequest) GetOldName() string {
	if x != nil {
		return x.OldName
	}
	return ""
}

func (x *UpdateAddressCodeRequest) GetNewName() string {
	if x != nil {
		return x.NewName
	}
	return ""
}

type CreateAddressCodeLayoutsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AddressCode string               `protobuf:"bytes,1,opt,name=address_code,json=addressCode,proto3" json:"address_code,omitempty"`
	Layouts     []*AddressCodeLayout `protobuf:"bytes,2,rep,name=layouts,proto3" json:"layouts,omitempty"`
}

func (x *CreateAddressCodeLayoutsRequest) Reset() {
	*x = CreateAddressCodeLayoutsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_agent_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateAddressCodeLayoutsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateAddressCodeLayoutsRequest) ProtoMessage() {}

func (x *CreateAddressCodeLayoutsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_agent_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateAddressCodeLayoutsRequest.ProtoReflect.Descriptor instead.
func (*CreateAddressCodeLayoutsRequest) Descriptor() ([]byte, []int) {
	return file_dhcp_agent_proto_rawDescGZIP(), []int{78}
}

func (x *CreateAddressCodeLayoutsRequest) GetAddressCode() string {
	if x != nil {
		return x.AddressCode
	}
	return ""
}

func (x *CreateAddressCodeLayoutsRequest) GetLayouts() []*AddressCodeLayout {
	if x != nil {
		return x.Layouts
	}
	return nil
}

type CreateAddressCodeLayoutRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AddressCode string `protobuf:"bytes,1,opt,name=address_code,json=addressCode,proto3" json:"address_code,omitempty"`
	Label       string `protobuf:"bytes,2,opt,name=label,proto3" json:"label,omitempty"`
	Begin       uint32 `protobuf:"varint,3,opt,name=begin,proto3" json:"begin,omitempty"`
	End         uint32 `protobuf:"varint,4,opt,name=end,proto3" json:"end,omitempty"`
}

func (x *CreateAddressCodeLayoutRequest) Reset() {
	*x = CreateAddressCodeLayoutRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_agent_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateAddressCodeLayoutRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateAddressCodeLayoutRequest) ProtoMessage() {}

func (x *CreateAddressCodeLayoutRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_agent_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateAddressCodeLayoutRequest.ProtoReflect.Descriptor instead.
func (*CreateAddressCodeLayoutRequest) Descriptor() ([]byte, []int) {
	return file_dhcp_agent_proto_rawDescGZIP(), []int{79}
}

func (x *CreateAddressCodeLayoutRequest) GetAddressCode() string {
	if x != nil {
		return x.AddressCode
	}
	return ""
}

func (x *CreateAddressCodeLayoutRequest) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *CreateAddressCodeLayoutRequest) GetBegin() uint32 {
	if x != nil {
		return x.Begin
	}
	return 0
}

func (x *CreateAddressCodeLayoutRequest) GetEnd() uint32 {
	if x != nil {
		return x.End
	}
	return 0
}

type DeleteAddressCodeLayoutsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AddressCode string   `protobuf:"bytes,1,opt,name=address_code,json=addressCode,proto3" json:"address_code,omitempty"`
	Labels      []string `protobuf:"bytes,2,rep,name=labels,proto3" json:"labels,omitempty"`
}

func (x *DeleteAddressCodeLayoutsRequest) Reset() {
	*x = DeleteAddressCodeLayoutsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_agent_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteAddressCodeLayoutsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteAddressCodeLayoutsRequest) ProtoMessage() {}

func (x *DeleteAddressCodeLayoutsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_agent_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteAddressCodeLayoutsRequest.ProtoReflect.Descriptor instead.
func (*DeleteAddressCodeLayoutsRequest) Descriptor() ([]byte, []int) {
	return file_dhcp_agent_proto_rawDescGZIP(), []int{80}
}

func (x *DeleteAddressCodeLayoutsRequest) GetAddressCode() string {
	if x != nil {
		return x.AddressCode
	}
	return ""
}

func (x *DeleteAddressCodeLayoutsRequest) GetLabels() []string {
	if x != nil {
		return x.Labels
	}
	return nil
}

type DeleteAddressCodeLayoutRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AddressCode string `protobuf:"bytes,1,opt,name=address_code,json=addressCode,proto3" json:"address_code,omitempty"`
	Label       string `protobuf:"bytes,2,opt,name=label,proto3" json:"label,omitempty"`
}

func (x *DeleteAddressCodeLayoutRequest) Reset() {
	*x = DeleteAddressCodeLayoutRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_agent_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteAddressCodeLayoutRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteAddressCodeLayoutRequest) ProtoMessage() {}

func (x *DeleteAddressCodeLayoutRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_agent_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteAddressCodeLayoutRequest.ProtoReflect.Descriptor instead.
func (*DeleteAddressCodeLayoutRequest) Descriptor() ([]byte, []int) {
	return file_dhcp_agent_proto_rawDescGZIP(), []int{81}
}

func (x *DeleteAddressCodeLayoutRequest) GetAddressCode() string {
	if x != nil {
		return x.AddressCode
	}
	return ""
}

func (x *DeleteAddressCodeLayoutRequest) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

type UpdateAddressCodeLayoutRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AddressCode string `protobuf:"bytes,1,opt,name=address_code,json=addressCode,proto3" json:"address_code,omitempty"`
	OldLabel    string `protobuf:"bytes,2,opt,name=old_label,json=oldLabel,proto3" json:"old_label,omitempty"`
	NewLabel    string `protobuf:"bytes,3,opt,name=new_label,json=newLabel,proto3" json:"new_label,omitempty"`
}

func (x *UpdateAddressCodeLayoutRequest) Reset() {
	*x = UpdateAddressCodeLayoutRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_agent_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateAddressCodeLayoutRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateAddressCodeLayoutRequest) ProtoMessage() {}

func (x *UpdateAddressCodeLayoutRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_agent_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateAddressCodeLayoutRequest.ProtoReflect.Descriptor instead.
func (*UpdateAddressCodeLayoutRequest) Descriptor() ([]byte, []int) {
	return file_dhcp_agent_proto_rawDescGZIP(), []int{82}
}

func (x *UpdateAddressCodeLayoutRequest) GetAddressCode() string {
	if x != nil {
		return x.AddressCode
	}
	return ""
}

func (x *UpdateAddressCodeLayoutRequest) GetOldLabel() string {
	if x != nil {
		return x.OldLabel
	}
	return ""
}

func (x *UpdateAddressCodeLayoutRequest) GetNewLabel() string {
	if x != nil {
		return x.NewLabel
	}
	return ""
}

type CreateAddressCodeLayoutSegmentsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AddressCode string                      `protobuf:"bytes,1,opt,name=address_code,json=addressCode,proto3" json:"address_code,omitempty"`
	Layout      string                      `protobuf:"bytes,2,opt,name=layout,proto3" json:"layout,omitempty"`
	Segments    []*AddressCodeLayoutSegment `protobuf:"bytes,3,rep,name=segments,proto3" json:"segments,omitempty"`
}

func (x *CreateAddressCodeLayoutSegmentsRequest) Reset() {
	*x = CreateAddressCodeLayoutSegmentsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_agent_proto_msgTypes[83]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateAddressCodeLayoutSegmentsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateAddressCodeLayoutSegmentsRequest) ProtoMessage() {}

func (x *CreateAddressCodeLayoutSegmentsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_agent_proto_msgTypes[83]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateAddressCodeLayoutSegmentsRequest.ProtoReflect.Descriptor instead.
func (*CreateAddressCodeLayoutSegmentsRequest) Descriptor() ([]byte, []int) {
	return file_dhcp_agent_proto_rawDescGZIP(), []int{83}
}

func (x *CreateAddressCodeLayoutSegmentsRequest) GetAddressCode() string {
	if x != nil {
		return x.AddressCode
	}
	return ""
}

func (x *CreateAddressCodeLayoutSegmentsRequest) GetLayout() string {
	if x != nil {
		return x.Layout
	}
	return ""
}

func (x *CreateAddressCodeLayoutSegmentsRequest) GetSegments() []*AddressCodeLayoutSegment {
	if x != nil {
		return x.Segments
	}
	return nil
}

type CreateAddressCodeLayoutSegmentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AddressCode string                    `protobuf:"bytes,1,opt,name=address_code,json=addressCode,proto3" json:"address_code,omitempty"`
	Layout      string                    `protobuf:"bytes,2,opt,name=layout,proto3" json:"layout,omitempty"`
	Segment     *AddressCodeLayoutSegment `protobuf:"bytes,3,opt,name=segment,proto3" json:"segment,omitempty"`
}

func (x *CreateAddressCodeLayoutSegmentRequest) Reset() {
	*x = CreateAddressCodeLayoutSegmentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_agent_proto_msgTypes[84]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateAddressCodeLayoutSegmentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateAddressCodeLayoutSegmentRequest) ProtoMessage() {}

func (x *CreateAddressCodeLayoutSegmentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_agent_proto_msgTypes[84]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateAddressCodeLayoutSegmentRequest.ProtoReflect.Descriptor instead.
func (*CreateAddressCodeLayoutSegmentRequest) Descriptor() ([]byte, []int) {
	return file_dhcp_agent_proto_rawDescGZIP(), []int{84}
}

func (x *CreateAddressCodeLayoutSegmentRequest) GetAddressCode() string {
	if x != nil {
		return x.AddressCode
	}
	return ""
}

func (x *CreateAddressCodeLayoutSegmentRequest) GetLayout() string {
	if x != nil {
		return x.Layout
	}
	return ""
}

func (x *CreateAddressCodeLayoutSegmentRequest) GetSegment() *AddressCodeLayoutSegment {
	if x != nil {
		return x.Segment
	}
	return nil
}

type DeleteAddressCodeLayoutSegmentsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AddressCode  string   `protobuf:"bytes,1,opt,name=address_code,json=addressCode,proto3" json:"address_code,omitempty"`
	Layout       string   `protobuf:"bytes,2,opt,name=layout,proto3" json:"layout,omitempty"`
	SegmentCodes []string `protobuf:"bytes,3,rep,name=segment_codes,json=segmentCodes,proto3" json:"segment_codes,omitempty"`
}

func (x *DeleteAddressCodeLayoutSegmentsRequest) Reset() {
	*x = DeleteAddressCodeLayoutSegmentsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_agent_proto_msgTypes[85]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteAddressCodeLayoutSegmentsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteAddressCodeLayoutSegmentsRequest) ProtoMessage() {}

func (x *DeleteAddressCodeLayoutSegmentsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_agent_proto_msgTypes[85]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteAddressCodeLayoutSegmentsRequest.ProtoReflect.Descriptor instead.
func (*DeleteAddressCodeLayoutSegmentsRequest) Descriptor() ([]byte, []int) {
	return file_dhcp_agent_proto_rawDescGZIP(), []int{85}
}

func (x *DeleteAddressCodeLayoutSegmentsRequest) GetAddressCode() string {
	if x != nil {
		return x.AddressCode
	}
	return ""
}

func (x *DeleteAddressCodeLayoutSegmentsRequest) GetLayout() string {
	if x != nil {
		return x.Layout
	}
	return ""
}

func (x *DeleteAddressCodeLayoutSegmentsRequest) GetSegmentCodes() []string {
	if x != nil {
		return x.SegmentCodes
	}
	return nil
}

type DeleteAddressCodeLayoutSegmentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AddressCode string `protobuf:"bytes,1,opt,name=address_code,json=addressCode,proto3" json:"address_code,omitempty"`
	Layout      string `protobuf:"bytes,2,opt,name=layout,proto3" json:"layout,omitempty"`
	SegmentCode string `protobuf:"bytes,3,opt,name=segment_code,json=segmentCode,proto3" json:"segment_code,omitempty"`
}

func (x *DeleteAddressCodeLayoutSegmentRequest) Reset() {
	*x = DeleteAddressCodeLayoutSegmentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_agent_proto_msgTypes[86]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteAddressCodeLayoutSegmentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteAddressCodeLayoutSegmentRequest) ProtoMessage() {}

func (x *DeleteAddressCodeLayoutSegmentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_agent_proto_msgTypes[86]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteAddressCodeLayoutSegmentRequest.ProtoReflect.Descriptor instead.
func (*DeleteAddressCodeLayoutSegmentRequest) Descriptor() ([]byte, []int) {
	return file_dhcp_agent_proto_rawDescGZIP(), []int{86}
}

func (x *DeleteAddressCodeLayoutSegmentRequest) GetAddressCode() string {
	if x != nil {
		return x.AddressCode
	}
	return ""
}

func (x *DeleteAddressCodeLayoutSegmentRequest) GetLayout() string {
	if x != nil {
		return x.Layout
	}
	return ""
}

func (x *DeleteAddressCodeLayoutSegmentRequest) GetSegmentCode() string {
	if x != nil {
		return x.SegmentCode
	}
	return ""
}

type UpdateAddressCodeLayoutSegmentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AddressCode string                    `protobuf:"bytes,1,opt,name=address_code,json=addressCode,proto3" json:"address_code,omitempty"`
	Layout      string                    `protobuf:"bytes,2,opt,name=layout,proto3" json:"layout,omitempty"`
	OldSegment  *AddressCodeLayoutSegment `protobuf:"bytes,3,opt,name=old_segment,json=oldSegment,proto3" json:"old_segment,omitempty"`
	NewSegment  *AddressCodeLayoutSegment `protobuf:"bytes,4,opt,name=new_segment,json=newSegment,proto3" json:"new_segment,omitempty"`
}

func (x *UpdateAddressCodeLayoutSegmentRequest) Reset() {
	*x = UpdateAddressCodeLayoutSegmentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_agent_proto_msgTypes[87]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateAddressCodeLayoutSegmentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateAddressCodeLayoutSegmentRequest) ProtoMessage() {}

func (x *UpdateAddressCodeLayoutSegmentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_agent_proto_msgTypes[87]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateAddressCodeLayoutSegmentRequest.ProtoReflect.Descriptor instead.
func (*UpdateAddressCodeLayoutSegmentRequest) Descriptor() ([]byte, []int) {
	return file_dhcp_agent_proto_rawDescGZIP(), []int{87}
}

func (x *UpdateAddressCodeLayoutSegmentRequest) GetAddressCode() string {
	if x != nil {
		return x.AddressCode
	}
	return ""
}

func (x *UpdateAddressCodeLayoutSegmentRequest) GetLayout() string {
	if x != nil {
		return x.Layout
	}
	return ""
}

func (x *UpdateAddressCodeLayoutSegmentRequest) GetOldSegment() *AddressCodeLayoutSegment {
	if x != nil {
		return x.OldSegment
	}
	return nil
}

func (x *UpdateAddressCodeLayoutSegmentRequest) GetNewSegment() *AddressCodeLayoutSegment {
	if x != nil {
		return x.NewSegment
	}
	return nil
}

type CreateAssetsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Assets []*CreateAssetRequest `protobuf:"bytes,1,rep,name=assets,proto3" json:"assets,omitempty"`
}

func (x *CreateAssetsRequest) Reset() {
	*x = CreateAssetsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_agent_proto_msgTypes[88]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateAssetsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateAssetsRequest) ProtoMessage() {}

func (x *CreateAssetsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_agent_proto_msgTypes[88]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateAssetsRequest.ProtoReflect.Descriptor instead.
func (*CreateAssetsRequest) Descriptor() ([]byte, []int) {
	return file_dhcp_agent_proto_rawDescGZIP(), []int{88}
}

func (x *CreateAssetsRequest) GetAssets() []*CreateAssetRequest {
	if x != nil {
		return x.Assets
	}
	return nil
}

type CreateAssetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HwAddress         string `protobuf:"bytes,1,opt,name=hw_address,json=hwAddress,proto3" json:"hw_address,omitempty"`
	AssetType         string `protobuf:"bytes,2,opt,name=asset_type,json=assetType,proto3" json:"asset_type,omitempty"`
	Manufacturer      string `protobuf:"bytes,3,opt,name=manufacturer,proto3" json:"manufacturer,omitempty"`
	Model             string `protobuf:"bytes,4,opt,name=model,proto3" json:"model,omitempty"`
	AccessNetworkTime string `protobuf:"bytes,5,opt,name=access_network_time,json=accessNetworkTime,proto3" json:"access_network_time,omitempty"`
}

func (x *CreateAssetRequest) Reset() {
	*x = CreateAssetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_agent_proto_msgTypes[89]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateAssetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateAssetRequest) ProtoMessage() {}

func (x *CreateAssetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_agent_proto_msgTypes[89]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateAssetRequest.ProtoReflect.Descriptor instead.
func (*CreateAssetRequest) Descriptor() ([]byte, []int) {
	return file_dhcp_agent_proto_rawDescGZIP(), []int{89}
}

func (x *CreateAssetRequest) GetHwAddress() string {
	if x != nil {
		return x.HwAddress
	}
	return ""
}

func (x *CreateAssetRequest) GetAssetType() string {
	if x != nil {
		return x.AssetType
	}
	return ""
}

func (x *CreateAssetRequest) GetManufacturer() string {
	if x != nil {
		return x.Manufacturer
	}
	return ""
}

func (x *CreateAssetRequest) GetModel() string {
	if x != nil {
		return x.Model
	}
	return ""
}

func (x *CreateAssetRequest) GetAccessNetworkTime() string {
	if x != nil {
		return x.AccessNetworkTime
	}
	return ""
}

type DeleteAssetsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HwAddresses []string `protobuf:"bytes,1,rep,name=hw_addresses,json=hwAddresses,proto3" json:"hw_addresses,omitempty"`
}

func (x *DeleteAssetsRequest) Reset() {
	*x = DeleteAssetsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_agent_proto_msgTypes[90]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteAssetsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteAssetsRequest) ProtoMessage() {}

func (x *DeleteAssetsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_agent_proto_msgTypes[90]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteAssetsRequest.ProtoReflect.Descriptor instead.
func (*DeleteAssetsRequest) Descriptor() ([]byte, []int) {
	return file_dhcp_agent_proto_rawDescGZIP(), []int{90}
}

func (x *DeleteAssetsRequest) GetHwAddresses() []string {
	if x != nil {
		return x.HwAddresses
	}
	return nil
}

type DeleteAssetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HwAddress string `protobuf:"bytes,1,opt,name=hw_address,json=hwAddress,proto3" json:"hw_address,omitempty"`
}

func (x *DeleteAssetRequest) Reset() {
	*x = DeleteAssetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_agent_proto_msgTypes[91]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteAssetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteAssetRequest) ProtoMessage() {}

func (x *DeleteAssetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_agent_proto_msgTypes[91]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteAssetRequest.ProtoReflect.Descriptor instead.
func (*DeleteAssetRequest) Descriptor() ([]byte, []int) {
	return file_dhcp_agent_proto_rawDescGZIP(), []int{91}
}

func (x *DeleteAssetRequest) GetHwAddress() string {
	if x != nil {
		return x.HwAddress
	}
	return ""
}

type UpdateAssetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HwAddress         string `protobuf:"bytes,1,opt,name=hw_address,json=hwAddress,proto3" json:"hw_address,omitempty"`
	AssetType         string `protobuf:"bytes,2,opt,name=asset_type,json=assetType,proto3" json:"asset_type,omitempty"`
	Manufacturer      string `protobuf:"bytes,3,opt,name=manufacturer,proto3" json:"manufacturer,omitempty"`
	Model             string `protobuf:"bytes,4,opt,name=model,proto3" json:"model,omitempty"`
	AccessNetworkTime string `protobuf:"bytes,5,opt,name=access_network_time,json=accessNetworkTime,proto3" json:"access_network_time,omitempty"`
}

func (x *UpdateAssetRequest) Reset() {
	*x = UpdateAssetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_agent_proto_msgTypes[92]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateAssetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateAssetRequest) ProtoMessage() {}

func (x *UpdateAssetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_agent_proto_msgTypes[92]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateAssetRequest.ProtoReflect.Descriptor instead.
func (*UpdateAssetRequest) Descriptor() ([]byte, []int) {
	return file_dhcp_agent_proto_rawDescGZIP(), []int{92}
}

func (x *UpdateAssetRequest) GetHwAddress() string {
	if x != nil {
		return x.HwAddress
	}
	return ""
}

func (x *UpdateAssetRequest) GetAssetType() string {
	if x != nil {
		return x.AssetType
	}
	return ""
}

func (x *UpdateAssetRequest) GetManufacturer() string {
	if x != nil {
		return x.Manufacturer
	}
	return ""
}

func (x *UpdateAssetRequest) GetModel() string {
	if x != nil {
		return x.Model
	}
	return ""
}

func (x *UpdateAssetRequest) GetAccessNetworkTime() string {
	if x != nil {
		return x.AccessNetworkTime
	}
	return ""
}

type GetSubnetsLeasesCountRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetSubnetsLeasesCountRequest) Reset() {
	*x = GetSubnetsLeasesCountRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_agent_proto_msgTypes[93]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSubnetsLeasesCountRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSubnetsLeasesCountRequest) ProtoMessage() {}

func (x *GetSubnetsLeasesCountRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_agent_proto_msgTypes[93]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSubnetsLeasesCountRequest.ProtoReflect.Descriptor instead.
func (*GetSubnetsLeasesCountRequest) Descriptor() ([]byte, []int) {
	return file_dhcp_agent_proto_rawDescGZIP(), []int{93}
}

type GetSubnetsLeasesCountWithIdsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ids []uint64 `protobuf:"varint,1,rep,packed,name=ids,proto3" json:"ids,omitempty"`
}

func (x *GetSubnetsLeasesCountWithIdsRequest) Reset() {
	*x = GetSubnetsLeasesCountWithIdsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_agent_proto_msgTypes[94]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSubnetsLeasesCountWithIdsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSubnetsLeasesCountWithIdsRequest) ProtoMessage() {}

func (x *GetSubnetsLeasesCountWithIdsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_agent_proto_msgTypes[94]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSubnetsLeasesCountWithIdsRequest.ProtoReflect.Descriptor instead.
func (*GetSubnetsLeasesCountWithIdsRequest) Descriptor() ([]byte, []int) {
	return file_dhcp_agent_proto_rawDescGZIP(), []int{94}
}

func (x *GetSubnetsLeasesCountWithIdsRequest) GetIds() []uint64 {
	if x != nil {
		return x.Ids
	}
	return nil
}

type GetSubnetsLeasesCountResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Succeed            bool              `protobuf:"varint,1,opt,name=succeed,proto3" json:"succeed,omitempty"`
	SubnetsLeasesCount map[uint64]uint64 `protobuf:"bytes,2,rep,name=subnets_leases_count,json=subnetsLeasesCount,proto3" json:"subnets_leases_count,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *GetSubnetsLeasesCountResponse) Reset() {
	*x = GetSubnetsLeasesCountResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_agent_proto_msgTypes[95]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSubnetsLeasesCountResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSubnetsLeasesCountResponse) ProtoMessage() {}

func (x *GetSubnetsLeasesCountResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_agent_proto_msgTypes[95]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSubnetsLeasesCountResponse.ProtoReflect.Descriptor instead.
func (*GetSubnetsLeasesCountResponse) Descriptor() ([]byte, []int) {
	return file_dhcp_agent_proto_rawDescGZIP(), []int{95}
}

func (x *GetSubnetsLeasesCountResponse) GetSucceed() bool {
	if x != nil {
		return x.Succeed
	}
	return false
}

func (x *GetSubnetsLeasesCountResponse) GetSubnetsLeasesCount() map[uint64]uint64 {
	if x != nil {
		return x.SubnetsLeasesCount
	}
	return nil
}

type GetSubnet4LeasesCountRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetSubnet4LeasesCountRequest) Reset() {
	*x = GetSubnet4LeasesCountRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_agent_proto_msgTypes[96]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSubnet4LeasesCountRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSubnet4LeasesCountRequest) ProtoMessage() {}

func (x *GetSubnet4LeasesCountRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_agent_proto_msgTypes[96]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSubnet4LeasesCountRequest.ProtoReflect.Descriptor instead.
func (*GetSubnet4LeasesCountRequest) Descriptor() ([]byte, []int) {
	return file_dhcp_agent_proto_rawDescGZIP(), []int{96}
}

func (x *GetSubnet4LeasesCountRequest) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type GetPool4LeasesCountRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubnetId     uint64 `protobuf:"varint,1,opt,name=subnet_id,json=subnetId,proto3" json:"subnet_id,omitempty"`
	BeginAddress string `protobuf:"bytes,2,opt,name=begin_address,json=beginAddress,proto3" json:"begin_address,omitempty"`
	EndAddress   string `protobuf:"bytes,3,opt,name=end_address,json=endAddress,proto3" json:"end_address,omitempty"`
}

func (x *GetPool4LeasesCountRequest) Reset() {
	*x = GetPool4LeasesCountRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_agent_proto_msgTypes[97]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPool4LeasesCountRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPool4LeasesCountRequest) ProtoMessage() {}

func (x *GetPool4LeasesCountRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_agent_proto_msgTypes[97]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPool4LeasesCountRequest.ProtoReflect.Descriptor instead.
func (*GetPool4LeasesCountRequest) Descriptor() ([]byte, []int) {
	return file_dhcp_agent_proto_rawDescGZIP(), []int{97}
}

func (x *GetPool4LeasesCountRequest) GetSubnetId() uint64 {
	if x != nil {
		return x.SubnetId
	}
	return 0
}

func (x *GetPool4LeasesCountRequest) GetBeginAddress() string {
	if x != nil {
		return x.BeginAddress
	}
	return ""
}

func (x *GetPool4LeasesCountRequest) GetEndAddress() string {
	if x != nil {
		return x.EndAddress
	}
	return ""
}

type GetReservation4LeaseCountRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubnetId  uint64 `protobuf:"varint,1,opt,name=subnet_id,json=subnetId,proto3" json:"subnet_id,omitempty"`
	HwAddress string `protobuf:"bytes,2,opt,name=hw_address,json=hwAddress,proto3" json:"hw_address,omitempty"`
	Hostname  string `protobuf:"bytes,3,opt,name=hostname,proto3" json:"hostname,omitempty"`
	IpAddress string `protobuf:"bytes,4,opt,name=ip_address,json=ipAddress,proto3" json:"ip_address,omitempty"`
}

func (x *GetReservation4LeaseCountRequest) Reset() {
	*x = GetReservation4LeaseCountRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_agent_proto_msgTypes[98]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetReservation4LeaseCountRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetReservation4LeaseCountRequest) ProtoMessage() {}

func (x *GetReservation4LeaseCountRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_agent_proto_msgTypes[98]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetReservation4LeaseCountRequest.ProtoReflect.Descriptor instead.
func (*GetReservation4LeaseCountRequest) Descriptor() ([]byte, []int) {
	return file_dhcp_agent_proto_rawDescGZIP(), []int{98}
}

func (x *GetReservation4LeaseCountRequest) GetSubnetId() uint64 {
	if x != nil {
		return x.SubnetId
	}
	return 0
}

func (x *GetReservation4LeaseCountRequest) GetHwAddress() string {
	if x != nil {
		return x.HwAddress
	}
	return ""
}

func (x *GetReservation4LeaseCountRequest) GetHostname() string {
	if x != nil {
		return x.Hostname
	}
	return ""
}

func (x *GetReservation4LeaseCountRequest) GetIpAddress() string {
	if x != nil {
		return x.IpAddress
	}
	return ""
}

type GetReservation4LeaseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubnetId  uint64 `protobuf:"varint,1,opt,name=subnet_id,json=subnetId,proto3" json:"subnet_id,omitempty"`
	HwAddress string `protobuf:"bytes,2,opt,name=hw_address,json=hwAddress,proto3" json:"hw_address,omitempty"`
	Hostname  string `protobuf:"bytes,3,opt,name=hostname,proto3" json:"hostname,omitempty"`
	IpAddress string `protobuf:"bytes,4,opt,name=ip_address,json=ipAddress,proto3" json:"ip_address,omitempty"`
}

func (x *GetReservation4LeaseRequest) Reset() {
	*x = GetReservation4LeaseRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_agent_proto_msgTypes[99]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetReservation4LeaseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetReservation4LeaseRequest) ProtoMessage() {}

func (x *GetReservation4LeaseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_agent_proto_msgTypes[99]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetReservation4LeaseRequest.ProtoReflect.Descriptor instead.
func (*GetReservation4LeaseRequest) Descriptor() ([]byte, []int) {
	return file_dhcp_agent_proto_rawDescGZIP(), []int{99}
}

func (x *GetReservation4LeaseRequest) GetSubnetId() uint64 {
	if x != nil {
		return x.SubnetId
	}
	return 0
}

func (x *GetReservation4LeaseRequest) GetHwAddress() string {
	if x != nil {
		return x.HwAddress
	}
	return ""
}

func (x *GetReservation4LeaseRequest) GetHostname() string {
	if x != nil {
		return x.Hostname
	}
	return ""
}

func (x *GetReservation4LeaseRequest) GetIpAddress() string {
	if x != nil {
		return x.IpAddress
	}
	return ""
}

type GetLeasesCountResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Succeed     bool   `protobuf:"varint,1,opt,name=succeed,proto3" json:"succeed,omitempty"`
	LeasesCount uint64 `protobuf:"varint,2,opt,name=leases_count,json=leasesCount,proto3" json:"leases_count,omitempty"`
}

func (x *GetLeasesCountResponse) Reset() {
	*x = GetLeasesCountResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_agent_proto_msgTypes[100]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLeasesCountResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLeasesCountResponse) ProtoMessage() {}

func (x *GetLeasesCountResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_agent_proto_msgTypes[100]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLeasesCountResponse.ProtoReflect.Descriptor instead.
func (*GetLeasesCountResponse) Descriptor() ([]byte, []int) {
	return file_dhcp_agent_proto_rawDescGZIP(), []int{100}
}

func (x *GetLeasesCountResponse) GetSucceed() bool {
	if x != nil {
		return x.Succeed
	}
	return false
}

func (x *GetLeasesCountResponse) GetLeasesCount() uint64 {
	if x != nil {
		return x.LeasesCount
	}
	return 0
}

type GetSubnet6LeasesCountRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetSubnet6LeasesCountRequest) Reset() {
	*x = GetSubnet6LeasesCountRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_agent_proto_msgTypes[101]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSubnet6LeasesCountRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSubnet6LeasesCountRequest) ProtoMessage() {}

func (x *GetSubnet6LeasesCountRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_agent_proto_msgTypes[101]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSubnet6LeasesCountRequest.ProtoReflect.Descriptor instead.
func (*GetSubnet6LeasesCountRequest) Descriptor() ([]byte, []int) {
	return file_dhcp_agent_proto_rawDescGZIP(), []int{101}
}

func (x *GetSubnet6LeasesCountRequest) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type GetPool6LeasesCountRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubnetId     uint64 `protobuf:"varint,1,opt,name=subnet_id,json=subnetId,proto3" json:"subnet_id,omitempty"`
	BeginAddress string `protobuf:"bytes,2,opt,name=begin_address,json=beginAddress,proto3" json:"begin_address,omitempty"`
	EndAddress   string `protobuf:"bytes,3,opt,name=end_address,json=endAddress,proto3" json:"end_address,omitempty"`
}

func (x *GetPool6LeasesCountRequest) Reset() {
	*x = GetPool6LeasesCountRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_agent_proto_msgTypes[102]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPool6LeasesCountRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPool6LeasesCountRequest) ProtoMessage() {}

func (x *GetPool6LeasesCountRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_agent_proto_msgTypes[102]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPool6LeasesCountRequest.ProtoReflect.Descriptor instead.
func (*GetPool6LeasesCountRequest) Descriptor() ([]byte, []int) {
	return file_dhcp_agent_proto_rawDescGZIP(), []int{102}
}

func (x *GetPool6LeasesCountRequest) GetSubnetId() uint64 {
	if x != nil {
		return x.SubnetId
	}
	return 0
}

func (x *GetPool6LeasesCountRequest) GetBeginAddress() string {
	if x != nil {
		return x.BeginAddress
	}
	return ""
}

func (x *GetPool6LeasesCountRequest) GetEndAddress() string {
	if x != nil {
		return x.EndAddress
	}
	return ""
}

type GetReservation6LeasesCountRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubnetId    uint64   `protobuf:"varint,1,opt,name=subnet_id,json=subnetId,proto3" json:"subnet_id,omitempty"`
	HwAddress   string   `protobuf:"bytes,2,opt,name=hw_address,json=hwAddress,proto3" json:"hw_address,omitempty"`
	Duid        string   `protobuf:"bytes,3,opt,name=duid,proto3" json:"duid,omitempty"`
	Hostname    string   `protobuf:"bytes,4,opt,name=hostname,proto3" json:"hostname,omitempty"`
	IpAddresses []string `protobuf:"bytes,5,rep,name=ip_addresses,json=ipAddresses,proto3" json:"ip_addresses,omitempty"`
	Prefixes    []string `protobuf:"bytes,6,rep,name=prefixes,proto3" json:"prefixes,omitempty"`
}

func (x *GetReservation6LeasesCountRequest) Reset() {
	*x = GetReservation6LeasesCountRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_agent_proto_msgTypes[103]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetReservation6LeasesCountRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetReservation6LeasesCountRequest) ProtoMessage() {}

func (x *GetReservation6LeasesCountRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_agent_proto_msgTypes[103]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetReservation6LeasesCountRequest.ProtoReflect.Descriptor instead.
func (*GetReservation6LeasesCountRequest) Descriptor() ([]byte, []int) {
	return file_dhcp_agent_proto_rawDescGZIP(), []int{103}
}

func (x *GetReservation6LeasesCountRequest) GetSubnetId() uint64 {
	if x != nil {
		return x.SubnetId
	}
	return 0
}

func (x *GetReservation6LeasesCountRequest) GetHwAddress() string {
	if x != nil {
		return x.HwAddress
	}
	return ""
}

func (x *GetReservation6LeasesCountRequest) GetDuid() string {
	if x != nil {
		return x.Duid
	}
	return ""
}

func (x *GetReservation6LeasesCountRequest) GetHostname() string {
	if x != nil {
		return x.Hostname
	}
	return ""
}

func (x *GetReservation6LeasesCountRequest) GetIpAddresses() []string {
	if x != nil {
		return x.IpAddresses
	}
	return nil
}

func (x *GetReservation6LeasesCountRequest) GetPrefixes() []string {
	if x != nil {
		return x.Prefixes
	}
	return nil
}

type GetReservation6LeasesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubnetId    uint64   `protobuf:"varint,1,opt,name=subnet_id,json=subnetId,proto3" json:"subnet_id,omitempty"`
	HwAddress   string   `protobuf:"bytes,2,opt,name=hw_address,json=hwAddress,proto3" json:"hw_address,omitempty"`
	Duid        string   `protobuf:"bytes,3,opt,name=duid,proto3" json:"duid,omitempty"`
	Hostname    string   `protobuf:"bytes,4,opt,name=hostname,proto3" json:"hostname,omitempty"`
	IpAddresses []string `protobuf:"bytes,5,rep,name=ip_addresses,json=ipAddresses,proto3" json:"ip_addresses,omitempty"`
	Prefixes    []string `protobuf:"bytes,6,rep,name=prefixes,proto3" json:"prefixes,omitempty"`
}

func (x *GetReservation6LeasesRequest) Reset() {
	*x = GetReservation6LeasesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_agent_proto_msgTypes[104]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetReservation6LeasesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetReservation6LeasesRequest) ProtoMessage() {}

func (x *GetReservation6LeasesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_agent_proto_msgTypes[104]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetReservation6LeasesRequest.ProtoReflect.Descriptor instead.
func (*GetReservation6LeasesRequest) Descriptor() ([]byte, []int) {
	return file_dhcp_agent_proto_rawDescGZIP(), []int{104}
}

func (x *GetReservation6LeasesRequest) GetSubnetId() uint64 {
	if x != nil {
		return x.SubnetId
	}
	return 0
}

func (x *GetReservation6LeasesRequest) GetHwAddress() string {
	if x != nil {
		return x.HwAddress
	}
	return ""
}

func (x *GetReservation6LeasesRequest) GetDuid() string {
	if x != nil {
		return x.Duid
	}
	return ""
}

func (x *GetReservation6LeasesRequest) GetHostname() string {
	if x != nil {
		return x.Hostname
	}
	return ""
}

func (x *GetReservation6LeasesRequest) GetIpAddresses() []string {
	if x != nil {
		return x.IpAddresses
	}
	return nil
}

func (x *GetReservation6LeasesRequest) GetPrefixes() []string {
	if x != nil {
		return x.Prefixes
	}
	return nil
}

type GetSubnet4LeasesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetSubnet4LeasesRequest) Reset() {
	*x = GetSubnet4LeasesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_agent_proto_msgTypes[105]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSubnet4LeasesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSubnet4LeasesRequest) ProtoMessage() {}

func (x *GetSubnet4LeasesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_agent_proto_msgTypes[105]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSubnet4LeasesRequest.ProtoReflect.Descriptor instead.
func (*GetSubnet4LeasesRequest) Descriptor() ([]byte, []int) {
	return file_dhcp_agent_proto_rawDescGZIP(), []int{105}
}

func (x *GetSubnet4LeasesRequest) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type GetSubnet4LeaseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Address string `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
}

func (x *GetSubnet4LeaseRequest) Reset() {
	*x = GetSubnet4LeaseRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_agent_proto_msgTypes[106]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSubnet4LeaseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSubnet4LeaseRequest) ProtoMessage() {}

func (x *GetSubnet4LeaseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_agent_proto_msgTypes[106]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSubnet4LeaseRequest.ProtoReflect.Descriptor instead.
func (*GetSubnet4LeaseRequest) Descriptor() ([]byte, []int) {
	return file_dhcp_agent_proto_rawDescGZIP(), []int{106}
}

func (x *GetSubnet4LeaseRequest) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *GetSubnet4LeaseRequest) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

type GetSubnet4LeasesWithIpsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Addresses []*GetSubnet4LeaseRequest `protobuf:"bytes,1,rep,name=addresses,proto3" json:"addresses,omitempty"`
}

func (x *GetSubnet4LeasesWithIpsRequest) Reset() {
	*x = GetSubnet4LeasesWithIpsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_agent_proto_msgTypes[107]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSubnet4LeasesWithIpsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSubnet4LeasesWithIpsRequest) ProtoMessage() {}

func (x *GetSubnet4LeasesWithIpsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_agent_proto_msgTypes[107]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSubnet4LeasesWithIpsRequest.ProtoReflect.Descriptor instead.
func (*GetSubnet4LeasesWithIpsRequest) Descriptor() ([]byte, []int) {
	return file_dhcp_agent_proto_rawDescGZIP(), []int{107}
}

func (x *GetSubnet4LeasesWithIpsRequest) GetAddresses() []*GetSubnet4LeaseRequest {
	if x != nil {
		return x.Addresses
	}
	return nil
}

type GetSubnets4LeasesWithMacsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HwAddresses []string `protobuf:"bytes,1,rep,name=hw_addresses,json=hwAddresses,proto3" json:"hw_addresses,omitempty"`
}

func (x *GetSubnets4LeasesWithMacsRequest) Reset() {
	*x = GetSubnets4LeasesWithMacsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_agent_proto_msgTypes[108]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSubnets4LeasesWithMacsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSubnets4LeasesWithMacsRequest) ProtoMessage() {}

func (x *GetSubnets4LeasesWithMacsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_agent_proto_msgTypes[108]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSubnets4LeasesWithMacsRequest.ProtoReflect.Descriptor instead.
func (*GetSubnets4LeasesWithMacsRequest) Descriptor() ([]byte, []int) {
	return file_dhcp_agent_proto_rawDescGZIP(), []int{108}
}

func (x *GetSubnets4LeasesWithMacsRequest) GetHwAddresses() []string {
	if x != nil {
		return x.HwAddresses
	}
	return nil
}

type GetSubnets4LeasesWithHostnamesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hostnames []string `protobuf:"bytes,1,rep,name=hostnames,proto3" json:"hostnames,omitempty"`
}

func (x *GetSubnets4LeasesWithHostnamesRequest) Reset() {
	*x = GetSubnets4LeasesWithHostnamesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_agent_proto_msgTypes[109]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSubnets4LeasesWithHostnamesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSubnets4LeasesWithHostnamesRequest) ProtoMessage() {}

func (x *GetSubnets4LeasesWithHostnamesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_agent_proto_msgTypes[109]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSubnets4LeasesWithHostnamesRequest.ProtoReflect.Descriptor instead.
func (*GetSubnets4LeasesWithHostnamesRequest) Descriptor() ([]byte, []int) {
	return file_dhcp_agent_proto_rawDescGZIP(), []int{109}
}

func (x *GetSubnets4LeasesWithHostnamesRequest) GetHostnames() []string {
	if x != nil {
		return x.Hostnames
	}
	return nil
}

type GetLeases4WithIpsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Succeed bool                   `protobuf:"varint,1,opt,name=succeed,proto3" json:"succeed,omitempty"`
	Leases  map[string]*DHCPLease4 `protobuf:"bytes,2,rep,name=leases,proto3" json:"leases,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *GetLeases4WithIpsResponse) Reset() {
	*x = GetLeases4WithIpsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_agent_proto_msgTypes[110]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLeases4WithIpsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLeases4WithIpsResponse) ProtoMessage() {}

func (x *GetLeases4WithIpsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_agent_proto_msgTypes[110]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLeases4WithIpsResponse.ProtoReflect.Descriptor instead.
func (*GetLeases4WithIpsResponse) Descriptor() ([]byte, []int) {
	return file_dhcp_agent_proto_rawDescGZIP(), []int{110}
}

func (x *GetLeases4WithIpsResponse) GetSucceed() bool {
	if x != nil {
		return x.Succeed
	}
	return false
}

func (x *GetLeases4WithIpsResponse) GetLeases() map[string]*DHCPLease4 {
	if x != nil {
		return x.Leases
	}
	return nil
}

type GetSubnet6LeasesWithIpsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Addresses []*GetSubnet6LeaseRequest `protobuf:"bytes,1,rep,name=addresses,proto3" json:"addresses,omitempty"`
}

func (x *GetSubnet6LeasesWithIpsRequest) Reset() {
	*x = GetSubnet6LeasesWithIpsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_agent_proto_msgTypes[111]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSubnet6LeasesWithIpsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSubnet6LeasesWithIpsRequest) ProtoMessage() {}

func (x *GetSubnet6LeasesWithIpsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_agent_proto_msgTypes[111]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSubnet6LeasesWithIpsRequest.ProtoReflect.Descriptor instead.
func (*GetSubnet6LeasesWithIpsRequest) Descriptor() ([]byte, []int) {
	return file_dhcp_agent_proto_rawDescGZIP(), []int{111}
}

func (x *GetSubnet6LeasesWithIpsRequest) GetAddresses() []*GetSubnet6LeaseRequest {
	if x != nil {
		return x.Addresses
	}
	return nil
}

type GetSubnets6LeasesWithDuidsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Duids []string `protobuf:"bytes,1,rep,name=duids,proto3" json:"duids,omitempty"`
}

func (x *GetSubnets6LeasesWithDuidsRequest) Reset() {
	*x = GetSubnets6LeasesWithDuidsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_agent_proto_msgTypes[112]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSubnets6LeasesWithDuidsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSubnets6LeasesWithDuidsRequest) ProtoMessage() {}

func (x *GetSubnets6LeasesWithDuidsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_agent_proto_msgTypes[112]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSubnets6LeasesWithDuidsRequest.ProtoReflect.Descriptor instead.
func (*GetSubnets6LeasesWithDuidsRequest) Descriptor() ([]byte, []int) {
	return file_dhcp_agent_proto_rawDescGZIP(), []int{112}
}

func (x *GetSubnets6LeasesWithDuidsRequest) GetDuids() []string {
	if x != nil {
		return x.Duids
	}
	return nil
}

type GetSubnets6LeasesWithMacsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HwAddresses []string `protobuf:"bytes,1,rep,name=hw_addresses,json=hwAddresses,proto3" json:"hw_addresses,omitempty"`
}

func (x *GetSubnets6LeasesWithMacsRequest) Reset() {
	*x = GetSubnets6LeasesWithMacsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_agent_proto_msgTypes[113]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSubnets6LeasesWithMacsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSubnets6LeasesWithMacsRequest) ProtoMessage() {}

func (x *GetSubnets6LeasesWithMacsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_agent_proto_msgTypes[113]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSubnets6LeasesWithMacsRequest.ProtoReflect.Descriptor instead.
func (*GetSubnets6LeasesWithMacsRequest) Descriptor() ([]byte, []int) {
	return file_dhcp_agent_proto_rawDescGZIP(), []int{113}
}

func (x *GetSubnets6LeasesWithMacsRequest) GetHwAddresses() []string {
	if x != nil {
		return x.HwAddresses
	}
	return nil
}

type GetSubnets6LeasesWithHostnamesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hostnames []string `protobuf:"bytes,1,rep,name=hostnames,proto3" json:"hostnames,omitempty"`
}

func (x *GetSubnets6LeasesWithHostnamesRequest) Reset() {
	*x = GetSubnets6LeasesWithHostnamesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_agent_proto_msgTypes[114]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSubnets6LeasesWithHostnamesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSubnets6LeasesWithHostnamesRequest) ProtoMessage() {}

func (x *GetSubnets6LeasesWithHostnamesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_agent_proto_msgTypes[114]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSubnets6LeasesWithHostnamesRequest.ProtoReflect.Descriptor instead.
func (*GetSubnets6LeasesWithHostnamesRequest) Descriptor() ([]byte, []int) {
	return file_dhcp_agent_proto_rawDescGZIP(), []int{114}
}

func (x *GetSubnets6LeasesWithHostnamesRequest) GetHostnames() []string {
	if x != nil {
		return x.Hostnames
	}
	return nil
}

type GetLeases6WithIpsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Succeed bool                   `protobuf:"varint,1,opt,name=succeed,proto3" json:"succeed,omitempty"`
	Leases  map[string]*DHCPLease6 `protobuf:"bytes,2,rep,name=leases,proto3" json:"leases,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *GetLeases6WithIpsResponse) Reset() {
	*x = GetLeases6WithIpsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_agent_proto_msgTypes[115]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLeases6WithIpsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLeases6WithIpsResponse) ProtoMessage() {}

func (x *GetLeases6WithIpsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_agent_proto_msgTypes[115]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLeases6WithIpsResponse.ProtoReflect.Descriptor instead.
func (*GetLeases6WithIpsResponse) Descriptor() ([]byte, []int) {
	return file_dhcp_agent_proto_rawDescGZIP(), []int{115}
}

func (x *GetLeases6WithIpsResponse) GetSucceed() bool {
	if x != nil {
		return x.Succeed
	}
	return false
}

func (x *GetLeases6WithIpsResponse) GetLeases() map[string]*DHCPLease6 {
	if x != nil {
		return x.Leases
	}
	return nil
}

type GetSubnet6LeasesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetSubnet6LeasesRequest) Reset() {
	*x = GetSubnet6LeasesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_agent_proto_msgTypes[116]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSubnet6LeasesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSubnet6LeasesRequest) ProtoMessage() {}

func (x *GetSubnet6LeasesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_agent_proto_msgTypes[116]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSubnet6LeasesRequest.ProtoReflect.Descriptor instead.
func (*GetSubnet6LeasesRequest) Descriptor() ([]byte, []int) {
	return file_dhcp_agent_proto_rawDescGZIP(), []int{116}
}

func (x *GetSubnet6LeasesRequest) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type GetSubnet6LeaseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Address string `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
}

func (x *GetSubnet6LeaseRequest) Reset() {
	*x = GetSubnet6LeaseRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_agent_proto_msgTypes[117]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSubnet6LeaseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSubnet6LeaseRequest) ProtoMessage() {}

func (x *GetSubnet6LeaseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_agent_proto_msgTypes[117]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSubnet6LeaseRequest.ProtoReflect.Descriptor instead.
func (*GetSubnet6LeaseRequest) Descriptor() ([]byte, []int) {
	return file_dhcp_agent_proto_rawDescGZIP(), []int{117}
}

func (x *GetSubnet6LeaseRequest) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *GetSubnet6LeaseRequest) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

type GetPool4LeasesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubnetId     uint64 `protobuf:"varint,1,opt,name=subnet_id,json=subnetId,proto3" json:"subnet_id,omitempty"`
	BeginAddress string `protobuf:"bytes,2,opt,name=begin_address,json=beginAddress,proto3" json:"begin_address,omitempty"`
	EndAddress   string `protobuf:"bytes,3,opt,name=end_address,json=endAddress,proto3" json:"end_address,omitempty"`
}

func (x *GetPool4LeasesRequest) Reset() {
	*x = GetPool4LeasesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_agent_proto_msgTypes[118]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPool4LeasesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPool4LeasesRequest) ProtoMessage() {}

func (x *GetPool4LeasesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_agent_proto_msgTypes[118]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPool4LeasesRequest.ProtoReflect.Descriptor instead.
func (*GetPool4LeasesRequest) Descriptor() ([]byte, []int) {
	return file_dhcp_agent_proto_rawDescGZIP(), []int{118}
}

func (x *GetPool4LeasesRequest) GetSubnetId() uint64 {
	if x != nil {
		return x.SubnetId
	}
	return 0
}

func (x *GetPool4LeasesRequest) GetBeginAddress() string {
	if x != nil {
		return x.BeginAddress
	}
	return ""
}

func (x *GetPool4LeasesRequest) GetEndAddress() string {
	if x != nil {
		return x.EndAddress
	}
	return ""
}

type GetPool6LeasesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubnetId     uint64 `protobuf:"varint,1,opt,name=subnet_id,json=subnetId,proto3" json:"subnet_id,omitempty"`
	BeginAddress string `protobuf:"bytes,2,opt,name=begin_address,json=beginAddress,proto3" json:"begin_address,omitempty"`
	EndAddress   string `protobuf:"bytes,3,opt,name=end_address,json=endAddress,proto3" json:"end_address,omitempty"`
}

func (x *GetPool6LeasesRequest) Reset() {
	*x = GetPool6LeasesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_agent_proto_msgTypes[119]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPool6LeasesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPool6LeasesRequest) ProtoMessage() {}

func (x *GetPool6LeasesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_agent_proto_msgTypes[119]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPool6LeasesRequest.ProtoReflect.Descriptor instead.
func (*GetPool6LeasesRequest) Descriptor() ([]byte, []int) {
	return file_dhcp_agent_proto_rawDescGZIP(), []int{119}
}

func (x *GetPool6LeasesRequest) GetSubnetId() uint64 {
	if x != nil {
		return x.SubnetId
	}
	return 0
}

func (x *GetPool6LeasesRequest) GetBeginAddress() string {
	if x != nil {
		return x.BeginAddress
	}
	return ""
}

func (x *GetPool6LeasesRequest) GetEndAddress() string {
	if x != nil {
		return x.EndAddress
	}
	return ""
}

type DHCPLease4 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address               string     `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	HwAddress             string     `protobuf:"bytes,2,opt,name=hw_address,json=hwAddress,proto3" json:"hw_address,omitempty"`
	HwAddressOrganization string     `protobuf:"bytes,3,opt,name=hw_address_organization,json=hwAddressOrganization,proto3" json:"hw_address_organization,omitempty"`
	ClientId              string     `protobuf:"bytes,4,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	FqdnFwd               bool       `protobuf:"varint,5,opt,name=fqdn_fwd,json=fqdnFwd,proto3" json:"fqdn_fwd,omitempty"`
	FqdnRev               bool       `protobuf:"varint,6,opt,name=fqdn_rev,json=fqdnRev,proto3" json:"fqdn_rev,omitempty"`
	Hostname              string     `protobuf:"bytes,7,opt,name=hostname,proto3" json:"hostname,omitempty"`
	SubnetId              uint64     `protobuf:"varint,8,opt,name=subnet_id,json=subnetId,proto3" json:"subnet_id,omitempty"`
	Subnet                string     `protobuf:"bytes,9,opt,name=subnet,proto3" json:"subnet,omitempty"`
	LeaseState            LeaseState `protobuf:"varint,10,opt,name=lease_state,json=leaseState,proto3,enum=proto.LeaseState" json:"lease_state,omitempty"`
	RequestType           string     `protobuf:"bytes,11,opt,name=request_type,json=requestType,proto3" json:"request_type,omitempty"`
	RequestTime           string     `protobuf:"bytes,12,opt,name=request_time,json=requestTime,proto3" json:"request_time,omitempty"`
	ValidLifetime         uint32     `protobuf:"varint,13,opt,name=valid_lifetime,json=validLifetime,proto3" json:"valid_lifetime,omitempty"`
	ExpirationTime        string     `protobuf:"bytes,14,opt,name=expiration_time,json=expirationTime,proto3" json:"expiration_time,omitempty"`
	Fingerprint           string     `protobuf:"bytes,15,opt,name=fingerprint,proto3" json:"fingerprint,omitempty"`
	VendorId              string     `protobuf:"bytes,16,opt,name=vendor_id,json=vendorId,proto3" json:"vendor_id,omitempty"`
	OperatingSystem       string     `protobuf:"bytes,17,opt,name=operating_system,json=operatingSystem,proto3" json:"operating_system,omitempty"`
	ClientType            string     `protobuf:"bytes,18,opt,name=client_type,json=clientType,proto3" json:"client_type,omitempty"`
}

func (x *DHCPLease4) Reset() {
	*x = DHCPLease4{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_agent_proto_msgTypes[120]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DHCPLease4) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DHCPLease4) ProtoMessage() {}

func (x *DHCPLease4) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_agent_proto_msgTypes[120]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DHCPLease4.ProtoReflect.Descriptor instead.
func (*DHCPLease4) Descriptor() ([]byte, []int) {
	return file_dhcp_agent_proto_rawDescGZIP(), []int{120}
}

func (x *DHCPLease4) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *DHCPLease4) GetHwAddress() string {
	if x != nil {
		return x.HwAddress
	}
	return ""
}

func (x *DHCPLease4) GetHwAddressOrganization() string {
	if x != nil {
		return x.HwAddressOrganization
	}
	return ""
}

func (x *DHCPLease4) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *DHCPLease4) GetFqdnFwd() bool {
	if x != nil {
		return x.FqdnFwd
	}
	return false
}

func (x *DHCPLease4) GetFqdnRev() bool {
	if x != nil {
		return x.FqdnRev
	}
	return false
}

func (x *DHCPLease4) GetHostname() string {
	if x != nil {
		return x.Hostname
	}
	return ""
}

func (x *DHCPLease4) GetSubnetId() uint64 {
	if x != nil {
		return x.SubnetId
	}
	return 0
}

func (x *DHCPLease4) GetSubnet() string {
	if x != nil {
		return x.Subnet
	}
	return ""
}

func (x *DHCPLease4) GetLeaseState() LeaseState {
	if x != nil {
		return x.LeaseState
	}
	return LeaseState_NORMAL
}

func (x *DHCPLease4) GetRequestType() string {
	if x != nil {
		return x.RequestType
	}
	return ""
}

func (x *DHCPLease4) GetRequestTime() string {
	if x != nil {
		return x.RequestTime
	}
	return ""
}

func (x *DHCPLease4) GetValidLifetime() uint32 {
	if x != nil {
		return x.ValidLifetime
	}
	return 0
}

func (x *DHCPLease4) GetExpirationTime() string {
	if x != nil {
		return x.ExpirationTime
	}
	return ""
}

func (x *DHCPLease4) GetFingerprint() string {
	if x != nil {
		return x.Fingerprint
	}
	return ""
}

func (x *DHCPLease4) GetVendorId() string {
	if x != nil {
		return x.VendorId
	}
	return ""
}

func (x *DHCPLease4) GetOperatingSystem() string {
	if x != nil {
		return x.OperatingSystem
	}
	return ""
}

func (x *DHCPLease4) GetClientType() string {
	if x != nil {
		return x.ClientType
	}
	return ""
}

type GetLeases4Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Succeed bool          `protobuf:"varint,1,opt,name=succeed,proto3" json:"succeed,omitempty"`
	Leases  []*DHCPLease4 `protobuf:"bytes,2,rep,name=leases,proto3" json:"leases,omitempty"`
}

func (x *GetLeases4Response) Reset() {
	*x = GetLeases4Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_agent_proto_msgTypes[121]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLeases4Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLeases4Response) ProtoMessage() {}

func (x *GetLeases4Response) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_agent_proto_msgTypes[121]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLeases4Response.ProtoReflect.Descriptor instead.
func (*GetLeases4Response) Descriptor() ([]byte, []int) {
	return file_dhcp_agent_proto_rawDescGZIP(), []int{121}
}

func (x *GetLeases4Response) GetSucceed() bool {
	if x != nil {
		return x.Succeed
	}
	return false
}

func (x *GetLeases4Response) GetLeases() []*DHCPLease4 {
	if x != nil {
		return x.Leases
	}
	return nil
}

type GetLease4Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Succeed bool        `protobuf:"varint,1,opt,name=succeed,proto3" json:"succeed,omitempty"`
	Lease   *DHCPLease4 `protobuf:"bytes,2,opt,name=lease,proto3" json:"lease,omitempty"`
}

func (x *GetLease4Response) Reset() {
	*x = GetLease4Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_agent_proto_msgTypes[122]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLease4Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLease4Response) ProtoMessage() {}

func (x *GetLease4Response) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_agent_proto_msgTypes[122]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLease4Response.ProtoReflect.Descriptor instead.
func (*GetLease4Response) Descriptor() ([]byte, []int) {
	return file_dhcp_agent_proto_rawDescGZIP(), []int{122}
}

func (x *GetLease4Response) GetSucceed() bool {
	if x != nil {
		return x.Succeed
	}
	return false
}

func (x *GetLease4Response) GetLease() *DHCPLease4 {
	if x != nil {
		return x.Lease
	}
	return nil
}

type DHCPLease6 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address               string          `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Duid                  string          `protobuf:"bytes,2,opt,name=duid,proto3" json:"duid,omitempty"`
	HwAddress             string          `protobuf:"bytes,3,opt,name=hw_address,json=hwAddress,proto3" json:"hw_address,omitempty"`
	HwAddressType         string          `protobuf:"bytes,4,opt,name=hw_address_type,json=hwAddressType,proto3" json:"hw_address_type,omitempty"`
	HwAddressSource       HwAddressSource `protobuf:"varint,5,opt,name=hw_address_source,json=hwAddressSource,proto3,enum=proto.HwAddressSource" json:"hw_address_source,omitempty"`
	HwAddressOrganization string          `protobuf:"bytes,6,opt,name=hw_address_organization,json=hwAddressOrganization,proto3" json:"hw_address_organization,omitempty"`
	FqdnFwd               bool            `protobuf:"varint,7,opt,name=fqdn_fwd,json=fqdnFwd,proto3" json:"fqdn_fwd,omitempty"`
	FqdnRev               bool            `protobuf:"varint,8,opt,name=fqdn_rev,json=fqdnRev,proto3" json:"fqdn_rev,omitempty"`
	Hostname              string          `protobuf:"bytes,9,opt,name=hostname,proto3" json:"hostname,omitempty"`
	Iaid                  uint32          `protobuf:"varint,10,opt,name=iaid,proto3" json:"iaid,omitempty"`
	SubnetId              uint64          `protobuf:"varint,11,opt,name=subnet_id,json=subnetId,proto3" json:"subnet_id,omitempty"`
	Subnet                string          `protobuf:"bytes,12,opt,name=subnet,proto3" json:"subnet,omitempty"`
	LeaseState            LeaseState      `protobuf:"varint,13,opt,name=lease_state,json=leaseState,proto3,enum=proto.LeaseState" json:"lease_state,omitempty"`
	LeaseType             string          `protobuf:"bytes,14,opt,name=lease_type,json=leaseType,proto3" json:"lease_type,omitempty"`
	PrefixLen             uint32          `protobuf:"varint,15,opt,name=prefix_len,json=prefixLen,proto3" json:"prefix_len,omitempty"`
	RequestType           string          `protobuf:"bytes,16,opt,name=request_type,json=requestType,proto3" json:"request_type,omitempty"`
	RequestTime           string          `protobuf:"bytes,17,opt,name=request_time,json=requestTime,proto3" json:"request_time,omitempty"`
	ValidLifetime         uint32          `protobuf:"varint,18,opt,name=valid_lifetime,json=validLifetime,proto3" json:"valid_lifetime,omitempty"`
	PreferredLifetime     uint32          `protobuf:"varint,19,opt,name=preferred_lifetime,json=preferredLifetime,proto3" json:"preferred_lifetime,omitempty"`
	ExpirationTime        string          `protobuf:"bytes,20,opt,name=expiration_time,json=expirationTime,proto3" json:"expiration_time,omitempty"`
	Fingerprint           string          `protobuf:"bytes,21,opt,name=fingerprint,proto3" json:"fingerprint,omitempty"`
	VendorId              string          `protobuf:"bytes,22,opt,name=vendor_id,json=vendorId,proto3" json:"vendor_id,omitempty"`
	OperatingSystem       string          `protobuf:"bytes,23,opt,name=operating_system,json=operatingSystem,proto3" json:"operating_system,omitempty"`
	ClientType            string          `protobuf:"bytes,24,opt,name=client_type,json=clientType,proto3" json:"client_type,omitempty"`
	RequestSourceAddr     string          `protobuf:"bytes,25,opt,name=request_source_addr,json=requestSourceAddr,proto3" json:"request_source_addr,omitempty"`
	AddressCodes          []string        `protobuf:"bytes,26,rep,name=address_codes,json=addressCodes,proto3" json:"address_codes,omitempty"`
	AddressCodeBegins     []uint32        `protobuf:"varint,27,rep,packed,name=address_code_begins,json=addressCodeBegins,proto3" json:"address_code_begins,omitempty"`
	AddressCodeEnds       []uint32        `protobuf:"varint,28,rep,packed,name=address_code_ends,json=addressCodeEnds,proto3" json:"address_code_ends,omitempty"`
}

func (x *DHCPLease6) Reset() {
	*x = DHCPLease6{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_agent_proto_msgTypes[123]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DHCPLease6) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DHCPLease6) ProtoMessage() {}

func (x *DHCPLease6) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_agent_proto_msgTypes[123]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DHCPLease6.ProtoReflect.Descriptor instead.
func (*DHCPLease6) Descriptor() ([]byte, []int) {
	return file_dhcp_agent_proto_rawDescGZIP(), []int{123}
}

func (x *DHCPLease6) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *DHCPLease6) GetDuid() string {
	if x != nil {
		return x.Duid
	}
	return ""
}

func (x *DHCPLease6) GetHwAddress() string {
	if x != nil {
		return x.HwAddress
	}
	return ""
}

func (x *DHCPLease6) GetHwAddressType() string {
	if x != nil {
		return x.HwAddressType
	}
	return ""
}

func (x *DHCPLease6) GetHwAddressSource() HwAddressSource {
	if x != nil {
		return x.HwAddressSource
	}
	return HwAddressSource_UNKNOWN
}

func (x *DHCPLease6) GetHwAddressOrganization() string {
	if x != nil {
		return x.HwAddressOrganization
	}
	return ""
}

func (x *DHCPLease6) GetFqdnFwd() bool {
	if x != nil {
		return x.FqdnFwd
	}
	return false
}

func (x *DHCPLease6) GetFqdnRev() bool {
	if x != nil {
		return x.FqdnRev
	}
	return false
}

func (x *DHCPLease6) GetHostname() string {
	if x != nil {
		return x.Hostname
	}
	return ""
}

func (x *DHCPLease6) GetIaid() uint32 {
	if x != nil {
		return x.Iaid
	}
	return 0
}

func (x *DHCPLease6) GetSubnetId() uint64 {
	if x != nil {
		return x.SubnetId
	}
	return 0
}

func (x *DHCPLease6) GetSubnet() string {
	if x != nil {
		return x.Subnet
	}
	return ""
}

func (x *DHCPLease6) GetLeaseState() LeaseState {
	if x != nil {
		return x.LeaseState
	}
	return LeaseState_NORMAL
}

func (x *DHCPLease6) GetLeaseType() string {
	if x != nil {
		return x.LeaseType
	}
	return ""
}

func (x *DHCPLease6) GetPrefixLen() uint32 {
	if x != nil {
		return x.PrefixLen
	}
	return 0
}

func (x *DHCPLease6) GetRequestType() string {
	if x != nil {
		return x.RequestType
	}
	return ""
}

func (x *DHCPLease6) GetRequestTime() string {
	if x != nil {
		return x.RequestTime
	}
	return ""
}

func (x *DHCPLease6) GetValidLifetime() uint32 {
	if x != nil {
		return x.ValidLifetime
	}
	return 0
}

func (x *DHCPLease6) GetPreferredLifetime() uint32 {
	if x != nil {
		return x.PreferredLifetime
	}
	return 0
}

func (x *DHCPLease6) GetExpirationTime() string {
	if x != nil {
		return x.ExpirationTime
	}
	return ""
}

func (x *DHCPLease6) GetFingerprint() string {
	if x != nil {
		return x.Fingerprint
	}
	return ""
}

func (x *DHCPLease6) GetVendorId() string {
	if x != nil {
		return x.VendorId
	}
	return ""
}

func (x *DHCPLease6) GetOperatingSystem() string {
	if x != nil {
		return x.OperatingSystem
	}
	return ""
}

func (x *DHCPLease6) GetClientType() string {
	if x != nil {
		return x.ClientType
	}
	return ""
}

func (x *DHCPLease6) GetRequestSourceAddr() string {
	if x != nil {
		return x.RequestSourceAddr
	}
	return ""
}

func (x *DHCPLease6) GetAddressCodes() []string {
	if x != nil {
		return x.AddressCodes
	}
	return nil
}

func (x *DHCPLease6) GetAddressCodeBegins() []uint32 {
	if x != nil {
		return x.AddressCodeBegins
	}
	return nil
}

func (x *DHCPLease6) GetAddressCodeEnds() []uint32 {
	if x != nil {
		return x.AddressCodeEnds
	}
	return nil
}

type GetLeases6Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Succeed bool          `protobuf:"varint,1,opt,name=succeed,proto3" json:"succeed,omitempty"`
	Leases  []*DHCPLease6 `protobuf:"bytes,2,rep,name=leases,proto3" json:"leases,omitempty"`
}

func (x *GetLeases6Response) Reset() {
	*x = GetLeases6Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_agent_proto_msgTypes[124]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLeases6Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLeases6Response) ProtoMessage() {}

func (x *GetLeases6Response) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_agent_proto_msgTypes[124]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLeases6Response.ProtoReflect.Descriptor instead.
func (*GetLeases6Response) Descriptor() ([]byte, []int) {
	return file_dhcp_agent_proto_rawDescGZIP(), []int{124}
}

func (x *GetLeases6Response) GetSucceed() bool {
	if x != nil {
		return x.Succeed
	}
	return false
}

func (x *GetLeases6Response) GetLeases() []*DHCPLease6 {
	if x != nil {
		return x.Leases
	}
	return nil
}

type GetLease6Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Succeed bool        `protobuf:"varint,1,opt,name=succeed,proto3" json:"succeed,omitempty"`
	Lease   *DHCPLease6 `protobuf:"bytes,2,opt,name=lease,proto3" json:"lease,omitempty"`
}

func (x *GetLease6Response) Reset() {
	*x = GetLease6Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_agent_proto_msgTypes[125]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLease6Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLease6Response) ProtoMessage() {}

func (x *GetLease6Response) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_agent_proto_msgTypes[125]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLease6Response.ProtoReflect.Descriptor instead.
func (*GetLease6Response) Descriptor() ([]byte, []int) {
	return file_dhcp_agent_proto_rawDescGZIP(), []int{125}
}

func (x *GetLease6Response) GetSucceed() bool {
	if x != nil {
		return x.Succeed
	}
	return false
}

func (x *GetLease6Response) GetLease() *DHCPLease6 {
	if x != nil {
		return x.Lease
	}
	return nil
}

type CreateSubnets4AndPoolsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Subnets       []*CreateSubnet4Request       `protobuf:"bytes,1,rep,name=subnets,proto3" json:"subnets,omitempty"`
	Pools         []*CreatePool4Request         `protobuf:"bytes,2,rep,name=pools,proto3" json:"pools,omitempty"`
	ReservedPools []*CreateReservedPool4Request `protobuf:"bytes,3,rep,name=reserved_pools,json=reservedPools,proto3" json:"reserved_pools,omitempty"`
	Reservations  []*CreateReservation4Request  `protobuf:"bytes,4,rep,name=reservations,proto3" json:"reservations,omitempty"`
}

func (x *CreateSubnets4AndPoolsRequest) Reset() {
	*x = CreateSubnets4AndPoolsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_agent_proto_msgTypes[126]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateSubnets4AndPoolsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSubnets4AndPoolsRequest) ProtoMessage() {}

func (x *CreateSubnets4AndPoolsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_agent_proto_msgTypes[126]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSubnets4AndPoolsRequest.ProtoReflect.Descriptor instead.
func (*CreateSubnets4AndPoolsRequest) Descriptor() ([]byte, []int) {
	return file_dhcp_agent_proto_rawDescGZIP(), []int{126}
}

func (x *CreateSubnets4AndPoolsRequest) GetSubnets() []*CreateSubnet4Request {
	if x != nil {
		return x.Subnets
	}
	return nil
}

func (x *CreateSubnets4AndPoolsRequest) GetPools() []*CreatePool4Request {
	if x != nil {
		return x.Pools
	}
	return nil
}

func (x *CreateSubnets4AndPoolsRequest) GetReservedPools() []*CreateReservedPool4Request {
	if x != nil {
		return x.ReservedPools
	}
	return nil
}

func (x *CreateSubnets4AndPoolsRequest) GetReservations() []*CreateReservation4Request {
	if x != nil {
		return x.Reservations
	}
	return nil
}

type CreatePools4Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubnetId uint64                `protobuf:"varint,1,opt,name=subnet_id,json=subnetId,proto3" json:"subnet_id,omitempty"`
	Pools    []*CreatePool4Request `protobuf:"bytes,2,rep,name=pools,proto3" json:"pools,omitempty"`
}

func (x *CreatePools4Request) Reset() {
	*x = CreatePools4Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_agent_proto_msgTypes[127]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreatePools4Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePools4Request) ProtoMessage() {}

func (x *CreatePools4Request) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_agent_proto_msgTypes[127]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePools4Request.ProtoReflect.Descriptor instead.
func (*CreatePools4Request) Descriptor() ([]byte, []int) {
	return file_dhcp_agent_proto_rawDescGZIP(), []int{127}
}

func (x *CreatePools4Request) GetSubnetId() uint64 {
	if x != nil {
		return x.SubnetId
	}
	return 0
}

func (x *CreatePools4Request) GetPools() []*CreatePool4Request {
	if x != nil {
		return x.Pools
	}
	return nil
}

type CreateReservedPools4Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubnetId      uint64                        `protobuf:"varint,1,opt,name=subnet_id,json=subnetId,proto3" json:"subnet_id,omitempty"`
	ReservedPools []*CreateReservedPool4Request `protobuf:"bytes,2,rep,name=reserved_pools,json=reservedPools,proto3" json:"reserved_pools,omitempty"`
}

func (x *CreateReservedPools4Request) Reset() {
	*x = CreateReservedPools4Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_agent_proto_msgTypes[128]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateReservedPools4Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateReservedPools4Request) ProtoMessage() {}

func (x *CreateReservedPools4Request) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_agent_proto_msgTypes[128]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateReservedPools4Request.ProtoReflect.Descriptor instead.
func (*CreateReservedPools4Request) Descriptor() ([]byte, []int) {
	return file_dhcp_agent_proto_rawDescGZIP(), []int{128}
}

func (x *CreateReservedPools4Request) GetSubnetId() uint64 {
	if x != nil {
		return x.SubnetId
	}
	return 0
}

func (x *CreateReservedPools4Request) GetReservedPools() []*CreateReservedPool4Request {
	if x != nil {
		return x.ReservedPools
	}
	return nil
}

type CreateReservations4Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubnetId     uint64                       `protobuf:"varint,1,opt,name=subnet_id,json=subnetId,proto3" json:"subnet_id,omitempty"`
	Reservations []*CreateReservation4Request `protobuf:"bytes,2,rep,name=reservations,proto3" json:"reservations,omitempty"`
}

func (x *CreateReservations4Request) Reset() {
	*x = CreateReservations4Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_agent_proto_msgTypes[129]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateReservations4Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateReservations4Request) ProtoMessage() {}

func (x *CreateReservations4Request) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_agent_proto_msgTypes[129]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateReservations4Request.ProtoReflect.Descriptor instead.
func (*CreateReservations4Request) Descriptor() ([]byte, []int) {
	return file_dhcp_agent_proto_rawDescGZIP(), []int{129}
}

func (x *CreateReservations4Request) GetSubnetId() uint64 {
	if x != nil {
		return x.SubnetId
	}
	return 0
}

func (x *CreateReservations4Request) GetReservations() []*CreateReservation4Request {
	if x != nil {
		return x.Reservations
	}
	return nil
}

type DeleteSubnets4Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ids []uint64 `protobuf:"varint,1,rep,packed,name=Ids,proto3" json:"Ids,omitempty"`
}

func (x *DeleteSubnets4Request) Reset() {
	*x = DeleteSubnets4Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_agent_proto_msgTypes[130]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteSubnets4Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteSubnets4Request) ProtoMessage() {}

func (x *DeleteSubnets4Request) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_agent_proto_msgTypes[130]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteSubnets4Request.ProtoReflect.Descriptor instead.
func (*DeleteSubnets4Request) Descriptor() ([]byte, []int) {
	return file_dhcp_agent_proto_rawDescGZIP(), []int{130}
}

func (x *DeleteSubnets4Request) GetIds() []uint64 {
	if x != nil {
		return x.Ids
	}
	return nil
}

type DeletePools4Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubnetId uint64                `protobuf:"varint,1,opt,name=subnet_id,json=subnetId,proto3" json:"subnet_id,omitempty"`
	Pools    []*DeletePool4Request `protobuf:"bytes,2,rep,name=pools,proto3" json:"pools,omitempty"`
}

func (x *DeletePools4Request) Reset() {
	*x = DeletePools4Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_agent_proto_msgTypes[131]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeletePools4Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeletePools4Request) ProtoMessage() {}

func (x *DeletePools4Request) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_agent_proto_msgTypes[131]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeletePools4Request.ProtoReflect.Descriptor instead.
func (*DeletePools4Request) Descriptor() ([]byte, []int) {
	return file_dhcp_agent_proto_rawDescGZIP(), []int{131}
}

func (x *DeletePools4Request) GetSubnetId() uint64 {
	if x != nil {
		return x.SubnetId
	}
	return 0
}

func (x *DeletePools4Request) GetPools() []*DeletePool4Request {
	if x != nil {
		return x.Pools
	}
	return nil
}

type DeleteReservedPools4Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubnetId      uint64                        `protobuf:"varint,1,opt,name=subnet_id,json=subnetId,proto3" json:"subnet_id,omitempty"`
	ReservedPools []*DeleteReservedPool4Request `protobuf:"bytes,2,rep,name=reserved_pools,json=reservedPools,proto3" json:"reserved_pools,omitempty"`
}

func (x *DeleteReservedPools4Request) Reset() {
	*x = DeleteReservedPools4Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_agent_proto_msgTypes[132]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteReservedPools4Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteReservedPools4Request) ProtoMessage() {}

func (x *DeleteReservedPools4Request) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_agent_proto_msgTypes[132]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteReservedPools4Request.ProtoReflect.Descriptor instead.
func (*DeleteReservedPools4Request) Descriptor() ([]byte, []int) {
	return file_dhcp_agent_proto_rawDescGZIP(), []int{132}
}

func (x *DeleteReservedPools4Request) GetSubnetId() uint64 {
	if x != nil {
		return x.SubnetId
	}
	return 0
}

func (x *DeleteReservedPools4Request) GetReservedPools() []*DeleteReservedPool4Request {
	if x != nil {
		return x.ReservedPools
	}
	return nil
}

type DeleteReservations4Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubnetId     uint64                       `protobuf:"varint,1,opt,name=subnet_id,json=subnetId,proto3" json:"subnet_id,omitempty"`
	Reservations []*DeleteReservation4Request `protobuf:"bytes,2,rep,name=reservations,proto3" json:"reservations,omitempty"`
}

func (x *DeleteReservations4Request) Reset() {
	*x = DeleteReservations4Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_agent_proto_msgTypes[133]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteReservations4Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteReservations4Request) ProtoMessage() {}

func (x *DeleteReservations4Request) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_agent_proto_msgTypes[133]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteReservations4Request.ProtoReflect.Descriptor instead.
func (*DeleteReservations4Request) Descriptor() ([]byte, []int) {
	return file_dhcp_agent_proto_rawDescGZIP(), []int{133}
}

func (x *DeleteReservations4Request) GetSubnetId() uint64 {
	if x != nil {
		return x.SubnetId
	}
	return 0
}

func (x *DeleteReservations4Request) GetReservations() []*DeleteReservation4Request {
	if x != nil {
		return x.Reservations
	}
	return nil
}

type CreateSubnets6AndPoolsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Subnets         []*CreateSubnet6Request        `protobuf:"bytes,1,rep,name=subnets,proto3" json:"subnets,omitempty"`
	Pools           []*CreatePool6Request          `protobuf:"bytes,2,rep,name=pools,proto3" json:"pools,omitempty"`
	ReservedPools   []*CreateReservedPool6Request  `protobuf:"bytes,3,rep,name=reserved_pools,json=reservedPools,proto3" json:"reserved_pools,omitempty"`
	Reservations    []*CreateReservation6Request   `protobuf:"bytes,4,rep,name=reservations,proto3" json:"reservations,omitempty"`
	PdPools         []*CreatePdPoolRequest         `protobuf:"bytes,5,rep,name=pd_pools,json=pdPools,proto3" json:"pd_pools,omitempty"`
	ReservedPdPools []*CreateReservedPdPoolRequest `protobuf:"bytes,6,rep,name=reserved_pd_pools,json=reservedPdPools,proto3" json:"reserved_pd_pools,omitempty"`
}

func (x *CreateSubnets6AndPoolsRequest) Reset() {
	*x = CreateSubnets6AndPoolsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_agent_proto_msgTypes[134]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateSubnets6AndPoolsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSubnets6AndPoolsRequest) ProtoMessage() {}

func (x *CreateSubnets6AndPoolsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_agent_proto_msgTypes[134]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSubnets6AndPoolsRequest.ProtoReflect.Descriptor instead.
func (*CreateSubnets6AndPoolsRequest) Descriptor() ([]byte, []int) {
	return file_dhcp_agent_proto_rawDescGZIP(), []int{134}
}

func (x *CreateSubnets6AndPoolsRequest) GetSubnets() []*CreateSubnet6Request {
	if x != nil {
		return x.Subnets
	}
	return nil
}

func (x *CreateSubnets6AndPoolsRequest) GetPools() []*CreatePool6Request {
	if x != nil {
		return x.Pools
	}
	return nil
}

func (x *CreateSubnets6AndPoolsRequest) GetReservedPools() []*CreateReservedPool6Request {
	if x != nil {
		return x.ReservedPools
	}
	return nil
}

func (x *CreateSubnets6AndPoolsRequest) GetReservations() []*CreateReservation6Request {
	if x != nil {
		return x.Reservations
	}
	return nil
}

func (x *CreateSubnets6AndPoolsRequest) GetPdPools() []*CreatePdPoolRequest {
	if x != nil {
		return x.PdPools
	}
	return nil
}

func (x *CreateSubnets6AndPoolsRequest) GetReservedPdPools() []*CreateReservedPdPoolRequest {
	if x != nil {
		return x.ReservedPdPools
	}
	return nil
}

type CreatePools6Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubnetId uint64                `protobuf:"varint,1,opt,name=subnet_id,json=subnetId,proto3" json:"subnet_id,omitempty"`
	Pools    []*CreatePool6Request `protobuf:"bytes,2,rep,name=pools,proto3" json:"pools,omitempty"`
}

func (x *CreatePools6Request) Reset() {
	*x = CreatePools6Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_agent_proto_msgTypes[135]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreatePools6Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePools6Request) ProtoMessage() {}

func (x *CreatePools6Request) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_agent_proto_msgTypes[135]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePools6Request.ProtoReflect.Descriptor instead.
func (*CreatePools6Request) Descriptor() ([]byte, []int) {
	return file_dhcp_agent_proto_rawDescGZIP(), []int{135}
}

func (x *CreatePools6Request) GetSubnetId() uint64 {
	if x != nil {
		return x.SubnetId
	}
	return 0
}

func (x *CreatePools6Request) GetPools() []*CreatePool6Request {
	if x != nil {
		return x.Pools
	}
	return nil
}

type CreateReservedPools6Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubnetId      uint64                        `protobuf:"varint,1,opt,name=subnet_id,json=subnetId,proto3" json:"subnet_id,omitempty"`
	ReservedPools []*CreateReservedPool6Request `protobuf:"bytes,2,rep,name=reserved_pools,json=reservedPools,proto3" json:"reserved_pools,omitempty"`
}

func (x *CreateReservedPools6Request) Reset() {
	*x = CreateReservedPools6Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_agent_proto_msgTypes[136]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateReservedPools6Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateReservedPools6Request) ProtoMessage() {}

func (x *CreateReservedPools6Request) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_agent_proto_msgTypes[136]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateReservedPools6Request.ProtoReflect.Descriptor instead.
func (*CreateReservedPools6Request) Descriptor() ([]byte, []int) {
	return file_dhcp_agent_proto_rawDescGZIP(), []int{136}
}

func (x *CreateReservedPools6Request) GetSubnetId() uint64 {
	if x != nil {
		return x.SubnetId
	}
	return 0
}

func (x *CreateReservedPools6Request) GetReservedPools() []*CreateReservedPool6Request {
	if x != nil {
		return x.ReservedPools
	}
	return nil
}

type CreateReservations6Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubnetId     uint64                       `protobuf:"varint,1,opt,name=subnet_id,json=subnetId,proto3" json:"subnet_id,omitempty"`
	Reservations []*CreateReservation6Request `protobuf:"bytes,2,rep,name=reservations,proto3" json:"reservations,omitempty"`
}

func (x *CreateReservations6Request) Reset() {
	*x = CreateReservations6Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_agent_proto_msgTypes[137]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateReservations6Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateReservations6Request) ProtoMessage() {}

func (x *CreateReservations6Request) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_agent_proto_msgTypes[137]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateReservations6Request.ProtoReflect.Descriptor instead.
func (*CreateReservations6Request) Descriptor() ([]byte, []int) {
	return file_dhcp_agent_proto_rawDescGZIP(), []int{137}
}

func (x *CreateReservations6Request) GetSubnetId() uint64 {
	if x != nil {
		return x.SubnetId
	}
	return 0
}

func (x *CreateReservations6Request) GetReservations() []*CreateReservation6Request {
	if x != nil {
		return x.Reservations
	}
	return nil
}

type CreatePdPoolsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubnetId uint64                 `protobuf:"varint,1,opt,name=subnet_id,json=subnetId,proto3" json:"subnet_id,omitempty"`
	PdPools  []*CreatePdPoolRequest `protobuf:"bytes,2,rep,name=pd_pools,json=pdPools,proto3" json:"pd_pools,omitempty"`
}

func (x *CreatePdPoolsRequest) Reset() {
	*x = CreatePdPoolsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_agent_proto_msgTypes[138]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreatePdPoolsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePdPoolsRequest) ProtoMessage() {}

func (x *CreatePdPoolsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_agent_proto_msgTypes[138]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePdPoolsRequest.ProtoReflect.Descriptor instead.
func (*CreatePdPoolsRequest) Descriptor() ([]byte, []int) {
	return file_dhcp_agent_proto_rawDescGZIP(), []int{138}
}

func (x *CreatePdPoolsRequest) GetSubnetId() uint64 {
	if x != nil {
		return x.SubnetId
	}
	return 0
}

func (x *CreatePdPoolsRequest) GetPdPools() []*CreatePdPoolRequest {
	if x != nil {
		return x.PdPools
	}
	return nil
}

type CreateReservedPdPoolsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubnetId        uint64                         `protobuf:"varint,1,opt,name=subnet_id,json=subnetId,proto3" json:"subnet_id,omitempty"`
	ReservedPdPools []*CreateReservedPdPoolRequest `protobuf:"bytes,2,rep,name=reserved_pd_pools,json=reservedPdPools,proto3" json:"reserved_pd_pools,omitempty"`
}

func (x *CreateReservedPdPoolsRequest) Reset() {
	*x = CreateReservedPdPoolsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_agent_proto_msgTypes[139]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateReservedPdPoolsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateReservedPdPoolsRequest) ProtoMessage() {}

func (x *CreateReservedPdPoolsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_agent_proto_msgTypes[139]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateReservedPdPoolsRequest.ProtoReflect.Descriptor instead.
func (*CreateReservedPdPoolsRequest) Descriptor() ([]byte, []int) {
	return file_dhcp_agent_proto_rawDescGZIP(), []int{139}
}

func (x *CreateReservedPdPoolsRequest) GetSubnetId() uint64 {
	if x != nil {
		return x.SubnetId
	}
	return 0
}

func (x *CreateReservedPdPoolsRequest) GetReservedPdPools() []*CreateReservedPdPoolRequest {
	if x != nil {
		return x.ReservedPdPools
	}
	return nil
}

type DeleteSubnets6Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ids []uint64 `protobuf:"varint,1,rep,packed,name=Ids,proto3" json:"Ids,omitempty"`
}

func (x *DeleteSubnets6Request) Reset() {
	*x = DeleteSubnets6Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_agent_proto_msgTypes[140]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteSubnets6Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteSubnets6Request) ProtoMessage() {}

func (x *DeleteSubnets6Request) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_agent_proto_msgTypes[140]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteSubnets6Request.ProtoReflect.Descriptor instead.
func (*DeleteSubnets6Request) Descriptor() ([]byte, []int) {
	return file_dhcp_agent_proto_rawDescGZIP(), []int{140}
}

func (x *DeleteSubnets6Request) GetIds() []uint64 {
	if x != nil {
		return x.Ids
	}
	return nil
}

type DeletePools6Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubnetId uint64                `protobuf:"varint,1,opt,name=subnet_id,json=subnetId,proto3" json:"subnet_id,omitempty"`
	Pools    []*DeletePool6Request `protobuf:"bytes,2,rep,name=pools,proto3" json:"pools,omitempty"`
}

func (x *DeletePools6Request) Reset() {
	*x = DeletePools6Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_agent_proto_msgTypes[141]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeletePools6Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeletePools6Request) ProtoMessage() {}

func (x *DeletePools6Request) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_agent_proto_msgTypes[141]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeletePools6Request.ProtoReflect.Descriptor instead.
func (*DeletePools6Request) Descriptor() ([]byte, []int) {
	return file_dhcp_agent_proto_rawDescGZIP(), []int{141}
}

func (x *DeletePools6Request) GetSubnetId() uint64 {
	if x != nil {
		return x.SubnetId
	}
	return 0
}

func (x *DeletePools6Request) GetPools() []*DeletePool6Request {
	if x != nil {
		return x.Pools
	}
	return nil
}

type DeleteReservedPools6Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubnetId      uint64                        `protobuf:"varint,1,opt,name=subnet_id,json=subnetId,proto3" json:"subnet_id,omitempty"`
	ReservedPools []*DeleteReservedPool6Request `protobuf:"bytes,2,rep,name=reserved_pools,json=reservedPools,proto3" json:"reserved_pools,omitempty"`
}

func (x *DeleteReservedPools6Request) Reset() {
	*x = DeleteReservedPools6Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_agent_proto_msgTypes[142]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteReservedPools6Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteReservedPools6Request) ProtoMessage() {}

func (x *DeleteReservedPools6Request) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_agent_proto_msgTypes[142]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteReservedPools6Request.ProtoReflect.Descriptor instead.
func (*DeleteReservedPools6Request) Descriptor() ([]byte, []int) {
	return file_dhcp_agent_proto_rawDescGZIP(), []int{142}
}

func (x *DeleteReservedPools6Request) GetSubnetId() uint64 {
	if x != nil {
		return x.SubnetId
	}
	return 0
}

func (x *DeleteReservedPools6Request) GetReservedPools() []*DeleteReservedPool6Request {
	if x != nil {
		return x.ReservedPools
	}
	return nil
}

type DeletePdPoolsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubnetId uint64                 `protobuf:"varint,1,opt,name=subnet_id,json=subnetId,proto3" json:"subnet_id,omitempty"`
	PdPools  []*DeletePdPoolRequest `protobuf:"bytes,2,rep,name=pd_pools,json=pdPools,proto3" json:"pd_pools,omitempty"`
}

func (x *DeletePdPoolsRequest) Reset() {
	*x = DeletePdPoolsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_agent_proto_msgTypes[143]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeletePdPoolsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeletePdPoolsRequest) ProtoMessage() {}

func (x *DeletePdPoolsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_agent_proto_msgTypes[143]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeletePdPoolsRequest.ProtoReflect.Descriptor instead.
func (*DeletePdPoolsRequest) Descriptor() ([]byte, []int) {
	return file_dhcp_agent_proto_rawDescGZIP(), []int{143}
}

func (x *DeletePdPoolsRequest) GetSubnetId() uint64 {
	if x != nil {
		return x.SubnetId
	}
	return 0
}

func (x *DeletePdPoolsRequest) GetPdPools() []*DeletePdPoolRequest {
	if x != nil {
		return x.PdPools
	}
	return nil
}

type DeleteReservedPdPoolsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubnetId        uint64                         `protobuf:"varint,1,opt,name=subnet_id,json=subnetId,proto3" json:"subnet_id,omitempty"`
	ReservedPdPools []*DeleteReservedPdPoolRequest `protobuf:"bytes,2,rep,name=reserved_pd_pools,json=reservedPdPools,proto3" json:"reserved_pd_pools,omitempty"`
}

func (x *DeleteReservedPdPoolsRequest) Reset() {
	*x = DeleteReservedPdPoolsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_agent_proto_msgTypes[144]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteReservedPdPoolsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteReservedPdPoolsRequest) ProtoMessage() {}

func (x *DeleteReservedPdPoolsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_agent_proto_msgTypes[144]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteReservedPdPoolsRequest.ProtoReflect.Descriptor instead.
func (*DeleteReservedPdPoolsRequest) Descriptor() ([]byte, []int) {
	return file_dhcp_agent_proto_rawDescGZIP(), []int{144}
}

func (x *DeleteReservedPdPoolsRequest) GetSubnetId() uint64 {
	if x != nil {
		return x.SubnetId
	}
	return 0
}

func (x *DeleteReservedPdPoolsRequest) GetReservedPdPools() []*DeleteReservedPdPoolRequest {
	if x != nil {
		return x.ReservedPdPools
	}
	return nil
}

type DeleteReservations6Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubnetId     uint64                       `protobuf:"varint,1,opt,name=subnet_id,json=subnetId,proto3" json:"subnet_id,omitempty"`
	Reservations []*DeleteReservation6Request `protobuf:"bytes,2,rep,name=reservations,proto3" json:"reservations,omitempty"`
}

func (x *DeleteReservations6Request) Reset() {
	*x = DeleteReservations6Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_agent_proto_msgTypes[145]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteReservations6Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteReservations6Request) ProtoMessage() {}

func (x *DeleteReservations6Request) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_agent_proto_msgTypes[145]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteReservations6Request.ProtoReflect.Descriptor instead.
func (*DeleteReservations6Request) Descriptor() ([]byte, []int) {
	return file_dhcp_agent_proto_rawDescGZIP(), []int{145}
}

func (x *DeleteReservations6Request) GetSubnetId() uint64 {
	if x != nil {
		return x.SubnetId
	}
	return 0
}

func (x *DeleteReservations6Request) GetReservations() []*DeleteReservation6Request {
	if x != nil {
		return x.Reservations
	}
	return nil
}

type CreateSharedNetworks4Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SharedNetworks []*CreateSharedNetwork4Request `protobuf:"bytes,1,rep,name=shared_networks,json=sharedNetworks,proto3" json:"shared_networks,omitempty"`
}

func (x *CreateSharedNetworks4Request) Reset() {
	*x = CreateSharedNetworks4Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_agent_proto_msgTypes[146]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateSharedNetworks4Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSharedNetworks4Request) ProtoMessage() {}

func (x *CreateSharedNetworks4Request) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_agent_proto_msgTypes[146]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSharedNetworks4Request.ProtoReflect.Descriptor instead.
func (*CreateSharedNetworks4Request) Descriptor() ([]byte, []int) {
	return file_dhcp_agent_proto_rawDescGZIP(), []int{146}
}

func (x *CreateSharedNetworks4Request) GetSharedNetworks() []*CreateSharedNetwork4Request {
	if x != nil {
		return x.SharedNetworks
	}
	return nil
}

type CreateSharedNetwork4Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name      string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	SubnetIds []uint64 `protobuf:"varint,2,rep,packed,name=subnet_ids,json=subnetIds,proto3" json:"subnet_ids,omitempty"`
}

func (x *CreateSharedNetwork4Request) Reset() {
	*x = CreateSharedNetwork4Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_agent_proto_msgTypes[147]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateSharedNetwork4Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSharedNetwork4Request) ProtoMessage() {}

func (x *CreateSharedNetwork4Request) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_agent_proto_msgTypes[147]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSharedNetwork4Request.ProtoReflect.Descriptor instead.
func (*CreateSharedNetwork4Request) Descriptor() ([]byte, []int) {
	return file_dhcp_agent_proto_rawDescGZIP(), []int{147}
}

func (x *CreateSharedNetwork4Request) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateSharedNetwork4Request) GetSubnetIds() []uint64 {
	if x != nil {
		return x.SubnetIds
	}
	return nil
}

type DeleteSharedNetworks4Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Names []string `protobuf:"bytes,1,rep,name=names,proto3" json:"names,omitempty"`
}

func (x *DeleteSharedNetworks4Request) Reset() {
	*x = DeleteSharedNetworks4Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_agent_proto_msgTypes[148]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteSharedNetworks4Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteSharedNetworks4Request) ProtoMessage() {}

func (x *DeleteSharedNetworks4Request) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_agent_proto_msgTypes[148]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteSharedNetworks4Request.ProtoReflect.Descriptor instead.
func (*DeleteSharedNetworks4Request) Descriptor() ([]byte, []int) {
	return file_dhcp_agent_proto_rawDescGZIP(), []int{148}
}

func (x *DeleteSharedNetworks4Request) GetNames() []string {
	if x != nil {
		return x.Names
	}
	return nil
}

type DeleteSharedNetwork4Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *DeleteSharedNetwork4Request) Reset() {
	*x = DeleteSharedNetwork4Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_agent_proto_msgTypes[149]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteSharedNetwork4Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteSharedNetwork4Request) ProtoMessage() {}

func (x *DeleteSharedNetwork4Request) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_agent_proto_msgTypes[149]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteSharedNetwork4Request.ProtoReflect.Descriptor instead.
func (*DeleteSharedNetwork4Request) Descriptor() ([]byte, []int) {
	return file_dhcp_agent_proto_rawDescGZIP(), []int{149}
}

func (x *DeleteSharedNetwork4Request) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type UpdateSharedNetwork4Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Old *DeleteSharedNetwork4Request `protobuf:"bytes,1,opt,name=old,proto3" json:"old,omitempty"`
	New *CreateSharedNetwork4Request `protobuf:"bytes,2,opt,name=new,proto3" json:"new,omitempty"`
}

func (x *UpdateSharedNetwork4Request) Reset() {
	*x = UpdateSharedNetwork4Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_agent_proto_msgTypes[150]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateSharedNetwork4Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSharedNetwork4Request) ProtoMessage() {}

func (x *UpdateSharedNetwork4Request) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_agent_proto_msgTypes[150]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSharedNetwork4Request.ProtoReflect.Descriptor instead.
func (*UpdateSharedNetwork4Request) Descriptor() ([]byte, []int) {
	return file_dhcp_agent_proto_rawDescGZIP(), []int{150}
}

func (x *UpdateSharedNetwork4Request) GetOld() *DeleteSharedNetwork4Request {
	if x != nil {
		return x.Old
	}
	return nil
}

func (x *UpdateSharedNetwork4Request) GetNew() *CreateSharedNetwork4Request {
	if x != nil {
		return x.New
	}
	return nil
}

type DeleteLease4Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubnetId uint64 `protobuf:"varint,1,opt,name=subnet_id,json=subnetId,proto3" json:"subnet_id,omitempty"`
	Address  string `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
}

func (x *DeleteLease4Request) Reset() {
	*x = DeleteLease4Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_agent_proto_msgTypes[151]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteLease4Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteLease4Request) ProtoMessage() {}

func (x *DeleteLease4Request) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_agent_proto_msgTypes[151]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteLease4Request.ProtoReflect.Descriptor instead.
func (*DeleteLease4Request) Descriptor() ([]byte, []int) {
	return file_dhcp_agent_proto_rawDescGZIP(), []int{151}
}

func (x *DeleteLease4Request) GetSubnetId() uint64 {
	if x != nil {
		return x.SubnetId
	}
	return 0
}

func (x *DeleteLease4Request) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

type DeleteLeases4Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubnetId  uint64   `protobuf:"varint,1,opt,name=subnet_id,json=subnetId,proto3" json:"subnet_id,omitempty"`
	Addresses []string `protobuf:"bytes,2,rep,name=addresses,proto3" json:"addresses,omitempty"`
}

func (x *DeleteLeases4Request) Reset() {
	*x = DeleteLeases4Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_agent_proto_msgTypes[152]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteLeases4Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteLeases4Request) ProtoMessage() {}

func (x *DeleteLeases4Request) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_agent_proto_msgTypes[152]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteLeases4Request.ProtoReflect.Descriptor instead.
func (*DeleteLeases4Request) Descriptor() ([]byte, []int) {
	return file_dhcp_agent_proto_rawDescGZIP(), []int{152}
}

func (x *DeleteLeases4Request) GetSubnetId() uint64 {
	if x != nil {
		return x.SubnetId
	}
	return 0
}

func (x *DeleteLeases4Request) GetAddresses() []string {
	if x != nil {
		return x.Addresses
	}
	return nil
}

type DeleteLease6Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubnetId  uint64 `protobuf:"varint,1,opt,name=subnet_id,json=subnetId,proto3" json:"subnet_id,omitempty"`
	LeaseType string `protobuf:"bytes,2,opt,name=lease_type,json=leaseType,proto3" json:"lease_type,omitempty"`
	Address   string `protobuf:"bytes,3,opt,name=address,proto3" json:"address,omitempty"`
}

func (x *DeleteLease6Request) Reset() {
	*x = DeleteLease6Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_agent_proto_msgTypes[153]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteLease6Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteLease6Request) ProtoMessage() {}

func (x *DeleteLease6Request) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_agent_proto_msgTypes[153]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteLease6Request.ProtoReflect.Descriptor instead.
func (*DeleteLease6Request) Descriptor() ([]byte, []int) {
	return file_dhcp_agent_proto_rawDescGZIP(), []int{153}
}

func (x *DeleteLease6Request) GetSubnetId() uint64 {
	if x != nil {
		return x.SubnetId
	}
	return 0
}

func (x *DeleteLease6Request) GetLeaseType() string {
	if x != nil {
		return x.LeaseType
	}
	return ""
}

func (x *DeleteLease6Request) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

type DeleteLeases6Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubnetId  uint64   `protobuf:"varint,1,opt,name=subnet_id,json=subnetId,proto3" json:"subnet_id,omitempty"`
	LeaseType string   `protobuf:"bytes,2,opt,name=lease_type,json=leaseType,proto3" json:"lease_type,omitempty"`
	Addresses []string `protobuf:"bytes,3,rep,name=addresses,proto3" json:"addresses,omitempty"`
}

func (x *DeleteLeases6Request) Reset() {
	*x = DeleteLeases6Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_agent_proto_msgTypes[154]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteLeases6Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteLeases6Request) ProtoMessage() {}

func (x *DeleteLeases6Request) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_agent_proto_msgTypes[154]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteLeases6Request.ProtoReflect.Descriptor instead.
func (*DeleteLeases6Request) Descriptor() ([]byte, []int) {
	return file_dhcp_agent_proto_rawDescGZIP(), []int{154}
}

func (x *DeleteLeases6Request) GetSubnetId() uint64 {
	if x != nil {
		return x.SubnetId
	}
	return 0
}

func (x *DeleteLeases6Request) GetLeaseType() string {
	if x != nil {
		return x.LeaseType
	}
	return ""
}

func (x *DeleteLeases6Request) GetAddresses() []string {
	if x != nil {
		return x.Addresses
	}
	return nil
}

type DeleteLeaseResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Succeed bool `protobuf:"varint,1,opt,name=succeed,proto3" json:"succeed,omitempty"`
}

func (x *DeleteLeaseResponse) Reset() {
	*x = DeleteLeaseResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_agent_proto_msgTypes[155]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteLeaseResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteLeaseResponse) ProtoMessage() {}

func (x *DeleteLeaseResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_agent_proto_msgTypes[155]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteLeaseResponse.ProtoReflect.Descriptor instead.
func (*DeleteLeaseResponse) Descriptor() ([]byte, []int) {
	return file_dhcp_agent_proto_rawDescGZIP(), []int{155}
}

func (x *DeleteLeaseResponse) GetSucceed() bool {
	if x != nil {
		return x.Succeed
	}
	return false
}

var File_dhcp_agent_proto protoreflect.FileDescriptor

var file_dhcp_agent_proto_rawDesc = []byte{
	0x0a, 0x10, 0x64, 0x68, 0x63, 0x70, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x05, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x15, 0x0a, 0x13, 0x47, 0x65, 0x74,
	0x44, 0x48, 0x43, 0x50, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x22, 0x5c, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x44, 0x48, 0x43, 0x50, 0x4e, 0x6f, 0x64, 0x65, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63,
	0x65, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65,
	0x65, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x70, 0x76, 0x34, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x05, 0x69, 0x70, 0x76, 0x34, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x70, 0x76, 0x36,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x69, 0x70, 0x76, 0x36, 0x73, 0x22, 0x4a,
	0x0a, 0x0c, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xfb, 0x05, 0x0a, 0x14, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x34, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x5f, 0x6c, 0x69, 0x66, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0d, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x4c, 0x69, 0x66, 0x65, 0x74, 0x69,
	0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x6d, 0x61, 0x78, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f,
	0x6c, 0x69, 0x66, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10,
	0x6d, 0x61, 0x78, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x4c, 0x69, 0x66, 0x65, 0x74, 0x69, 0x6d, 0x65,
	0x12, 0x2c, 0x0a, 0x12, 0x6d, 0x69, 0x6e, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x6c, 0x69,
	0x66, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x6d, 0x69,
	0x6e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x4c, 0x69, 0x66, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x1d,
	0x0a, 0x0a, 0x72, 0x65, 0x6e, 0x65, 0x77, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x09, 0x72, 0x65, 0x6e, 0x65, 0x77, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a,
	0x0b, 0x72, 0x65, 0x62, 0x69, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0a, 0x72, 0x65, 0x62, 0x69, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3d,
	0x0a, 0x1b, 0x77, 0x68, 0x69, 0x74, 0x65, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x63,
	0x6c, 0x61, 0x73, 0x73, 0x5f, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x18, 0x77, 0x68, 0x69, 0x74, 0x65, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x43, 0x6c, 0x61, 0x73, 0x73, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x12, 0x30, 0x0a,
	0x14, 0x77, 0x68, 0x69, 0x74, 0x65, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6c,
	0x61, 0x73, 0x73, 0x65, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x09, 0x52, 0x12, 0x77, 0x68, 0x69,
	0x74, 0x65, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x73, 0x12,
	0x3d, 0x0a, 0x1b, 0x62, 0x6c, 0x61, 0x63, 0x6b, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f,
	0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x18, 0x62, 0x6c, 0x61, 0x63, 0x6b, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x12, 0x30,
	0x0a, 0x14, 0x62, 0x6c, 0x61, 0x63, 0x6b, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x63,
	0x6c, 0x61, 0x73, 0x73, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x09, 0x52, 0x12, 0x62, 0x6c,
	0x61, 0x63, 0x6b, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x73,
	0x12, 0x33, 0x0a, 0x16, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f,
	0x63, 0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x13, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x43, 0x69, 0x72, 0x63,
	0x75, 0x69, 0x74, 0x49, 0x64, 0x12, 0x31, 0x0a, 0x15, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x5f, 0x61,
	0x67, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x41, 0x67, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x15, 0x72, 0x65, 0x6c, 0x61,
	0x79, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65,
	0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x09, 0x52, 0x13, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x41, 0x67,
	0x65, 0x6e, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0x1d, 0x0a, 0x0a,
	0x69, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x69, 0x66, 0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6e,
	0x65, 0x78, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x6e, 0x65, 0x78, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x3a, 0x0a, 0x0e,
	0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x11,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x75, 0x62,
	0x6e, 0x65, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x73, 0x75, 0x62, 0x6e, 0x65,
	0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x26, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x34, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64,
	0x22, 0xfb, 0x05, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x75, 0x62, 0x6e, 0x65,
	0x74, 0x34, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x75, 0x62,
	0x6e, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x75, 0x62, 0x6e, 0x65,
	0x74, 0x12, 0x25, 0x0a, 0x0e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x6c, 0x69, 0x66, 0x65, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x4c, 0x69, 0x66, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x6d, 0x61, 0x78, 0x5f,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x6c, 0x69, 0x66, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x6d, 0x61, 0x78, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x4c, 0x69,
	0x66, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x6d, 0x69, 0x6e, 0x5f, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x5f, 0x6c, 0x69, 0x66, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x10, 0x6d, 0x69, 0x6e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x4c, 0x69, 0x66, 0x65,
	0x74, 0x69, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x6e, 0x65, 0x77, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x72, 0x65, 0x6e, 0x65, 0x77, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x62, 0x69, 0x6e, 0x64, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x72, 0x65, 0x62, 0x69, 0x6e, 0x64,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x3d, 0x0a, 0x1b, 0x77, 0x68, 0x69, 0x74, 0x65, 0x5f, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x73, 0x74, 0x72, 0x61, 0x74,
	0x65, 0x67, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x18, 0x77, 0x68, 0x69, 0x74, 0x65,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x53, 0x74, 0x72, 0x61, 0x74,
	0x65, 0x67, 0x79, 0x12, 0x30, 0x0a, 0x14, 0x77, 0x68, 0x69, 0x74, 0x65, 0x5f, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x12, 0x77, 0x68, 0x69, 0x74, 0x65, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x6c,
	0x61, 0x73, 0x73, 0x65, 0x73, 0x12, 0x3d, 0x0a, 0x1b, 0x62, 0x6c, 0x61, 0x63, 0x6b, 0x5f, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x73, 0x74, 0x72, 0x61,
	0x74, 0x65, 0x67, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x18, 0x62, 0x6c, 0x61, 0x63,
	0x6b, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x53, 0x74, 0x72, 0x61,
	0x74, 0x65, 0x67, 0x79, 0x12, 0x30, 0x0a, 0x14, 0x62, 0x6c, 0x61, 0x63, 0x6b, 0x5f, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x12, 0x62, 0x6c, 0x61, 0x63, 0x6b, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43,
	0x6c, 0x61, 0x73, 0x73, 0x65, 0x73, 0x12, 0x33, 0x0a, 0x16, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x5f,
	0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x41, 0x67, 0x65,
	0x6e, 0x74, 0x43, 0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x49, 0x64, 0x12, 0x31, 0x0a, 0x15, 0x72,
	0x65, 0x6c, 0x61, 0x79, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x6d, 0x6f, 0x74,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x72, 0x65, 0x6c, 0x61,
	0x79, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x49, 0x64, 0x12, 0x32,
	0x0a, 0x15, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x09, 0x52, 0x13, 0x72,
	0x65, 0x6c, 0x61, 0x79, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x65, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x66, 0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6e, 0x65, 0x78, 0x74, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x12, 0x3a, 0x0a, 0x0e, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x5f, 0x6f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x11, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x0d, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xa9,
	0x07, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x36,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x75, 0x62, 0x6e, 0x65,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x12,
	0x25, 0x0a, 0x0e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x6c, 0x69, 0x66, 0x65, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x4c, 0x69,
	0x66, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x6d, 0x61, 0x78, 0x5f, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x5f, 0x6c, 0x69, 0x66, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x10, 0x6d, 0x61, 0x78, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x4c, 0x69, 0x66, 0x65,
	0x74, 0x69, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x6d, 0x69, 0x6e, 0x5f, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x5f, 0x6c, 0x69, 0x66, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x10, 0x6d, 0x69, 0x6e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x4c, 0x69, 0x66, 0x65, 0x74, 0x69,
	0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x6e, 0x65, 0x77, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x72, 0x65, 0x6e, 0x65, 0x77, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x62, 0x69, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x72, 0x65, 0x62, 0x69, 0x6e, 0x64, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x3d, 0x0a, 0x1b, 0x77, 0x68, 0x69, 0x74, 0x65, 0x5f, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67,
	0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x18, 0x77, 0x68, 0x69, 0x74, 0x65, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67,
	0x79, 0x12, 0x30, 0x0a, 0x14, 0x77, 0x68, 0x69, 0x74, 0x65, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x12, 0x77, 0x68, 0x69, 0x74, 0x65, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x6c, 0x61, 0x73,
	0x73, 0x65, 0x73, 0x12, 0x3d, 0x0a, 0x1b, 0x62, 0x6c, 0x61, 0x63, 0x6b, 0x5f, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65,
	0x67, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x18, 0x62, 0x6c, 0x61, 0x63, 0x6b, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65,
	0x67, 0x79, 0x12, 0x30, 0x0a, 0x14, 0x62, 0x6c, 0x61, 0x63, 0x6b, 0x5f, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x12, 0x62, 0x6c, 0x61, 0x63, 0x6b, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x6c, 0x61,
	0x73, 0x73, 0x65, 0x73, 0x12, 0x32, 0x0a, 0x15, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x5f, 0x61, 0x67,
	0x65, 0x6e, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x0c, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x13, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0x37, 0x0a, 0x18, 0x72, 0x65, 0x6c, 0x61,
	0x79, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x72, 0x65, 0x6c, 0x61,
	0x79, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x49,
	0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x66, 0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x21, 0x0a, 0x0c, 0x72, 0x61, 0x70, 0x69, 0x64, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x72, 0x61, 0x70, 0x69, 0x64, 0x43, 0x6f, 0x6d,
	0x6d, 0x69, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x5f, 0x65, 0x75, 0x69, 0x36, 0x34,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x75, 0x73, 0x65, 0x45, 0x75, 0x69, 0x36, 0x34,
	0x12, 0x21, 0x0a, 0x0c, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x2d, 0x0a, 0x12, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64,
	0x5f, 0x6c, 0x69, 0x66, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x11, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x4c, 0x69, 0x66, 0x65, 0x74, 0x69,
	0x6d, 0x65, 0x12, 0x34, 0x0a, 0x16, 0x6d, 0x69, 0x6e, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72,
	0x72, 0x65, 0x64, 0x5f, 0x6c, 0x69, 0x66, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x13, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x14, 0x6d, 0x69, 0x6e, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64,
	0x4c, 0x69, 0x66, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x34, 0x0a, 0x16, 0x6d, 0x61, 0x78, 0x5f,
	0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x5f, 0x6c, 0x69, 0x66, 0x65, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x6d, 0x61, 0x78, 0x50, 0x72, 0x65,
	0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x4c, 0x69, 0x66, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x3a,
	0x0a, 0x0e, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x15, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53,
	0x75, 0x62, 0x6e, 0x65, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x73, 0x75, 0x62,
	0x6e, 0x65, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x26, 0x0a, 0x14, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x36, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02,
	0x69, 0x64, 0x22, 0xa9, 0x07, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x75, 0x62,
	0x6e, 0x65, 0x74, 0x36, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x75, 0x62, 0x6e, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x75, 0x62,
	0x6e, 0x65, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x6c, 0x69, 0x66,
	0x65, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x4c, 0x69, 0x66, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x6d, 0x61,
	0x78, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x6c, 0x69, 0x66, 0x65, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x6d, 0x61, 0x78, 0x56, 0x61, 0x6c, 0x69, 0x64,
	0x4c, 0x69, 0x66, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x6d, 0x69, 0x6e, 0x5f,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x6c, 0x69, 0x66, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x6d, 0x69, 0x6e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x4c, 0x69,
	0x66, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x6e, 0x65, 0x77, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x72, 0x65, 0x6e, 0x65,
	0x77, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x62, 0x69, 0x6e, 0x64, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x72, 0x65, 0x62, 0x69,
	0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3d, 0x0a, 0x1b, 0x77, 0x68, 0x69, 0x74, 0x65, 0x5f,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x73, 0x74, 0x72,
	0x61, 0x74, 0x65, 0x67, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x18, 0x77, 0x68, 0x69,
	0x74, 0x65, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x53, 0x74, 0x72,
	0x61, 0x74, 0x65, 0x67, 0x79, 0x12, 0x30, 0x0a, 0x14, 0x77, 0x68, 0x69, 0x74, 0x65, 0x5f, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x73, 0x18, 0x09, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x12, 0x77, 0x68, 0x69, 0x74, 0x65, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x43, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x73, 0x12, 0x3d, 0x0a, 0x1b, 0x62, 0x6c, 0x61, 0x63, 0x6b,
	0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x73, 0x74,
	0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x18, 0x62, 0x6c,
	0x61, 0x63, 0x6b, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x53, 0x74,
	0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x12, 0x30, 0x0a, 0x14, 0x62, 0x6c, 0x61, 0x63, 0x6b, 0x5f,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x73, 0x18, 0x0b,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x12, 0x62, 0x6c, 0x61, 0x63, 0x6b, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x73, 0x12, 0x32, 0x0a, 0x15, 0x72, 0x65, 0x6c, 0x61,
	0x79, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65,
	0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x09, 0x52, 0x13, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x41, 0x67,
	0x65, 0x6e, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0x37, 0x0a, 0x18,
	0x72, 0x65, 0x6c, 0x61, 0x79, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15,
	0x72, 0x65, 0x6c, 0x61, 0x79, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x66, 0x61, 0x63, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x61, 0x70, 0x69, 0x64, 0x5f, 0x63, 0x6f,
	0x6d, 0x6d, 0x69, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x72, 0x61, 0x70, 0x69,
	0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x5f, 0x65,
	0x75, 0x69, 0x36, 0x34, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x75, 0x73, 0x65, 0x45,
	0x75, 0x69, 0x36, 0x34, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x2d, 0x0a, 0x12, 0x70, 0x72, 0x65, 0x66, 0x65,
	0x72, 0x72, 0x65, 0x64, 0x5f, 0x6c, 0x69, 0x66, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x11, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x4c, 0x69,
	0x66, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x34, 0x0a, 0x16, 0x6d, 0x69, 0x6e, 0x5f, 0x70, 0x72,
	0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x5f, 0x6c, 0x69, 0x66, 0x65, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x13, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x6d, 0x69, 0x6e, 0x50, 0x72, 0x65, 0x66, 0x65,
	0x72, 0x72, 0x65, 0x64, 0x4c, 0x69, 0x66, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x34, 0x0a, 0x16,
	0x6d, 0x61, 0x78, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x5f, 0x6c, 0x69,
	0x66, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x6d, 0x61,
	0x78, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x4c, 0x69, 0x66, 0x65, 0x74, 0x69,
	0x6d, 0x65, 0x12, 0x3a, 0x0a, 0x0e, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x5f, 0x6f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x15, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x0d, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x77,
	0x0a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x34, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x49,
	0x64, 0x12, 0x23, 0x0a, 0x0d, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x6e, 0x64, 0x5f, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x6e, 0x64,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x77, 0x0a, 0x12, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x34, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a,
	0x09, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x08, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x62, 0x65,
	0x67, 0x69, 0x6e, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x1f, 0x0a, 0x0b, 0x65, 0x6e, 0x64, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x6e, 0x64, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x22, 0x7f, 0x0a, 0x1a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x64, 0x50, 0x6f, 0x6f, 0x6c, 0x34, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b,
	0x0a, 0x09, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x08, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x62,
	0x65, 0x67, 0x69, 0x6e, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x6e, 0x64, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x6e, 0x64, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x22, 0x7f, 0x0a, 0x1a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x64, 0x50, 0x6f, 0x6f, 0x6c, 0x34, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1b, 0x0a, 0x09, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x08, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d,
	0x62, 0x65, 0x67, 0x69, 0x6e, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x6e, 0x64, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x6e, 0x64, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x22, 0x77, 0x0a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x6f, 0x6c,
	0x36, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x75, 0x62, 0x6e,
	0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x73, 0x75, 0x62,
	0x6e, 0x65, 0x74, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x5f, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x62, 0x65,
	0x67, 0x69, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x6e,
	0x64, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x65, 0x6e, 0x64, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x77, 0x0a, 0x12, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x36, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x49, 0x64, 0x12, 0x23,
	0x0a, 0x0d, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x6e, 0x64, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x6e, 0x64, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x22, 0x7f, 0x0a, 0x1a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x50, 0x6f, 0x6f, 0x6c, 0x36, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x49, 0x64, 0x12,
	0x23, 0x0a, 0x0d, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x6e, 0x64, 0x5f, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x6e, 0x64, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x7f, 0x0a, 0x1a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52,
	0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x50, 0x6f, 0x6f, 0x6c, 0x36, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x49, 0x64,
	0x12, 0x23, 0x0a, 0x0d, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x6e, 0x64, 0x5f, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x6e, 0x64, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x92, 0x01, 0x0a, 0x19, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x34, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x49,
	0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x68, 0x77, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x68, 0x77, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x1a, 0x0a, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a,
	0x69, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x69, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x92, 0x01, 0x0a, 0x19,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x34, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x75, 0x62,
	0x6e, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x73, 0x75,
	0x62, 0x6e, 0x65, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x68, 0x77, 0x5f, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x68, 0x77, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x22, 0xc6, 0x01, 0x0a, 0x19, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x65, 0x72,
	0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x36, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b,
	0x0a, 0x09, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x08, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x68,
	0x77, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x68, 0x77, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x75,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x75, 0x69, 0x64, 0x12, 0x1a,
	0x0a, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x70,
	0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0b, 0x69, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0x1a, 0x0a,
	0x08, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x08, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x22, 0xc6, 0x01, 0x0a, 0x19, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x36,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x75, 0x62, 0x6e, 0x65,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x73, 0x75, 0x62, 0x6e,
	0x65, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x68, 0x77, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x68, 0x77, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x64, 0x75, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x70, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78,
	0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78,
	0x65, 0x73, 0x22, 0x8e, 0x01, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x64, 0x50,
	0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x75,
	0x62, 0x6e, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x73,
	0x75, 0x62, 0x6e, 0x65, 0x74, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69,
	0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12,
	0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x6c, 0x65, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x09, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4c, 0x65, 0x6e, 0x12, 0x23,
	0x0a, 0x0d, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x6c, 0x65, 0x6e, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x64,
	0x4c, 0x65, 0x6e, 0x22, 0x8e, 0x01, 0x0a, 0x13, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x64,
	0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x73,
	0x75, 0x62, 0x6e, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08,
	0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x72, 0x65, 0x66,
	0x69, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78,
	0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x6c, 0x65, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4c, 0x65, 0x6e, 0x12,
	0x23, 0x0a, 0x0d, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x6c, 0x65, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65,
	0x64, 0x4c, 0x65, 0x6e, 0x22, 0x96, 0x01, 0x0a, 0x1b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x50, 0x64, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x49,
	0x64, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x65,
	0x66, 0x69, 0x78, 0x5f, 0x6c, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x70,
	0x72, 0x65, 0x66, 0x69, 0x78, 0x4c, 0x65, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x65, 0x6c, 0x65,
	0x67, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x6c, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0c, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x64, 0x4c, 0x65, 0x6e, 0x22, 0x96, 0x01,
	0x0a, 0x1b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64,
	0x50, 0x64, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a,
	0x09, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x08, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x72,
	0x65, 0x66, 0x69, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x72, 0x65, 0x66,
	0x69, 0x78, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x6c, 0x65, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4c, 0x65,
	0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x6c,
	0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61,
	0x74, 0x65, 0x64, 0x4c, 0x65, 0x6e, 0x22, 0x66, 0x0a, 0x1b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x73, 0x34, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x47, 0x0a, 0x0e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f,
	0x63, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x34, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52,
	0x0d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x73, 0x22, 0x5b,
	0x0a, 0x19, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x6c,
	0x61, 0x73, 0x73, 0x34, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x65, 0x78, 0x70, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x67, 0x65, 0x78, 0x70, 0x22, 0x33, 0x0a, 0x1b, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x6c, 0x61, 0x73, 0x73,
	0x65, 0x73, 0x34, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x61,
	0x6d, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x6e, 0x61, 0x6d, 0x65, 0x73,
	0x22, 0x2f, 0x0a, 0x19, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x43, 0x6c, 0x61, 0x73, 0x73, 0x34, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x22, 0x5b, 0x0a, 0x19, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x34, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x65, 0x78, 0x70,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x67, 0x65, 0x78, 0x70, 0x22, 0x66,
	0x0a, 0x1b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x6c,
	0x61, 0x73, 0x73, 0x65, 0x73, 0x36, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x47, 0x0a,
	0x0e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x36,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43,
	0x6c, 0x61, 0x73, 0x73, 0x65, 0x73, 0x22, 0x5b, 0x0a, 0x19, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x36, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72,
	0x65, 0x67, 0x65, 0x78, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x67,
	0x65, 0x78, 0x70, 0x22, 0x33, 0x0a, 0x1b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x73, 0x36, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x05, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x22, 0x2f, 0x0a, 0x19, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x36, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x5b, 0x0a, 0x19, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x36, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x72, 0x65, 0x67, 0x65, 0x78, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x72, 0x65, 0x67, 0x65, 0x78, 0x70, 0x22, 0x60, 0x0a, 0x19, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x46, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x43, 0x0a, 0x0c, 0x66, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69,
	0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72,
	0x69, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0c, 0x66, 0x69, 0x6e, 0x67,
	0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x73, 0x22, 0xca, 0x01, 0x0a, 0x18, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x46, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x66, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70,
	0x72, 0x69, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x66, 0x69, 0x6e, 0x67,
	0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x76, 0x65, 0x6e, 0x64, 0x6f,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x76, 0x65, 0x6e, 0x64,
	0x6f, 0x72, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6e,
	0x67, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x12,
	0x1f, 0x0a, 0x0b, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x23, 0x0a, 0x0d, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72,
	0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x50, 0x61,
	0x74, 0x74, 0x65, 0x72, 0x6e, 0x22, 0x60, 0x0a, 0x19, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46,
	0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x43, 0x0a, 0x0c, 0x66, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e,
	0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69,
	0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0c, 0x66, 0x69, 0x6e, 0x67, 0x65,
	0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x73, 0x22, 0xa5, 0x01, 0x0a, 0x18, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x46, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x66, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72,
	0x69, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x66, 0x69, 0x6e, 0x67, 0x65,
	0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x76, 0x65, 0x6e, 0x64, 0x6f,
	0x72, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67,
	0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x1f,
	0x0a, 0x0b, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x22,
	0x80, 0x01, 0x0a, 0x18, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x69, 0x6e, 0x67, 0x65, 0x72,
	0x70, 0x72, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x03,
	0x6f, 0x6c, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72,
	0x69, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x03, 0x6f, 0x6c, 0x64, 0x12,
	0x31, 0x0a, 0x03, 0x6e, 0x65, 0x77, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x69, 0x6e, 0x67, 0x65,
	0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x03, 0x6e,
	0x65, 0x77, 0x22, 0x40, 0x0a, 0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x75, 0x69, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x04, 0x6f, 0x75, 0x69, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x4f, 0x75, 0x69, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x04,
	0x6f, 0x75, 0x69, 0x73, 0x22, 0x48, 0x0a, 0x10, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x75,
	0x69, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x75, 0x69, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6f, 0x75, 0x69, 0x12, 0x22, 0x0a, 0x0c, 0x6f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x27,
	0x0a, 0x11, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f, 0x75, 0x69, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6f, 0x75, 0x69, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x04, 0x6f, 0x75, 0x69, 0x73, 0x22, 0x24, 0x0a, 0x10, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x4f, 0x75, 0x69, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6f,
	0x75, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6f, 0x75, 0x69, 0x22, 0x48, 0x0a,
	0x10, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x75, 0x69, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x75, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6f, 0x75, 0x69, 0x12, 0x22, 0x0a, 0x0c, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x2e, 0x0a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x41, 0x64, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a,
	0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x22, 0x3b, 0x0a, 0x16, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x41, 0x64, 0x6d, 0x69, 0x74, 0x4d, 0x61, 0x63, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x21, 0x0a, 0x0c, 0x68, 0x77, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x68, 0x77, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x65, 0x73, 0x22, 0x36, 0x0a, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x64,
	0x6d, 0x69, 0x74, 0x4d, 0x61, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a,
	0x0a, 0x68, 0x77, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x68, 0x77, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x3b, 0x0a, 0x16,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x64, 0x6d, 0x69, 0x74, 0x4d, 0x61, 0x63, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x68, 0x77, 0x5f, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x68, 0x77,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x22, 0x36, 0x0a, 0x15, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x41, 0x64, 0x6d, 0x69, 0x74, 0x4d, 0x61, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x68, 0x77, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x68, 0x77, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x22, 0x2f, 0x0a, 0x17, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x64, 0x6d, 0x69, 0x74,
	0x44, 0x75, 0x69, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x64, 0x75, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x64, 0x75, 0x69,
	0x64, 0x73, 0x22, 0x2c, 0x0a, 0x16, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x64, 0x6d, 0x69,
	0x74, 0x44, 0x75, 0x69, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x64, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x75, 0x69, 0x64,
	0x22, 0x2f, 0x0a, 0x17, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x64, 0x6d, 0x69, 0x74, 0x44,
	0x75, 0x69, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x64,
	0x75, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x64, 0x75, 0x69, 0x64,
	0x73, 0x22, 0x2c, 0x0a, 0x16, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x64, 0x6d, 0x69, 0x74,
	0x44, 0x75, 0x69, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x64,
	0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x75, 0x69, 0x64, 0x22,
	0x43, 0x0a, 0x1e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x64, 0x6d, 0x69, 0x74, 0x46, 0x69,
	0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x73, 0x22, 0x40, 0x0a, 0x1d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x64,
	0x6d, 0x69, 0x74, 0x46, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x22, 0x43, 0x0a, 0x1e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x41, 0x64, 0x6d, 0x69, 0x74, 0x46, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x73, 0x22, 0x40, 0x0a, 0x1d, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x64, 0x6d, 0x69, 0x74, 0x46, 0x69, 0x6e, 0x67, 0x65, 0x72,
	0x70, 0x72, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x22, 0x32, 0x0a,
	0x16, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x22, 0x52, 0x0a, 0x1a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x61, 0x74, 0x65, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x4d, 0x61, 0x63, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x34, 0x0a, 0x04, 0x6d, 0x61, 0x63, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x61, 0x74, 0x65,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x4d, 0x61, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52,
	0x04, 0x6d, 0x61, 0x63, 0x73, 0x22, 0x50, 0x0a, 0x19, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52,
	0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x4d, 0x61, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x68, 0x77, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x68, 0x77, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0x3f, 0x0a, 0x1a, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x52, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x4d, 0x61, 0x63, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x68, 0x77, 0x5f, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x68, 0x77, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x22, 0x3a, 0x0a, 0x19, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x52, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x4d, 0x61, 0x63, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x68, 0x77, 0x5f, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x68, 0x77, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x22, 0x50, 0x0a, 0x19, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x61,
	0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x4d, 0x61, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x68, 0x77, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x68, 0x77, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0x56, 0x0a, 0x1b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x52, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x44, 0x75, 0x69, 0x64, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x37, 0x0a, 0x05, 0x64, 0x75, 0x69, 0x64, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x52, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x44, 0x75, 0x69, 0x64,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x05, 0x64, 0x75, 0x69, 0x64, 0x73, 0x22, 0x46,
	0x0a, 0x1a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x44, 0x75, 0x69, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x64, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x75, 0x69, 0x64,
	0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0x33, 0x0a, 0x1b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x52, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x44, 0x75, 0x69, 0x64, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x75, 0x69, 0x64, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x64, 0x75, 0x69, 0x64, 0x73, 0x22, 0x30, 0x0a, 0x1a, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x44, 0x75,
	0x69, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x75, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x75, 0x69, 0x64, 0x22, 0x46, 0x0a,
	0x1a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x44, 0x75, 0x69, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x64,
	0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x75, 0x69, 0x64, 0x12,
	0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0x49, 0x0a, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50,
	0x69, 0x6e, 0x67, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74,
	0x22, 0x55, 0x0a, 0x0b, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x32, 0x0a, 0x07, 0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x4c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x52, 0x07,
	0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x73, 0x22, 0x8e, 0x01, 0x0a, 0x11, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x4c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x05, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x6e, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x65, 0x6e, 0x64, 0x12, 0x3b, 0x0a, 0x08, 0x73,
	0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x64,
	0x65, 0x4c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x08,
	0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x44, 0x0a, 0x18, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x4c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x53, 0x65, 0x67,
	0x6d, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x54,
	0x0a, 0x19, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x43,
	0x6f, 0x64, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x37, 0x0a, 0x0d, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x0c, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x43,
	0x6f, 0x64, 0x65, 0x73, 0x22, 0x2e, 0x0a, 0x18, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x22, 0x31, 0x0a, 0x19, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x05, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x22, 0x2e, 0x0a, 0x18, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x50, 0x0a, 0x18, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x6c, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x6c, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x19,
	0x0a, 0x08, 0x6e, 0x65, 0x77, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6e, 0x65, 0x77, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x78, 0x0a, 0x1f, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x4c, 0x61,
	0x79, 0x6f, 0x75, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x32, 0x0a, 0x07, 0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x43, 0x6f, 0x64, 0x65, 0x4c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x52, 0x07, 0x6c, 0x61, 0x79, 0x6f,
	0x75, 0x74, 0x73, 0x22, 0x81, 0x01, 0x0a, 0x1e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x4c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x61, 0x62,
	0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x12,
	0x14, 0x0a, 0x05, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05,
	0x62, 0x65, 0x67, 0x69, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x03, 0x65, 0x6e, 0x64, 0x22, 0x5c, 0x0a, 0x1f, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x4c, 0x61, 0x79, 0x6f,
	0x75, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x73, 0x22, 0x59, 0x0a, 0x1e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x4c, 0x61, 0x79, 0x6f, 0x75, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x22, 0x7d, 0x0a, 0x1e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x43, 0x6f, 0x64, 0x65, 0x4c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6f, 0x6c, 0x64, 0x5f, 0x6c, 0x61, 0x62,
	0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x6c, 0x64, 0x4c, 0x61, 0x62,
	0x65, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x65, 0x77, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x65, 0x77, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x22,
	0xa0, 0x01, 0x0a, 0x26, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x43, 0x6f, 0x64, 0x65, 0x4c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x53, 0x65, 0x67, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6c,
	0x61, 0x79, 0x6f, 0x75, 0x74, 0x12, 0x3b, 0x0a, 0x08, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x4c, 0x61, 0x79, 0x6f, 0x75,
	0x74, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x08, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x22, 0x9d, 0x01, 0x0a, 0x25, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x4c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x53, 0x65,
	0x67, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x12, 0x39, 0x0a, 0x07, 0x73, 0x65, 0x67, 0x6d, 0x65,
	0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x4c, 0x61, 0x79, 0x6f,
	0x75, 0x74, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x07, 0x73, 0x65, 0x67, 0x6d, 0x65,
	0x6e, 0x74, 0x22, 0x88, 0x01, 0x0a, 0x26, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x4c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x53, 0x65,
	0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a,
	0x0c, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x65, 0x67, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0c, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x22, 0x85, 0x01,
	0x0a, 0x25, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x43,
	0x6f, 0x64, 0x65, 0x4c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x61,
	0x79, 0x6f, 0x75, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6c, 0x61, 0x79, 0x6f,
	0x75, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e,
	0x74, 0x43, 0x6f, 0x64, 0x65, 0x22, 0xe6, 0x01, 0x0a, 0x25, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x4c, 0x61, 0x79, 0x6f, 0x75,
	0x74, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x21, 0x0a, 0x0c, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x12, 0x40, 0x0a, 0x0b, 0x6f, 0x6c,
	0x64, 0x5f, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x43,
	0x6f, 0x64, 0x65, 0x4c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x0a, 0x6f, 0x6c, 0x64, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x40, 0x0a, 0x0b,
	0x6e, 0x65, 0x77, 0x5f, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x43, 0x6f, 0x64, 0x65, 0x4c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x53, 0x65, 0x67, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x0a, 0x6e, 0x65, 0x77, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x48,
	0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x73, 0x73, 0x65, 0x74, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x06, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x41, 0x73, 0x73, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x52, 0x06, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x22, 0xbc, 0x01, 0x0a, 0x12, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x41, 0x73, 0x73, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1d, 0x0a, 0x0a, 0x68, 0x77, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x68, 0x77, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1d,
	0x0a, 0x0a, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x61, 0x73, 0x73, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a,
	0x0c, 0x6d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65,
	0x72, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x2e, 0x0a, 0x13, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x38, 0x0a, 0x13, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x41, 0x73, 0x73, 0x65, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21,
	0x0a, 0x0c, 0x68, 0x77, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x68, 0x77, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65,
	0x73, 0x22, 0x33, 0x0a, 0x12, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x73, 0x73, 0x65, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x68, 0x77, 0x5f, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x68, 0x77, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0xbc, 0x01, 0x0a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x41, 0x73, 0x73, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a,
	0x0a, 0x68, 0x77, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x68, 0x77, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1d, 0x0a, 0x0a,
	0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x61, 0x73, 0x73, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x6d,
	0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x6d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x12,
	0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x2e, 0x0a, 0x13, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x11, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x1e, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x6e,
	0x65, 0x74, 0x73, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x37, 0x0a, 0x23, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x6e,
	0x65, 0x74, 0x73, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x57, 0x69,
	0x74, 0x68, 0x49, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03,
	0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x04, 0x52, 0x03, 0x69, 0x64, 0x73, 0x22, 0xf0,
	0x01, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x73, 0x4c, 0x65, 0x61,
	0x73, 0x65, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x65, 0x64, 0x12, 0x6e, 0x0a, 0x14, 0x73, 0x75,
	0x62, 0x6e, 0x65, 0x74, 0x73, 0x5f, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x73, 0x4c, 0x65, 0x61, 0x73, 0x65,
	0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53,
	0x75, 0x62, 0x6e, 0x65, 0x74, 0x73, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x12, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x73, 0x4c,
	0x65, 0x61, 0x73, 0x65, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x1a, 0x45, 0x0a, 0x17, 0x53, 0x75,
	0x62, 0x6e, 0x65, 0x74, 0x73, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0x2e, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x34, 0x4c,
	0x65, 0x61, 0x73, 0x65, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69,
	0x64, 0x22, 0x7f, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x6f, 0x6c, 0x34, 0x4c, 0x65, 0x61,
	0x73, 0x65, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1b, 0x0a, 0x09, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x08, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d,
	0x62, 0x65, 0x67, 0x69, 0x6e, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x6e, 0x64, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x6e, 0x64, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x22, 0x99, 0x01, 0x0a, 0x20, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x34, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x75, 0x62, 0x6e, 0x65,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x73, 0x75, 0x62, 0x6e,
	0x65, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x68, 0x77, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x68, 0x77, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x1d, 0x0a, 0x0a, 0x69, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x94,
	0x01, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x34, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b,
	0x0a, 0x09, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x08, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x68,
	0x77, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x68, 0x77, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x6f,
	0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x6f,
	0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x70, 0x5f, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x70, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x55, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x4c, 0x65, 0x61, 0x73,
	0x65, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x65, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x6c, 0x65, 0x61,
	0x73, 0x65, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0b, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x2e, 0x0a, 0x1c,
	0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x36, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x73,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x22, 0x7f, 0x0a, 0x1a,
	0x47, 0x65, 0x74, 0x50, 0x6f, 0x6f, 0x6c, 0x36, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x75,
	0x62, 0x6e, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x73,
	0x75, 0x62, 0x6e, 0x65, 0x74, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x62, 0x65, 0x67, 0x69, 0x6e,
	0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x62, 0x65, 0x67, 0x69, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1f, 0x0a, 0x0b,
	0x65, 0x6e, 0x64, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x65, 0x6e, 0x64, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0xce, 0x01,
	0x0a, 0x21, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x36, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x49, 0x64,
	0x12, 0x1d, 0x0a, 0x0a, 0x68, 0x77, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x68, 0x77, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x12, 0x0a, 0x04, 0x64, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64,
	0x75, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x21, 0x0a, 0x0c, 0x69, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x18, 0x06,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x22, 0xc9,
	0x01, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x36, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1b, 0x0a, 0x09, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x08, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a,
	0x68, 0x77, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x68, 0x77, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x64,
	0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x75, 0x69, 0x64, 0x12,
	0x1a, 0x0a, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x69,
	0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x0b, 0x69, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0x1a,
	0x0a, 0x08, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x08, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x22, 0x29, 0x0a, 0x17, 0x47, 0x65,
	0x74, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x34, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x02, 0x69, 0x64, 0x22, 0x42, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x6e,
	0x65, 0x74, 0x34, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x5d, 0x0a, 0x1e, 0x47, 0x65, 0x74,
	0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x34, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x57, 0x69, 0x74,
	0x68, 0x49, 0x70, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3b, 0x0a, 0x09, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74,
	0x34, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x09, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x22, 0x45, 0x0a, 0x20, 0x47, 0x65, 0x74, 0x53,
	0x75, 0x62, 0x6e, 0x65, 0x74, 0x73, 0x34, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x57, 0x69, 0x74,
	0x68, 0x4d, 0x61, 0x63, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c,
	0x68, 0x77, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x0b, 0x68, 0x77, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x22,
	0x45, 0x0a, 0x25, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x73, 0x34, 0x4c, 0x65,
	0x61, 0x73, 0x65, 0x73, 0x57, 0x69, 0x74, 0x68, 0x48, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x68, 0x6f, 0x73, 0x74,
	0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x68, 0x6f, 0x73,
	0x74, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x22, 0xc9, 0x01, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x4c, 0x65,
	0x61, 0x73, 0x65, 0x73, 0x34, 0x57, 0x69, 0x74, 0x68, 0x49, 0x70, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x65, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x65, 0x64, 0x12, 0x44,
	0x0a, 0x06, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x73,
	0x34, 0x57, 0x69, 0x74, 0x68, 0x49, 0x70, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x2e, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6c, 0x65,
	0x61, 0x73, 0x65, 0x73, 0x1a, 0x4c, 0x0a, 0x0b, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x27, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x48, 0x43,
	0x50, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x34, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0x5d, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x36,
	0x4c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x57, 0x69, 0x74, 0x68, 0x49, 0x70, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x3b, 0x0a, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x36, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65,
	0x73, 0x22, 0x39, 0x0a, 0x21, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x73, 0x36,
	0x4c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x57, 0x69, 0x74, 0x68, 0x44, 0x75, 0x69, 0x64, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x75, 0x69, 0x64, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x64, 0x75, 0x69, 0x64, 0x73, 0x22, 0x45, 0x0a, 0x20,
	0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x73, 0x36, 0x4c, 0x65, 0x61, 0x73, 0x65,
	0x73, 0x57, 0x69, 0x74, 0x68, 0x4d, 0x61, 0x63, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x21, 0x0a, 0x0c, 0x68, 0x77, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x68, 0x77, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x65, 0x73, 0x22, 0x45, 0x0a, 0x25, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74,
	0x73, 0x36, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x57, 0x69, 0x74, 0x68, 0x48, 0x6f, 0x73, 0x74,
	0x6e, 0x61, 0x6d, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09,
	0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x09, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x22, 0xc9, 0x01, 0x0a, 0x19, 0x47,
	0x65, 0x74, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x36, 0x57, 0x69, 0x74, 0x68, 0x49, 0x70, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63,
	0x65, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65,
	0x65, 0x64, 0x12, 0x44, 0x0a, 0x06, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x65,
	0x61, 0x73, 0x65, 0x73, 0x36, 0x57, 0x69, 0x74, 0x68, 0x49, 0x70, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x06, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x1a, 0x4c, 0x0a, 0x0b, 0x4c, 0x65, 0x61, 0x73,
	0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x27, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x44, 0x48, 0x43, 0x50, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x36, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x29, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62,
	0x6e, 0x65, 0x74, 0x36, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69,
	0x64, 0x22, 0x42, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x36, 0x4c,
	0x65, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x7a, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x6f, 0x6c,
	0x34, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b,
	0x0a, 0x09, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x08, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x62,
	0x65, 0x67, 0x69, 0x6e, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x6e, 0x64, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x6e, 0x64, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x22, 0x7a, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x6f, 0x6c, 0x36, 0x4c, 0x65, 0x61,
	0x73, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x75,
	0x62, 0x6e, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x73,
	0x75, 0x62, 0x6e, 0x65, 0x74, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x62, 0x65, 0x67, 0x69, 0x6e,
	0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x62, 0x65, 0x67, 0x69, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1f, 0x0a, 0x0b,
	0x65, 0x6e, 0x64, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x65, 0x6e, 0x64, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0xf6, 0x04,
	0x0a, 0x0a, 0x44, 0x48, 0x43, 0x50, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x34, 0x12, 0x18, 0x0a, 0x07,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x68, 0x77, 0x5f, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x68, 0x77, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x36, 0x0a, 0x17, 0x68, 0x77, 0x5f, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x5f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x68, 0x77, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a,
	0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x66, 0x71,
	0x64, 0x6e, 0x5f, 0x66, 0x77, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x66, 0x71,
	0x64, 0x6e, 0x46, 0x77, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x66, 0x71, 0x64, 0x6e, 0x5f, 0x72, 0x65,
	0x76, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x66, 0x71, 0x64, 0x6e, 0x52, 0x65, 0x76,
	0x12, 0x1a, 0x0a, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09,
	0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x08, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x75, 0x62,
	0x6e, 0x65, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x75, 0x62, 0x6e, 0x65,
	0x74, 0x12, 0x32, 0x0a, 0x0b, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c,
	0x65, 0x61, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0a, 0x6c, 0x65, 0x61, 0x73, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x5f, 0x6c, 0x69, 0x66, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0d, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x4c, 0x69, 0x66, 0x65, 0x74, 0x69,
	0x6d, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x65, 0x78, 0x70,
	0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x66,
	0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x66, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x12, 0x1b, 0x0a,
	0x09, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x53,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x22, 0x59, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x4c, 0x65, 0x61,
	0x73, 0x65, 0x73, 0x34, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x73, 0x75, 0x63, 0x63, 0x65, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73,
	0x75, 0x63, 0x63, 0x65, 0x65, 0x64, 0x12, 0x29, 0x0a, 0x06, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44,
	0x48, 0x43, 0x50, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x34, 0x52, 0x06, 0x6c, 0x65, 0x61, 0x73, 0x65,
	0x73, 0x22, 0x56, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x34, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x65,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x65, 0x64,
	0x12, 0x27, 0x0a, 0x05, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x48, 0x43, 0x50, 0x4c, 0x65, 0x61, 0x73,
	0x65, 0x34, 0x52, 0x05, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x22, 0x8b, 0x08, 0x0a, 0x0a, 0x44, 0x48,
	0x43, 0x50, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x36, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x64, 0x75, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x68, 0x77, 0x5f, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x68, 0x77, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x68, 0x77, 0x5f, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x68, 0x77, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x42, 0x0a,
	0x11, 0x68, 0x77, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x48, 0x77, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x52, 0x0f, 0x68, 0x77, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x12, 0x36, 0x0a, 0x17, 0x68, 0x77, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f,
	0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x15, 0x68, 0x77, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x4f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x66, 0x71, 0x64,
	0x6e, 0x5f, 0x66, 0x77, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x66, 0x71, 0x64,
	0x6e, 0x46, 0x77, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x66, 0x71, 0x64, 0x6e, 0x5f, 0x72, 0x65, 0x76,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x66, 0x71, 0x64, 0x6e, 0x52, 0x65, 0x76, 0x12,
	0x1a, 0x0a, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x69,
	0x61, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x69, 0x61, 0x69, 0x64, 0x12,
	0x1b, 0x0a, 0x09, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x08, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x75,
	0x62, 0x6e, 0x65, 0x74, 0x12, 0x32, 0x0a, 0x0b, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0a, 0x6c, 0x65,
	0x61, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x65, 0x61, 0x73,
	0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6c, 0x65,
	0x61, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x65, 0x66, 0x69,
	0x78, 0x5f, 0x6c, 0x65, 0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x70, 0x72, 0x65,
	0x66, 0x69, 0x78, 0x4c, 0x65, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0e,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x6c, 0x69, 0x66, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x12,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x4c, 0x69, 0x66, 0x65, 0x74,
	0x69, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x12, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64,
	0x5f, 0x6c, 0x69, 0x66, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x11, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x4c, 0x69, 0x66, 0x65, 0x74, 0x69,
	0x6d, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x65, 0x78, 0x70,
	0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x66,
	0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x66, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x12, 0x1b, 0x0a,
	0x09, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x18, 0x17,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x53,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x18, 0x19, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x11, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x41, 0x64, 0x64, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x1a, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x62, 0x65, 0x67, 0x69,
	0x6e, 0x73, 0x18, 0x1b, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x11, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x65, 0x6e, 0x64, 0x73,
	0x18, 0x1c, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x43,
	0x6f, 0x64, 0x65, 0x45, 0x6e, 0x64, 0x73, 0x22, 0x59, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x4c, 0x65,
	0x61, 0x73, 0x65, 0x73, 0x36, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x73, 0x75, 0x63, 0x63, 0x65, 0x65, 0x64, 0x12, 0x29, 0x0a, 0x06, 0x6c, 0x65, 0x61, 0x73, 0x65,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x44, 0x48, 0x43, 0x50, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x36, 0x52, 0x06, 0x6c, 0x65, 0x61, 0x73,
	0x65, 0x73, 0x22, 0x56, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x36, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65,
	0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x65,
	0x64, 0x12, 0x27, 0x0a, 0x05, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x48, 0x43, 0x50, 0x4c, 0x65, 0x61,
	0x73, 0x65, 0x36, 0x52, 0x05, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x22, 0x97, 0x02, 0x0a, 0x1d, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x73, 0x34, 0x41, 0x6e, 0x64,
	0x50, 0x6f, 0x6f, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x35, 0x0a, 0x07,
	0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x75, 0x62, 0x6e,
	0x65, 0x74, 0x34, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x07, 0x73, 0x75, 0x62, 0x6e,
	0x65, 0x74, 0x73, 0x12, 0x2f, 0x0a, 0x05, 0x70, 0x6f, 0x6f, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x34, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x05, 0x70,
	0x6f, 0x6f, 0x6c, 0x73, 0x12, 0x48, 0x0a, 0x0e, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64,
	0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x64, 0x50, 0x6f, 0x6f, 0x6c, 0x34, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52,
	0x0d, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x50, 0x6f, 0x6f, 0x6c, 0x73, 0x12, 0x44,
	0x0a, 0x0c, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x34, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x22, 0x63, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x6f,
	0x6f, 0x6c, 0x73, 0x34, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x73,
	0x75, 0x62, 0x6e, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08,
	0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x49, 0x64, 0x12, 0x2f, 0x0a, 0x05, 0x70, 0x6f, 0x6f, 0x6c,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x34, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x52, 0x05, 0x70, 0x6f, 0x6f, 0x6c, 0x73, 0x22, 0x84, 0x01, 0x0a, 0x1b, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x50, 0x6f, 0x6f, 0x6c,
	0x73, 0x34, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x75, 0x62,
	0x6e, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x73, 0x75,
	0x62, 0x6e, 0x65, 0x74, 0x49, 0x64, 0x12, 0x48, 0x0a, 0x0e, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x64, 0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x64, 0x50, 0x6f, 0x6f, 0x6c, 0x34, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x52, 0x0d, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x50, 0x6f, 0x6f, 0x6c, 0x73,
	0x22, 0x7f, 0x0a, 0x1a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x34, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b,
	0x0a, 0x09, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x08, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x49, 0x64, 0x12, 0x44, 0x0a, 0x0c, 0x72,
	0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x34, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x22, 0x29, 0x0a, 0x15, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x75, 0x62, 0x6e, 0x65,
	0x74, 0x73, 0x34, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x49, 0x64,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x04, 0x52, 0x03, 0x49, 0x64, 0x73, 0x22, 0x63, 0x0a, 0x13,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x73, 0x34, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x49, 0x64,
	0x12, 0x2f, 0x0a, 0x05, 0x70, 0x6f, 0x6f, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x6f,
	0x6f, 0x6c, 0x34, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x05, 0x70, 0x6f, 0x6f, 0x6c,
	0x73, 0x22, 0x84, 0x01, 0x0a, 0x1b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x64, 0x50, 0x6f, 0x6f, 0x6c, 0x73, 0x34, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x49, 0x64, 0x12, 0x48,
	0x0a, 0x0e, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x50, 0x6f, 0x6f,
	0x6c, 0x34, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0d, 0x72, 0x65, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x64, 0x50, 0x6f, 0x6f, 0x6c, 0x73, 0x22, 0x7f, 0x0a, 0x1a, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x34, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x73, 0x75, 0x62, 0x6e, 0x65,
	0x74, 0x49, 0x64, 0x12, 0x44, 0x0a, 0x0c, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x34, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0c, 0x72, 0x65, 0x73,
	0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x9e, 0x03, 0x0a, 0x1d, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x73, 0x36, 0x41, 0x6e, 0x64, 0x50,
	0x6f, 0x6f, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x35, 0x0a, 0x07, 0x73,
	0x75, 0x62, 0x6e, 0x65, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x75, 0x62, 0x6e, 0x65,
	0x74, 0x36, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x07, 0x73, 0x75, 0x62, 0x6e, 0x65,
	0x74, 0x73, 0x12, 0x2f, 0x0a, 0x05, 0x70, 0x6f, 0x6f, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x50, 0x6f, 0x6f, 0x6c, 0x36, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x05, 0x70, 0x6f,
	0x6f, 0x6c, 0x73, 0x12, 0x48, 0x0a, 0x0e, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x5f,
	0x70, 0x6f, 0x6f, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x64, 0x50, 0x6f, 0x6f, 0x6c, 0x36, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0d,
	0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x50, 0x6f, 0x6f, 0x6c, 0x73, 0x12, 0x44, 0x0a,
	0x0c, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x36, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x35, 0x0a, 0x08, 0x70, 0x64, 0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x73, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x50, 0x64, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x52, 0x07, 0x70, 0x64, 0x50, 0x6f, 0x6f, 0x6c, 0x73, 0x12, 0x4e, 0x0a, 0x11, 0x72, 0x65,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x5f, 0x70, 0x64, 0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x73, 0x18,
	0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x50, 0x64, 0x50, 0x6f,
	0x6f, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0f, 0x72, 0x65, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x64, 0x50, 0x64, 0x50, 0x6f, 0x6f, 0x6c, 0x73, 0x22, 0x63, 0x0a, 0x13, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x73, 0x36, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x49, 0x64, 0x12, 0x2f,
	0x0a, 0x05, 0x70, 0x6f, 0x6f, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x6f, 0x6c,
	0x36, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x05, 0x70, 0x6f, 0x6f, 0x6c, 0x73, 0x22,
	0x84, 0x01, 0x0a, 0x1b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x64, 0x50, 0x6f, 0x6f, 0x6c, 0x73, 0x36, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1b, 0x0a, 0x09, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x08, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x49, 0x64, 0x12, 0x48, 0x0a, 0x0e,
	0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x50, 0x6f, 0x6f, 0x6c, 0x36,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0d, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x64, 0x50, 0x6f, 0x6f, 0x6c, 0x73, 0x22, 0x7f, 0x0a, 0x1a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x36, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x49,
	0x64, 0x12, 0x44, 0x0a, 0x0c, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x36, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x65, 0x72,
	0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x6a, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x50, 0x64, 0x50, 0x6f, 0x6f, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1b, 0x0a, 0x09, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x08, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x49, 0x64, 0x12, 0x35, 0x0a, 0x08,
	0x70, 0x64, 0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x64, 0x50,
	0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x07, 0x70, 0x64, 0x50, 0x6f,
	0x6f, 0x6c, 0x73, 0x22, 0x8b, 0x01, 0x0a, 0x1c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x50, 0x64, 0x50, 0x6f, 0x6f, 0x6c, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x49,
	0x64, 0x12, 0x4e, 0x0a, 0x11, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x5f, 0x70, 0x64,
	0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x64, 0x50, 0x64, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x52, 0x0f, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x50, 0x64, 0x50, 0x6f, 0x6f, 0x6c,
	0x73, 0x22, 0x29, 0x0a, 0x15, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x75, 0x62, 0x6e, 0x65,
	0x74, 0x73, 0x36, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x49, 0x64,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x04, 0x52, 0x03, 0x49, 0x64, 0x73, 0x22, 0x63, 0x0a, 0x13,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x73, 0x36, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x49, 0x64,
	0x12, 0x2f, 0x0a, 0x05, 0x70, 0x6f, 0x6f, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x6f,
	0x6f, 0x6c, 0x36, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x05, 0x70, 0x6f, 0x6f, 0x6c,
	0x73, 0x22, 0x84, 0x01, 0x0a, 0x1b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x64, 0x50, 0x6f, 0x6f, 0x6c, 0x73, 0x36, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x49, 0x64, 0x12, 0x48,
	0x0a, 0x0e, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x50, 0x6f, 0x6f,
	0x6c, 0x36, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0d, 0x72, 0x65, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x64, 0x50, 0x6f, 0x6f, 0x6c, 0x73, 0x22, 0x6a, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x50, 0x64, 0x50, 0x6f, 0x6f, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1b, 0x0a, 0x09, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x08, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x49, 0x64, 0x12, 0x35, 0x0a,
	0x08, 0x70, 0x64, 0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x64,
	0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x07, 0x70, 0x64, 0x50,
	0x6f, 0x6f, 0x6c, 0x73, 0x22, 0x8b, 0x01, 0x0a, 0x1c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52,
	0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x50, 0x64, 0x50, 0x6f, 0x6f, 0x6c, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74,
	0x49, 0x64, 0x12, 0x4e, 0x0a, 0x11, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x5f, 0x70,
	0x64, 0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x64, 0x50, 0x64, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x52, 0x0f, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x50, 0x64, 0x50, 0x6f, 0x6f,
	0x6c, 0x73, 0x22, 0x7f, 0x0a, 0x1a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x65,
	0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x36, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1b, 0x0a, 0x09, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x08, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x49, 0x64, 0x12, 0x44, 0x0a,
	0x0c, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x36, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x22, 0x6b, 0x0a, 0x1c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x68, 0x61,
	0x72, 0x65, 0x64, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x34, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x4b, 0x0a, 0x0f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x5f, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x68, 0x61, 0x72, 0x65,
	0x64, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x34, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x52, 0x0e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73,
	0x22, 0x50, 0x0a, 0x1b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64,
	0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x34, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x5f, 0x69, 0x64,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x04, 0x52, 0x09, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x49,
	0x64, 0x73, 0x22, 0x34, 0x0a, 0x1c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x68, 0x61, 0x72,
	0x65, 0x64, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x34, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x05, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x22, 0x31, 0x0a, 0x1b, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x34,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x89, 0x01, 0x0a, 0x1b,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x4e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x34, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x34, 0x0a, 0x03, 0x6f,
	0x6c, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x4e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x34, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x03, 0x6f, 0x6c,
	0x64, 0x12, 0x34, 0x0a, 0x03, 0x6e, 0x65, 0x77, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x68, 0x61,
	0x72, 0x65, 0x64, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x34, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x52, 0x03, 0x6e, 0x65, 0x77, 0x22, 0x4c, 0x0a, 0x13, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x34, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b,
	0x0a, 0x09, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x08, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x51, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4c,
	0x65, 0x61, 0x73, 0x65, 0x73, 0x34, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a,
	0x09, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x08, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x22, 0x6b, 0x0a, 0x13, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x36, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1b, 0x0a, 0x09, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x08, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a,
	0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x70, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4c,
	0x65, 0x61, 0x73, 0x65, 0x73, 0x36, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a,
	0x09, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x08, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x65,
	0x61, 0x73, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x6c, 0x65, 0x61, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x22, 0x2f, 0x0a, 0x13, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x65, 0x64, 0x2a, 0x35, 0x0a, 0x0a, 0x4c, 0x65, 0x61, 0x73,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x0a, 0x0a, 0x06, 0x4e, 0x4f, 0x52, 0x4d, 0x41, 0x4c,
	0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x44, 0x45, 0x43, 0x4c, 0x49, 0x4e, 0x45, 0x44, 0x10, 0x01,
	0x12, 0x0d, 0x0a, 0x09, 0x52, 0x45, 0x43, 0x4c, 0x41, 0x49, 0x4d, 0x45, 0x44, 0x10, 0x02, 0x2a,
	0x84, 0x01, 0x0a, 0x0f, 0x48, 0x77, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00,
	0x12, 0x08, 0x0a, 0x04, 0x44, 0x55, 0x49, 0x44, 0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e, 0x49, 0x50,
	0x76, 0x36, 0x5f, 0x4c, 0x49, 0x4e, 0x4b, 0x4c, 0x4f, 0x43, 0x41, 0x4c, 0x10, 0x04, 0x12, 0x13,
	0x0a, 0x0f, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x4c, 0x49, 0x4e, 0x4b, 0x41, 0x44, 0x44,
	0x52, 0x10, 0x08, 0x12, 0x0d, 0x0a, 0x09, 0x52, 0x45, 0x4d, 0x4f, 0x54, 0x45, 0x5f, 0x49, 0x44,
	0x10, 0x10, 0x12, 0x0f, 0x0a, 0x0b, 0x44, 0x4f, 0x43, 0x53, 0x49, 0x53, 0x5f, 0x43, 0x4d, 0x54,
	0x53, 0x10, 0x40, 0x12, 0x11, 0x0a, 0x0c, 0x44, 0x4f, 0x43, 0x53, 0x49, 0x53, 0x5f, 0x4d, 0x4f,
	0x44, 0x45, 0x4d, 0x10, 0x80, 0x01, 0x32, 0xba, 0x16, 0x0a, 0x0b, 0x44, 0x48, 0x43, 0x50, 0x4d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x12, 0x65, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62,
	0x6e, 0x65, 0x74, 0x73, 0x34, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x23, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x6e,
	0x65, 0x74, 0x73, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65,
	0x74, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x73, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x73, 0x0a,
	0x1d, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x73, 0x34, 0x4c, 0x65, 0x61, 0x73,
	0x65, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x57, 0x69, 0x74, 0x68, 0x49, 0x64, 0x73, 0x12, 0x2a,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74,
	0x73, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x57, 0x69, 0x74, 0x68,
	0x49, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x73, 0x4c, 0x65, 0x61,
	0x73, 0x65, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x4f, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x34,
	0x4c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x12, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47,
	0x65, 0x74, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x34, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47,
	0x65, 0x74, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x34, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x5d, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74,
	0x34, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x23, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x34, 0x4c,
	0x65, 0x61, 0x73, 0x65, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x65, 0x61,
	0x73, 0x65, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x4c, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x34,
	0x4c, 0x65, 0x61, 0x73, 0x65, 0x12, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65,
	0x74, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x34, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74,
	0x4c, 0x65, 0x61, 0x73, 0x65, 0x34, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x5d, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x34, 0x4c, 0x65,
	0x61, 0x73, 0x65, 0x73, 0x57, 0x69, 0x74, 0x68, 0x49, 0x70, 0x73, 0x12, 0x25, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x34, 0x4c, 0x65,
	0x61, 0x73, 0x65, 0x73, 0x57, 0x69, 0x74, 0x68, 0x49, 0x70, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x65,
	0x61, 0x73, 0x65, 0x73, 0x34, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x61, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x73, 0x34, 0x4c, 0x65,
	0x61, 0x73, 0x65, 0x73, 0x57, 0x69, 0x74, 0x68, 0x4d, 0x61, 0x63, 0x73, 0x12, 0x27, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x73, 0x34,
	0x4c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x57, 0x69, 0x74, 0x68, 0x4d, 0x61, 0x63, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65,
	0x74, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x34, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x6b, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x73,
	0x34, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x57, 0x69, 0x74, 0x68, 0x48, 0x6f, 0x73, 0x74, 0x6e,
	0x61, 0x6d, 0x65, 0x73, 0x12, 0x2c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74,
	0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x73, 0x34, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x57, 0x69,
	0x74, 0x68, 0x48, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x65,
	0x61, 0x73, 0x65, 0x73, 0x34, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x4b, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x6f, 0x6c, 0x34, 0x4c, 0x65, 0x61, 0x73, 0x65,
	0x73, 0x12, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x6f,
	0x6c, 0x34, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x65, 0x61, 0x73, 0x65,
	0x73, 0x34, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x59, 0x0a, 0x13,
	0x47, 0x65, 0x74, 0x50, 0x6f, 0x6f, 0x6c, 0x34, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x21, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x50,
	0x6f, 0x6f, 0x6c, 0x34, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47,
	0x65, 0x74, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x65, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x52, 0x65,
	0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x34, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x27, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74,
	0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x34, 0x4c, 0x65, 0x61, 0x73,
	0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x56,
	0x0a, 0x14, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x34, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x12, 0x22, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47,
	0x65, 0x74, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x34, 0x4c, 0x65,
	0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x34, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x48, 0x0a, 0x0c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x4c, 0x65, 0x61, 0x73, 0x65, 0x34, 0x12, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x34, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x4a, 0x0a, 0x0d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x73,
	0x34, 0x12, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x4c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x34, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4c, 0x65, 0x61,
	0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x65, 0x0a, 0x16,
	0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x73, 0x36, 0x4c, 0x65, 0x61, 0x73, 0x65,
	0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x23, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47,
	0x65, 0x74, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x73, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x73, 0x4c, 0x65,
	0x61, 0x73, 0x65, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x73, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74,
	0x73, 0x36, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x57, 0x69, 0x74,
	0x68, 0x49, 0x64, 0x73, 0x12, 0x2a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74,
	0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x73, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x57, 0x69, 0x74, 0x68, 0x49, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x24, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x6e,
	0x65, 0x74, 0x73, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4f, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x53,
	0x75, 0x62, 0x6e, 0x65, 0x74, 0x36, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x12, 0x1e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x36, 0x4c,
	0x65, 0x61, 0x73, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x36, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5d, 0x0a, 0x15, 0x47, 0x65, 0x74,
	0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x36, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x23, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x75,
	0x62, 0x6e, 0x65, 0x74, 0x36, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x47, 0x65, 0x74, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6a, 0x0a, 0x22, 0x47, 0x65, 0x74, 0x53,
	0x75, 0x62, 0x6e, 0x65, 0x74, 0x36, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x42, 0x79, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x23,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74,
	0x36, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x4c,
	0x65, 0x61, 0x73, 0x65, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x4c, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x6e, 0x65,
	0x74, 0x36, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x12, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x36, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47,
	0x65, 0x74, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x36, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x5d, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x36,
	0x4c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x57, 0x69, 0x74, 0x68, 0x49, 0x70, 0x73, 0x12, 0x25, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x36,
	0x4c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x57, 0x69, 0x74, 0x68, 0x49, 0x70, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74,
	0x4c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x36, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x63, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x73, 0x36,
	0x4c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x57, 0x69, 0x74, 0x68, 0x44, 0x75, 0x69, 0x64, 0x73, 0x12,
	0x28, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x6e, 0x65,
	0x74, 0x73, 0x36, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x57, 0x69, 0x74, 0x68, 0x44, 0x75, 0x69,
	0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x36, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x61, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62,
	0x6e, 0x65, 0x74, 0x73, 0x36, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x57, 0x69, 0x74, 0x68, 0x4d,
	0x61, 0x63, 0x73, 0x12, 0x27, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x53,
	0x75, 0x62, 0x6e, 0x65, 0x74, 0x73, 0x36, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x57, 0x69, 0x74,
	0x68, 0x4d, 0x61, 0x63, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x36, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6b, 0x0a, 0x1e, 0x47, 0x65, 0x74,
	0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x73, 0x36, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x57, 0x69,
	0x74, 0x68, 0x48, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x2c, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x73, 0x36, 0x4c,
	0x65, 0x61, 0x73, 0x65, 0x73, 0x57, 0x69, 0x74, 0x68, 0x48, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d,
	0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x36, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4b, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x6f,
	0x6c, 0x36, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x12, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x6f, 0x6c, 0x36, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47,
	0x65, 0x74, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x36, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x59, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x6f, 0x6c, 0x36, 0x4c,
	0x65, 0x61, 0x73, 0x65, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x21, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x6f, 0x6c, 0x36, 0x4c, 0x65, 0x61, 0x73, 0x65,
	0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x67,
	0x0a, 0x1a, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x36, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x28, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x36, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47,
	0x65, 0x74, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x59, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x52, 0x65,
	0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x36, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x73,
	0x12, 0x23, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x65,
	0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x36, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65,
	0x74, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x36, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x48, 0x0a, 0x0c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4c, 0x65, 0x61, 0x73,
	0x65, 0x36, 0x12, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x36, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4c, 0x65, 0x61,
	0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4a, 0x0a, 0x0d,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x36, 0x12, 0x1b, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4c, 0x65, 0x61, 0x73,
	0x65, 0x73, 0x36, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x49, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x44,
	0x48, 0x43, 0x50, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x47, 0x65, 0x74, 0x44, 0x48, 0x43, 0x50, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74,
	0x44, 0x48, 0x43, 0x50, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x42, 0x09, 0x5a, 0x07, 0x2e, 0x3b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_dhcp_agent_proto_rawDescOnce sync.Once
	file_dhcp_agent_proto_rawDescData = file_dhcp_agent_proto_rawDesc
)

func file_dhcp_agent_proto_rawDescGZIP() []byte {
	file_dhcp_agent_proto_rawDescOnce.Do(func() {
		file_dhcp_agent_proto_rawDescData = protoimpl.X.CompressGZIP(file_dhcp_agent_proto_rawDescData)
	})
	return file_dhcp_agent_proto_rawDescData
}

var file_dhcp_agent_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_dhcp_agent_proto_msgTypes = make([]protoimpl.MessageInfo, 159)
var file_dhcp_agent_proto_goTypes = []interface{}{
	(LeaseState)(0),                                // 0: proto.LeaseState
	(HwAddressSource)(0),                           // 1: proto.HwAddressSource
	(*GetDHCPNodesRequest)(nil),                    // 2: proto.GetDHCPNodesRequest
	(*GetDHCPNodesResponse)(nil),                   // 3: proto.GetDHCPNodesResponse
	(*SubnetOption)(nil),                           // 4: proto.SubnetOption
	(*CreateSubnet4Request)(nil),                   // 5: proto.CreateSubnet4Request
	(*DeleteSubnet4Request)(nil),                   // 6: proto.DeleteSubnet4Request
	(*UpdateSubnet4Request)(nil),                   // 7: proto.UpdateSubnet4Request
	(*CreateSubnet6Request)(nil),                   // 8: proto.CreateSubnet6Request
	(*DeleteSubnet6Request)(nil),                   // 9: proto.DeleteSubnet6Request
	(*UpdateSubnet6Request)(nil),                   // 10: proto.UpdateSubnet6Request
	(*CreatePool4Request)(nil),                     // 11: proto.CreatePool4Request
	(*DeletePool4Request)(nil),                     // 12: proto.DeletePool4Request
	(*CreateReservedPool4Request)(nil),             // 13: proto.CreateReservedPool4Request
	(*DeleteReservedPool4Request)(nil),             // 14: proto.DeleteReservedPool4Request
	(*CreatePool6Request)(nil),                     // 15: proto.CreatePool6Request
	(*DeletePool6Request)(nil),                     // 16: proto.DeletePool6Request
	(*CreateReservedPool6Request)(nil),             // 17: proto.CreateReservedPool6Request
	(*DeleteReservedPool6Request)(nil),             // 18: proto.DeleteReservedPool6Request
	(*CreateReservation4Request)(nil),              // 19: proto.CreateReservation4Request
	(*DeleteReservation4Request)(nil),              // 20: proto.DeleteReservation4Request
	(*CreateReservation6Request)(nil),              // 21: proto.CreateReservation6Request
	(*DeleteReservation6Request)(nil),              // 22: proto.DeleteReservation6Request
	(*CreatePdPoolRequest)(nil),                    // 23: proto.CreatePdPoolRequest
	(*DeletePdPoolRequest)(nil),                    // 24: proto.DeletePdPoolRequest
	(*CreateReservedPdPoolRequest)(nil),            // 25: proto.CreateReservedPdPoolRequest
	(*DeleteReservedPdPoolRequest)(nil),            // 26: proto.DeleteReservedPdPoolRequest
	(*CreateClientClasses4Request)(nil),            // 27: proto.CreateClientClasses4Request
	(*CreateClientClass4Request)(nil),              // 28: proto.CreateClientClass4Request
	(*DeleteClientClasses4Request)(nil),            // 29: proto.DeleteClientClasses4Request
	(*DeleteClientClass4Request)(nil),              // 30: proto.DeleteClientClass4Request
	(*UpdateClientClass4Request)(nil),              // 31: proto.UpdateClientClass4Request
	(*CreateClientClasses6Request)(nil),            // 32: proto.CreateClientClasses6Request
	(*CreateClientClass6Request)(nil),              // 33: proto.CreateClientClass6Request
	(*DeleteClientClasses6Request)(nil),            // 34: proto.DeleteClientClasses6Request
	(*DeleteClientClass6Request)(nil),              // 35: proto.DeleteClientClass6Request
	(*UpdateClientClass6Request)(nil),              // 36: proto.UpdateClientClass6Request
	(*CreateFingerprintsRequest)(nil),              // 37: proto.CreateFingerprintsRequest
	(*CreateFingerprintRequest)(nil),               // 38: proto.CreateFingerprintRequest
	(*DeleteFingerprintsRequest)(nil),              // 39: proto.DeleteFingerprintsRequest
	(*DeleteFingerprintRequest)(nil),               // 40: proto.DeleteFingerprintRequest
	(*UpdateFingerprintRequest)(nil),               // 41: proto.UpdateFingerprintRequest
	(*CreateOuisRequest)(nil),                      // 42: proto.CreateOuisRequest
	(*CreateOuiRequest)(nil),                       // 43: proto.CreateOuiRequest
	(*DeleteOuisRequest)(nil),                      // 44: proto.DeleteOuisRequest
	(*DeleteOuiRequest)(nil),                       // 45: proto.DeleteOuiRequest
	(*UpdateOuiRequest)(nil),                       // 46: proto.UpdateOuiRequest
	(*UpdateAdmitRequest)(nil),                     // 47: proto.UpdateAdmitRequest
	(*CreateAdmitMacsRequest)(nil),                 // 48: proto.CreateAdmitMacsRequest
	(*CreateAdmitMacRequest)(nil),                  // 49: proto.CreateAdmitMacRequest
	(*DeleteAdmitMacsRequest)(nil),                 // 50: proto.DeleteAdmitMacsRequest
	(*DeleteAdmitMacRequest)(nil),                  // 51: proto.DeleteAdmitMacRequest
	(*CreateAdmitDuidsRequest)(nil),                // 52: proto.CreateAdmitDuidsRequest
	(*CreateAdmitDuidRequest)(nil),                 // 53: proto.CreateAdmitDuidRequest
	(*DeleteAdmitDuidsRequest)(nil),                // 54: proto.DeleteAdmitDuidsRequest
	(*DeleteAdmitDuidRequest)(nil),                 // 55: proto.DeleteAdmitDuidRequest
	(*CreateAdmitFingerprintsRequest)(nil),         // 56: proto.CreateAdmitFingerprintsRequest
	(*CreateAdmitFingerprintRequest)(nil),          // 57: proto.CreateAdmitFingerprintRequest
	(*DeleteAdmitFingerprintsRequest)(nil),         // 58: proto.DeleteAdmitFingerprintsRequest
	(*DeleteAdmitFingerprintRequest)(nil),          // 59: proto.DeleteAdmitFingerprintRequest
	(*UpdateRateLimitRequest)(nil),                 // 60: proto.UpdateRateLimitRequest
	(*CreateRateLimitMacsRequest)(nil),             // 61: proto.CreateRateLimitMacsRequest
	(*CreateRateLimitMacRequest)(nil),              // 62: proto.CreateRateLimitMacRequest
	(*DeleteRateLimitMacsRequest)(nil),             // 63: proto.DeleteRateLimitMacsRequest
	(*DeleteRateLimitMacRequest)(nil),              // 64: proto.DeleteRateLimitMacRequest
	(*UpdateRateLimitMacRequest)(nil),              // 65: proto.UpdateRateLimitMacRequest
	(*CreateRateLimitDuidsRequest)(nil),            // 66: proto.CreateRateLimitDuidsRequest
	(*CreateRateLimitDuidRequest)(nil),             // 67: proto.CreateRateLimitDuidRequest
	(*DeleteRateLimitDuidsRequest)(nil),            // 68: proto.DeleteRateLimitDuidsRequest
	(*DeleteRateLimitDuidRequest)(nil),             // 69: proto.DeleteRateLimitDuidRequest
	(*UpdateRateLimitDuidRequest)(nil),             // 70: proto.UpdateRateLimitDuidRequest
	(*UpdatePingerRequest)(nil),                    // 71: proto.UpdatePingerRequest
	(*AddressCode)(nil),                            // 72: proto.AddressCode
	(*AddressCodeLayout)(nil),                      // 73: proto.AddressCodeLayout
	(*AddressCodeLayoutSegment)(nil),               // 74: proto.AddressCodeLayoutSegment
	(*CreateAddressCodesRequest)(nil),              // 75: proto.CreateAddressCodesRequest
	(*CreateAddressCodeRequest)(nil),               // 76: proto.CreateAddressCodeRequest
	(*DeleteAddressCodesRequest)(nil),              // 77: proto.DeleteAddressCodesRequest
	(*DeleteAddressCodeRequest)(nil),               // 78: proto.DeleteAddressCodeRequest
	(*UpdateAddressCodeRequest)(nil),               // 79: proto.UpdateAddressCodeRequest
	(*CreateAddressCodeLayoutsRequest)(nil),        // 80: proto.CreateAddressCodeLayoutsRequest
	(*CreateAddressCodeLayoutRequest)(nil),         // 81: proto.CreateAddressCodeLayoutRequest
	(*DeleteAddressCodeLayoutsRequest)(nil),        // 82: proto.DeleteAddressCodeLayoutsRequest
	(*DeleteAddressCodeLayoutRequest)(nil),         // 83: proto.DeleteAddressCodeLayoutRequest
	(*UpdateAddressCodeLayoutRequest)(nil),         // 84: proto.UpdateAddressCodeLayoutRequest
	(*CreateAddressCodeLayoutSegmentsRequest)(nil), // 85: proto.CreateAddressCodeLayoutSegmentsRequest
	(*CreateAddressCodeLayoutSegmentRequest)(nil),  // 86: proto.CreateAddressCodeLayoutSegmentRequest
	(*DeleteAddressCodeLayoutSegmentsRequest)(nil), // 87: proto.DeleteAddressCodeLayoutSegmentsRequest
	(*DeleteAddressCodeLayoutSegmentRequest)(nil),  // 88: proto.DeleteAddressCodeLayoutSegmentRequest
	(*UpdateAddressCodeLayoutSegmentRequest)(nil),  // 89: proto.UpdateAddressCodeLayoutSegmentRequest
	(*CreateAssetsRequest)(nil),                    // 90: proto.CreateAssetsRequest
	(*CreateAssetRequest)(nil),                     // 91: proto.CreateAssetRequest
	(*DeleteAssetsRequest)(nil),                    // 92: proto.DeleteAssetsRequest
	(*DeleteAssetRequest)(nil),                     // 93: proto.DeleteAssetRequest
	(*UpdateAssetRequest)(nil),                     // 94: proto.UpdateAssetRequest
	(*GetSubnetsLeasesCountRequest)(nil),           // 95: proto.GetSubnetsLeasesCountRequest
	(*GetSubnetsLeasesCountWithIdsRequest)(nil),    // 96: proto.GetSubnetsLeasesCountWithIdsRequest
	(*GetSubnetsLeasesCountResponse)(nil),          // 97: proto.GetSubnetsLeasesCountResponse
	(*GetSubnet4LeasesCountRequest)(nil),           // 98: proto.GetSubnet4LeasesCountRequest
	(*GetPool4LeasesCountRequest)(nil),             // 99: proto.GetPool4LeasesCountRequest
	(*GetReservation4LeaseCountRequest)(nil),       // 100: proto.GetReservation4LeaseCountRequest
	(*GetReservation4LeaseRequest)(nil),            // 101: proto.GetReservation4LeaseRequest
	(*GetLeasesCountResponse)(nil),                 // 102: proto.GetLeasesCountResponse
	(*GetSubnet6LeasesCountRequest)(nil),           // 103: proto.GetSubnet6LeasesCountRequest
	(*GetPool6LeasesCountRequest)(nil),             // 104: proto.GetPool6LeasesCountRequest
	(*GetReservation6LeasesCountRequest)(nil),      // 105: proto.GetReservation6LeasesCountRequest
	(*GetReservation6LeasesRequest)(nil),           // 106: proto.GetReservation6LeasesRequest
	(*GetSubnet4LeasesRequest)(nil),                // 107: proto.GetSubnet4LeasesRequest
	(*GetSubnet4LeaseRequest)(nil),                 // 108: proto.GetSubnet4LeaseRequest
	(*GetSubnet4LeasesWithIpsRequest)(nil),         // 109: proto.GetSubnet4LeasesWithIpsRequest
	(*GetSubnets4LeasesWithMacsRequest)(nil),       // 110: proto.GetSubnets4LeasesWithMacsRequest
	(*GetSubnets4LeasesWithHostnamesRequest)(nil),  // 111: proto.GetSubnets4LeasesWithHostnamesRequest
	(*GetLeases4WithIpsResponse)(nil),              // 112: proto.GetLeases4WithIpsResponse
	(*GetSubnet6LeasesWithIpsRequest)(nil),         // 113: proto.GetSubnet6LeasesWithIpsRequest
	(*GetSubnets6LeasesWithDuidsRequest)(nil),      // 114: proto.GetSubnets6LeasesWithDuidsRequest
	(*GetSubnets6LeasesWithMacsRequest)(nil),       // 115: proto.GetSubnets6LeasesWithMacsRequest
	(*GetSubnets6LeasesWithHostnamesRequest)(nil),  // 116: proto.GetSubnets6LeasesWithHostnamesRequest
	(*GetLeases6WithIpsResponse)(nil),              // 117: proto.GetLeases6WithIpsResponse
	(*GetSubnet6LeasesRequest)(nil),                // 118: proto.GetSubnet6LeasesRequest
	(*GetSubnet6LeaseRequest)(nil),                 // 119: proto.GetSubnet6LeaseRequest
	(*GetPool4LeasesRequest)(nil),                  // 120: proto.GetPool4LeasesRequest
	(*GetPool6LeasesRequest)(nil),                  // 121: proto.GetPool6LeasesRequest
	(*DHCPLease4)(nil),                             // 122: proto.DHCPLease4
	(*GetLeases4Response)(nil),                     // 123: proto.GetLeases4Response
	(*GetLease4Response)(nil),                      // 124: proto.GetLease4Response
	(*DHCPLease6)(nil),                             // 125: proto.DHCPLease6
	(*GetLeases6Response)(nil),                     // 126: proto.GetLeases6Response
	(*GetLease6Response)(nil),                      // 127: proto.GetLease6Response
	(*CreateSubnets4AndPoolsRequest)(nil),          // 128: proto.CreateSubnets4AndPoolsRequest
	(*CreatePools4Request)(nil),                    // 129: proto.CreatePools4Request
	(*CreateReservedPools4Request)(nil),            // 130: proto.CreateReservedPools4Request
	(*CreateReservations4Request)(nil),             // 131: proto.CreateReservations4Request
	(*DeleteSubnets4Request)(nil),                  // 132: proto.DeleteSubnets4Request
	(*DeletePools4Request)(nil),                    // 133: proto.DeletePools4Request
	(*DeleteReservedPools4Request)(nil),            // 134: proto.DeleteReservedPools4Request
	(*DeleteReservations4Request)(nil),             // 135: proto.DeleteReservations4Request
	(*CreateSubnets6AndPoolsRequest)(nil),          // 136: proto.CreateSubnets6AndPoolsRequest
	(*CreatePools6Request)(nil),                    // 137: proto.CreatePools6Request
	(*CreateReservedPools6Request)(nil),            // 138: proto.CreateReservedPools6Request
	(*CreateReservations6Request)(nil),             // 139: proto.CreateReservations6Request
	(*CreatePdPoolsRequest)(nil),                   // 140: proto.CreatePdPoolsRequest
	(*CreateReservedPdPoolsRequest)(nil),           // 141: proto.CreateReservedPdPoolsRequest
	(*DeleteSubnets6Request)(nil),                  // 142: proto.DeleteSubnets6Request
	(*DeletePools6Request)(nil),                    // 143: proto.DeletePools6Request
	(*DeleteReservedPools6Request)(nil),            // 144: proto.DeleteReservedPools6Request
	(*DeletePdPoolsRequest)(nil),                   // 145: proto.DeletePdPoolsRequest
	(*DeleteReservedPdPoolsRequest)(nil),           // 146: proto.DeleteReservedPdPoolsRequest
	(*DeleteReservations6Request)(nil),             // 147: proto.DeleteReservations6Request
	(*CreateSharedNetworks4Request)(nil),           // 148: proto.CreateSharedNetworks4Request
	(*CreateSharedNetwork4Request)(nil),            // 149: proto.CreateSharedNetwork4Request
	(*DeleteSharedNetworks4Request)(nil),           // 150: proto.DeleteSharedNetworks4Request
	(*DeleteSharedNetwork4Request)(nil),            // 151: proto.DeleteSharedNetwork4Request
	(*UpdateSharedNetwork4Request)(nil),            // 152: proto.UpdateSharedNetwork4Request
	(*DeleteLease4Request)(nil),                    // 153: proto.DeleteLease4Request
	(*DeleteLeases4Request)(nil),                   // 154: proto.DeleteLeases4Request
	(*DeleteLease6Request)(nil),                    // 155: proto.DeleteLease6Request
	(*DeleteLeases6Request)(nil),                   // 156: proto.DeleteLeases6Request
	(*DeleteLeaseResponse)(nil),                    // 157: proto.DeleteLeaseResponse
	nil,                                            // 158: proto.GetSubnetsLeasesCountResponse.SubnetsLeasesCountEntry
	nil,                                            // 159: proto.GetLeases4WithIpsResponse.LeasesEntry
	nil,                                            // 160: proto.GetLeases6WithIpsResponse.LeasesEntry
}
var file_dhcp_agent_proto_depIdxs = []int32{
	4,   // 0: proto.CreateSubnet4Request.subnet_options:type_name -> proto.SubnetOption
	4,   // 1: proto.UpdateSubnet4Request.subnet_options:type_name -> proto.SubnetOption
	4,   // 2: proto.CreateSubnet6Request.subnet_options:type_name -> proto.SubnetOption
	4,   // 3: proto.UpdateSubnet6Request.subnet_options:type_name -> proto.SubnetOption
	28,  // 4: proto.CreateClientClasses4Request.client_classes:type_name -> proto.CreateClientClass4Request
	33,  // 5: proto.CreateClientClasses6Request.client_classes:type_name -> proto.CreateClientClass6Request
	38,  // 6: proto.CreateFingerprintsRequest.fingerprints:type_name -> proto.CreateFingerprintRequest
	40,  // 7: proto.DeleteFingerprintsRequest.fingerprints:type_name -> proto.DeleteFingerprintRequest
	40,  // 8: proto.UpdateFingerprintRequest.old:type_name -> proto.DeleteFingerprintRequest
	38,  // 9: proto.UpdateFingerprintRequest.new:type_name -> proto.CreateFingerprintRequest
	43,  // 10: proto.CreateOuisRequest.ouis:type_name -> proto.CreateOuiRequest
	62,  // 11: proto.CreateRateLimitMacsRequest.macs:type_name -> proto.CreateRateLimitMacRequest
	67,  // 12: proto.CreateRateLimitDuidsRequest.duids:type_name -> proto.CreateRateLimitDuidRequest
	73,  // 13: proto.AddressCode.layouts:type_name -> proto.AddressCodeLayout
	74,  // 14: proto.AddressCodeLayout.segments:type_name -> proto.AddressCodeLayoutSegment
	72,  // 15: proto.CreateAddressCodesRequest.address_codes:type_name -> proto.AddressCode
	73,  // 16: proto.CreateAddressCodeLayoutsRequest.layouts:type_name -> proto.AddressCodeLayout
	74,  // 17: proto.CreateAddressCodeLayoutSegmentsRequest.segments:type_name -> proto.AddressCodeLayoutSegment
	74,  // 18: proto.CreateAddressCodeLayoutSegmentRequest.segment:type_name -> proto.AddressCodeLayoutSegment
	74,  // 19: proto.UpdateAddressCodeLayoutSegmentRequest.old_segment:type_name -> proto.AddressCodeLayoutSegment
	74,  // 20: proto.UpdateAddressCodeLayoutSegmentRequest.new_segment:type_name -> proto.AddressCodeLayoutSegment
	91,  // 21: proto.CreateAssetsRequest.assets:type_name -> proto.CreateAssetRequest
	158, // 22: proto.GetSubnetsLeasesCountResponse.subnets_leases_count:type_name -> proto.GetSubnetsLeasesCountResponse.SubnetsLeasesCountEntry
	108, // 23: proto.GetSubnet4LeasesWithIpsRequest.addresses:type_name -> proto.GetSubnet4LeaseRequest
	159, // 24: proto.GetLeases4WithIpsResponse.leases:type_name -> proto.GetLeases4WithIpsResponse.LeasesEntry
	119, // 25: proto.GetSubnet6LeasesWithIpsRequest.addresses:type_name -> proto.GetSubnet6LeaseRequest
	160, // 26: proto.GetLeases6WithIpsResponse.leases:type_name -> proto.GetLeases6WithIpsResponse.LeasesEntry
	0,   // 27: proto.DHCPLease4.lease_state:type_name -> proto.LeaseState
	122, // 28: proto.GetLeases4Response.leases:type_name -> proto.DHCPLease4
	122, // 29: proto.GetLease4Response.lease:type_name -> proto.DHCPLease4
	1,   // 30: proto.DHCPLease6.hw_address_source:type_name -> proto.HwAddressSource
	0,   // 31: proto.DHCPLease6.lease_state:type_name -> proto.LeaseState
	125, // 32: proto.GetLeases6Response.leases:type_name -> proto.DHCPLease6
	125, // 33: proto.GetLease6Response.lease:type_name -> proto.DHCPLease6
	5,   // 34: proto.CreateSubnets4AndPoolsRequest.subnets:type_name -> proto.CreateSubnet4Request
	11,  // 35: proto.CreateSubnets4AndPoolsRequest.pools:type_name -> proto.CreatePool4Request
	13,  // 36: proto.CreateSubnets4AndPoolsRequest.reserved_pools:type_name -> proto.CreateReservedPool4Request
	19,  // 37: proto.CreateSubnets4AndPoolsRequest.reservations:type_name -> proto.CreateReservation4Request
	11,  // 38: proto.CreatePools4Request.pools:type_name -> proto.CreatePool4Request
	13,  // 39: proto.CreateReservedPools4Request.reserved_pools:type_name -> proto.CreateReservedPool4Request
	19,  // 40: proto.CreateReservations4Request.reservations:type_name -> proto.CreateReservation4Request
	12,  // 41: proto.DeletePools4Request.pools:type_name -> proto.DeletePool4Request
	14,  // 42: proto.DeleteReservedPools4Request.reserved_pools:type_name -> proto.DeleteReservedPool4Request
	20,  // 43: proto.DeleteReservations4Request.reservations:type_name -> proto.DeleteReservation4Request
	8,   // 44: proto.CreateSubnets6AndPoolsRequest.subnets:type_name -> proto.CreateSubnet6Request
	15,  // 45: proto.CreateSubnets6AndPoolsRequest.pools:type_name -> proto.CreatePool6Request
	17,  // 46: proto.CreateSubnets6AndPoolsRequest.reserved_pools:type_name -> proto.CreateReservedPool6Request
	21,  // 47: proto.CreateSubnets6AndPoolsRequest.reservations:type_name -> proto.CreateReservation6Request
	23,  // 48: proto.CreateSubnets6AndPoolsRequest.pd_pools:type_name -> proto.CreatePdPoolRequest
	25,  // 49: proto.CreateSubnets6AndPoolsRequest.reserved_pd_pools:type_name -> proto.CreateReservedPdPoolRequest
	15,  // 50: proto.CreatePools6Request.pools:type_name -> proto.CreatePool6Request
	17,  // 51: proto.CreateReservedPools6Request.reserved_pools:type_name -> proto.CreateReservedPool6Request
	21,  // 52: proto.CreateReservations6Request.reservations:type_name -> proto.CreateReservation6Request
	23,  // 53: proto.CreatePdPoolsRequest.pd_pools:type_name -> proto.CreatePdPoolRequest
	25,  // 54: proto.CreateReservedPdPoolsRequest.reserved_pd_pools:type_name -> proto.CreateReservedPdPoolRequest
	16,  // 55: proto.DeletePools6Request.pools:type_name -> proto.DeletePool6Request
	18,  // 56: proto.DeleteReservedPools6Request.reserved_pools:type_name -> proto.DeleteReservedPool6Request
	24,  // 57: proto.DeletePdPoolsRequest.pd_pools:type_name -> proto.DeletePdPoolRequest
	26,  // 58: proto.DeleteReservedPdPoolsRequest.reserved_pd_pools:type_name -> proto.DeleteReservedPdPoolRequest
	22,  // 59: proto.DeleteReservations6Request.reservations:type_name -> proto.DeleteReservation6Request
	149, // 60: proto.CreateSharedNetworks4Request.shared_networks:type_name -> proto.CreateSharedNetwork4Request
	151, // 61: proto.UpdateSharedNetwork4Request.old:type_name -> proto.DeleteSharedNetwork4Request
	149, // 62: proto.UpdateSharedNetwork4Request.new:type_name -> proto.CreateSharedNetwork4Request
	122, // 63: proto.GetLeases4WithIpsResponse.LeasesEntry.value:type_name -> proto.DHCPLease4
	125, // 64: proto.GetLeases6WithIpsResponse.LeasesEntry.value:type_name -> proto.DHCPLease6
	95,  // 65: proto.DHCPManager.GetSubnets4LeasesCount:input_type -> proto.GetSubnetsLeasesCountRequest
	96,  // 66: proto.DHCPManager.GetSubnets4LeasesCountWithIds:input_type -> proto.GetSubnetsLeasesCountWithIdsRequest
	107, // 67: proto.DHCPManager.GetSubnet4Leases:input_type -> proto.GetSubnet4LeasesRequest
	98,  // 68: proto.DHCPManager.GetSubnet4LeasesCount:input_type -> proto.GetSubnet4LeasesCountRequest
	108, // 69: proto.DHCPManager.GetSubnet4Lease:input_type -> proto.GetSubnet4LeaseRequest
	109, // 70: proto.DHCPManager.GetSubnet4LeasesWithIps:input_type -> proto.GetSubnet4LeasesWithIpsRequest
	110, // 71: proto.DHCPManager.GetSubnets4LeasesWithMacs:input_type -> proto.GetSubnets4LeasesWithMacsRequest
	111, // 72: proto.DHCPManager.GetSubnets4LeasesWithHostnames:input_type -> proto.GetSubnets4LeasesWithHostnamesRequest
	120, // 73: proto.DHCPManager.GetPool4Leases:input_type -> proto.GetPool4LeasesRequest
	99,  // 74: proto.DHCPManager.GetPool4LeasesCount:input_type -> proto.GetPool4LeasesCountRequest
	100, // 75: proto.DHCPManager.GetReservation4LeaseCount:input_type -> proto.GetReservation4LeaseCountRequest
	101, // 76: proto.DHCPManager.GetReservation4Lease:input_type -> proto.GetReservation4LeaseRequest
	153, // 77: proto.DHCPManager.DeleteLease4:input_type -> proto.DeleteLease4Request
	154, // 78: proto.DHCPManager.DeleteLeases4:input_type -> proto.DeleteLeases4Request
	95,  // 79: proto.DHCPManager.GetSubnets6LeasesCount:input_type -> proto.GetSubnetsLeasesCountRequest
	96,  // 80: proto.DHCPManager.GetSubnets6LeasesCountWithIds:input_type -> proto.GetSubnetsLeasesCountWithIdsRequest
	118, // 81: proto.DHCPManager.GetSubnet6Leases:input_type -> proto.GetSubnet6LeasesRequest
	103, // 82: proto.DHCPManager.GetSubnet6LeasesCount:input_type -> proto.GetSubnet6LeasesCountRequest
	103, // 83: proto.DHCPManager.GetSubnet6LeasesCountByAddressCode:input_type -> proto.GetSubnet6LeasesCountRequest
	119, // 84: proto.DHCPManager.GetSubnet6Lease:input_type -> proto.GetSubnet6LeaseRequest
	113, // 85: proto.DHCPManager.GetSubnet6LeasesWithIps:input_type -> proto.GetSubnet6LeasesWithIpsRequest
	114, // 86: proto.DHCPManager.GetSubnets6LeasesWithDuids:input_type -> proto.GetSubnets6LeasesWithDuidsRequest
	115, // 87: proto.DHCPManager.GetSubnets6LeasesWithMacs:input_type -> proto.GetSubnets6LeasesWithMacsRequest
	116, // 88: proto.DHCPManager.GetSubnets6LeasesWithHostnames:input_type -> proto.GetSubnets6LeasesWithHostnamesRequest
	121, // 89: proto.DHCPManager.GetPool6Leases:input_type -> proto.GetPool6LeasesRequest
	104, // 90: proto.DHCPManager.GetPool6LeasesCount:input_type -> proto.GetPool6LeasesCountRequest
	105, // 91: proto.DHCPManager.GetReservation6LeasesCount:input_type -> proto.GetReservation6LeasesCountRequest
	106, // 92: proto.DHCPManager.GetReservation6Leases:input_type -> proto.GetReservation6LeasesRequest
	155, // 93: proto.DHCPManager.DeleteLease6:input_type -> proto.DeleteLease6Request
	156, // 94: proto.DHCPManager.DeleteLeases6:input_type -> proto.DeleteLeases6Request
	2,   // 95: proto.DHCPManager.GetDHCPNodes:input_type -> proto.GetDHCPNodesRequest
	97,  // 96: proto.DHCPManager.GetSubnets4LeasesCount:output_type -> proto.GetSubnetsLeasesCountResponse
	97,  // 97: proto.DHCPManager.GetSubnets4LeasesCountWithIds:output_type -> proto.GetSubnetsLeasesCountResponse
	123, // 98: proto.DHCPManager.GetSubnet4Leases:output_type -> proto.GetLeases4Response
	102, // 99: proto.DHCPManager.GetSubnet4LeasesCount:output_type -> proto.GetLeasesCountResponse
	124, // 100: proto.DHCPManager.GetSubnet4Lease:output_type -> proto.GetLease4Response
	123, // 101: proto.DHCPManager.GetSubnet4LeasesWithIps:output_type -> proto.GetLeases4Response
	123, // 102: proto.DHCPManager.GetSubnets4LeasesWithMacs:output_type -> proto.GetLeases4Response
	123, // 103: proto.DHCPManager.GetSubnets4LeasesWithHostnames:output_type -> proto.GetLeases4Response
	123, // 104: proto.DHCPManager.GetPool4Leases:output_type -> proto.GetLeases4Response
	102, // 105: proto.DHCPManager.GetPool4LeasesCount:output_type -> proto.GetLeasesCountResponse
	102, // 106: proto.DHCPManager.GetReservation4LeaseCount:output_type -> proto.GetLeasesCountResponse
	124, // 107: proto.DHCPManager.GetReservation4Lease:output_type -> proto.GetLease4Response
	157, // 108: proto.DHCPManager.DeleteLease4:output_type -> proto.DeleteLeaseResponse
	157, // 109: proto.DHCPManager.DeleteLeases4:output_type -> proto.DeleteLeaseResponse
	97,  // 110: proto.DHCPManager.GetSubnets6LeasesCount:output_type -> proto.GetSubnetsLeasesCountResponse
	97,  // 111: proto.DHCPManager.GetSubnets6LeasesCountWithIds:output_type -> proto.GetSubnetsLeasesCountResponse
	126, // 112: proto.DHCPManager.GetSubnet6Leases:output_type -> proto.GetLeases6Response
	102, // 113: proto.DHCPManager.GetSubnet6LeasesCount:output_type -> proto.GetLeasesCountResponse
	102, // 114: proto.DHCPManager.GetSubnet6LeasesCountByAddressCode:output_type -> proto.GetLeasesCountResponse
	127, // 115: proto.DHCPManager.GetSubnet6Lease:output_type -> proto.GetLease6Response
	126, // 116: proto.DHCPManager.GetSubnet6LeasesWithIps:output_type -> proto.GetLeases6Response
	126, // 117: proto.DHCPManager.GetSubnets6LeasesWithDuids:output_type -> proto.GetLeases6Response
	126, // 118: proto.DHCPManager.GetSubnets6LeasesWithMacs:output_type -> proto.GetLeases6Response
	126, // 119: proto.DHCPManager.GetSubnets6LeasesWithHostnames:output_type -> proto.GetLeases6Response
	126, // 120: proto.DHCPManager.GetPool6Leases:output_type -> proto.GetLeases6Response
	102, // 121: proto.DHCPManager.GetPool6LeasesCount:output_type -> proto.GetLeasesCountResponse
	102, // 122: proto.DHCPManager.GetReservation6LeasesCount:output_type -> proto.GetLeasesCountResponse
	126, // 123: proto.DHCPManager.GetReservation6Leases:output_type -> proto.GetLeases6Response
	157, // 124: proto.DHCPManager.DeleteLease6:output_type -> proto.DeleteLeaseResponse
	157, // 125: proto.DHCPManager.DeleteLeases6:output_type -> proto.DeleteLeaseResponse
	3,   // 126: proto.DHCPManager.GetDHCPNodes:output_type -> proto.GetDHCPNodesResponse
	96,  // [96:127] is the sub-list for method output_type
	65,  // [65:96] is the sub-list for method input_type
	65,  // [65:65] is the sub-list for extension type_name
	65,  // [65:65] is the sub-list for extension extendee
	0,   // [0:65] is the sub-list for field type_name
}

func init() { file_dhcp_agent_proto_init() }
func file_dhcp_agent_proto_init() {
	if File_dhcp_agent_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_dhcp_agent_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDHCPNodesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_agent_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDHCPNodesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_agent_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubnetOption); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_agent_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateSubnet4Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_agent_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteSubnet4Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_agent_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateSubnet4Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_agent_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateSubnet6Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_agent_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteSubnet6Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_agent_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateSubnet6Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_agent_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreatePool4Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_agent_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeletePool4Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_agent_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateReservedPool4Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_agent_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteReservedPool4Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_agent_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreatePool6Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_agent_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeletePool6Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_agent_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateReservedPool6Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_agent_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteReservedPool6Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_agent_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateReservation4Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_agent_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteReservation4Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_agent_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateReservation6Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_agent_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteReservation6Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_agent_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreatePdPoolRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_agent_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeletePdPoolRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_agent_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateReservedPdPoolRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_agent_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteReservedPdPoolRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_agent_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateClientClasses4Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_agent_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateClientClass4Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_agent_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteClientClasses4Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_agent_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteClientClass4Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_agent_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateClientClass4Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_agent_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateClientClasses6Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_agent_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateClientClass6Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_agent_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteClientClasses6Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_agent_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteClientClass6Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_agent_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateClientClass6Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_agent_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateFingerprintsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_agent_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateFingerprintRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_agent_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteFingerprintsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_agent_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteFingerprintRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_agent_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateFingerprintRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_agent_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateOuisRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_agent_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateOuiRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_agent_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteOuisRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_agent_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteOuiRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_agent_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateOuiRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_agent_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateAdmitRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_agent_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateAdmitMacsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_agent_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateAdmitMacRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_agent_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteAdmitMacsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_agent_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteAdmitMacRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_agent_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateAdmitDuidsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_agent_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateAdmitDuidRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_agent_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteAdmitDuidsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_agent_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteAdmitDuidRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_agent_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateAdmitFingerprintsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_agent_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateAdmitFingerprintRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_agent_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteAdmitFingerprintsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_agent_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteAdmitFingerprintRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_agent_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateRateLimitRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_agent_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateRateLimitMacsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_agent_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateRateLimitMacRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_agent_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteRateLimitMacsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_agent_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteRateLimitMacRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_agent_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateRateLimitMacRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_agent_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateRateLimitDuidsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_agent_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateRateLimitDuidRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_agent_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteRateLimitDuidsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_agent_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteRateLimitDuidRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_agent_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateRateLimitDuidRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_agent_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdatePingerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_agent_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddressCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_agent_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddressCodeLayout); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_agent_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddressCodeLayoutSegment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_agent_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateAddressCodesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_agent_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateAddressCodeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_agent_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteAddressCodesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_agent_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteAddressCodeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_agent_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateAddressCodeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_agent_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateAddressCodeLayoutsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_agent_proto_msgTypes[79].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateAddressCodeLayoutRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_agent_proto_msgTypes[80].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteAddressCodeLayoutsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_agent_proto_msgTypes[81].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteAddressCodeLayoutRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_agent_proto_msgTypes[82].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateAddressCodeLayoutRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_agent_proto_msgTypes[83].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateAddressCodeLayoutSegmentsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_agent_proto_msgTypes[84].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateAddressCodeLayoutSegmentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_agent_proto_msgTypes[85].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteAddressCodeLayoutSegmentsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_agent_proto_msgTypes[86].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteAddressCodeLayoutSegmentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_agent_proto_msgTypes[87].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateAddressCodeLayoutSegmentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_agent_proto_msgTypes[88].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateAssetsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_agent_proto_msgTypes[89].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateAssetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_agent_proto_msgTypes[90].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteAssetsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_agent_proto_msgTypes[91].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteAssetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_agent_proto_msgTypes[92].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateAssetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_agent_proto_msgTypes[93].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSubnetsLeasesCountRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_agent_proto_msgTypes[94].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSubnetsLeasesCountWithIdsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_agent_proto_msgTypes[95].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSubnetsLeasesCountResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_agent_proto_msgTypes[96].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSubnet4LeasesCountRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_agent_proto_msgTypes[97].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPool4LeasesCountRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_agent_proto_msgTypes[98].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetReservation4LeaseCountRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_agent_proto_msgTypes[99].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetReservation4LeaseRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_agent_proto_msgTypes[100].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLeasesCountResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_agent_proto_msgTypes[101].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSubnet6LeasesCountRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_agent_proto_msgTypes[102].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPool6LeasesCountRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_agent_proto_msgTypes[103].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetReservation6LeasesCountRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_agent_proto_msgTypes[104].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetReservation6LeasesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_agent_proto_msgTypes[105].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSubnet4LeasesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_agent_proto_msgTypes[106].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSubnet4LeaseRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_agent_proto_msgTypes[107].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSubnet4LeasesWithIpsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_agent_proto_msgTypes[108].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSubnets4LeasesWithMacsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_agent_proto_msgTypes[109].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSubnets4LeasesWithHostnamesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_agent_proto_msgTypes[110].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLeases4WithIpsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_agent_proto_msgTypes[111].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSubnet6LeasesWithIpsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_agent_proto_msgTypes[112].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSubnets6LeasesWithDuidsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_agent_proto_msgTypes[113].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSubnets6LeasesWithMacsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_agent_proto_msgTypes[114].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSubnets6LeasesWithHostnamesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_agent_proto_msgTypes[115].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLeases6WithIpsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_agent_proto_msgTypes[116].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSubnet6LeasesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_agent_proto_msgTypes[117].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSubnet6LeaseRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_agent_proto_msgTypes[118].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPool4LeasesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_agent_proto_msgTypes[119].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPool6LeasesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_agent_proto_msgTypes[120].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DHCPLease4); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_agent_proto_msgTypes[121].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLeases4Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_agent_proto_msgTypes[122].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLease4Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_agent_proto_msgTypes[123].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DHCPLease6); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_agent_proto_msgTypes[124].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLeases6Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_agent_proto_msgTypes[125].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLease6Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_agent_proto_msgTypes[126].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateSubnets4AndPoolsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_agent_proto_msgTypes[127].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreatePools4Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_agent_proto_msgTypes[128].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateReservedPools4Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_agent_proto_msgTypes[129].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateReservations4Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_agent_proto_msgTypes[130].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteSubnets4Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_agent_proto_msgTypes[131].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeletePools4Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_agent_proto_msgTypes[132].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteReservedPools4Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_agent_proto_msgTypes[133].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteReservations4Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_agent_proto_msgTypes[134].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateSubnets6AndPoolsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_agent_proto_msgTypes[135].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreatePools6Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_agent_proto_msgTypes[136].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateReservedPools6Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_agent_proto_msgTypes[137].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateReservations6Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_agent_proto_msgTypes[138].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreatePdPoolsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_agent_proto_msgTypes[139].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateReservedPdPoolsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_agent_proto_msgTypes[140].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteSubnets6Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_agent_proto_msgTypes[141].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeletePools6Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_agent_proto_msgTypes[142].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteReservedPools6Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_agent_proto_msgTypes[143].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeletePdPoolsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_agent_proto_msgTypes[144].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteReservedPdPoolsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_agent_proto_msgTypes[145].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteReservations6Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_agent_proto_msgTypes[146].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateSharedNetworks4Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_agent_proto_msgTypes[147].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateSharedNetwork4Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_agent_proto_msgTypes[148].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteSharedNetworks4Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_agent_proto_msgTypes[149].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteSharedNetwork4Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_agent_proto_msgTypes[150].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateSharedNetwork4Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_agent_proto_msgTypes[151].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteLease4Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_agent_proto_msgTypes[152].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteLeases4Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_agent_proto_msgTypes[153].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteLease6Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_agent_proto_msgTypes[154].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteLeases6Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_agent_proto_msgTypes[155].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteLeaseResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_dhcp_agent_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   159,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_dhcp_agent_proto_goTypes,
		DependencyIndexes: file_dhcp_agent_proto_depIdxs,
		EnumInfos:         file_dhcp_agent_proto_enumTypes,
		MessageInfos:      file_dhcp_agent_proto_msgTypes,
	}.Build()
	File_dhcp_agent_proto = out.File
	file_dhcp_agent_proto_rawDesc = nil
	file_dhcp_agent_proto_goTypes = nil
	file_dhcp_agent_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// DHCPManagerClient is the client API for DHCPManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DHCPManagerClient interface {
	GetSubnets4LeasesCount(ctx context.Context, in *GetSubnetsLeasesCountRequest, opts ...grpc.CallOption) (*GetSubnetsLeasesCountResponse, error)
	GetSubnets4LeasesCountWithIds(ctx context.Context, in *GetSubnetsLeasesCountWithIdsRequest, opts ...grpc.CallOption) (*GetSubnetsLeasesCountResponse, error)
	GetSubnet4Leases(ctx context.Context, in *GetSubnet4LeasesRequest, opts ...grpc.CallOption) (*GetLeases4Response, error)
	GetSubnet4LeasesCount(ctx context.Context, in *GetSubnet4LeasesCountRequest, opts ...grpc.CallOption) (*GetLeasesCountResponse, error)
	GetSubnet4Lease(ctx context.Context, in *GetSubnet4LeaseRequest, opts ...grpc.CallOption) (*GetLease4Response, error)
	GetSubnet4LeasesWithIps(ctx context.Context, in *GetSubnet4LeasesWithIpsRequest, opts ...grpc.CallOption) (*GetLeases4Response, error)
	GetSubnets4LeasesWithMacs(ctx context.Context, in *GetSubnets4LeasesWithMacsRequest, opts ...grpc.CallOption) (*GetLeases4Response, error)
	GetSubnets4LeasesWithHostnames(ctx context.Context, in *GetSubnets4LeasesWithHostnamesRequest, opts ...grpc.CallOption) (*GetLeases4Response, error)
	GetPool4Leases(ctx context.Context, in *GetPool4LeasesRequest, opts ...grpc.CallOption) (*GetLeases4Response, error)
	GetPool4LeasesCount(ctx context.Context, in *GetPool4LeasesCountRequest, opts ...grpc.CallOption) (*GetLeasesCountResponse, error)
	GetReservation4LeaseCount(ctx context.Context, in *GetReservation4LeaseCountRequest, opts ...grpc.CallOption) (*GetLeasesCountResponse, error)
	GetReservation4Lease(ctx context.Context, in *GetReservation4LeaseRequest, opts ...grpc.CallOption) (*GetLease4Response, error)
	DeleteLease4(ctx context.Context, in *DeleteLease4Request, opts ...grpc.CallOption) (*DeleteLeaseResponse, error)
	DeleteLeases4(ctx context.Context, in *DeleteLeases4Request, opts ...grpc.CallOption) (*DeleteLeaseResponse, error)
	GetSubnets6LeasesCount(ctx context.Context, in *GetSubnetsLeasesCountRequest, opts ...grpc.CallOption) (*GetSubnetsLeasesCountResponse, error)
	GetSubnets6LeasesCountWithIds(ctx context.Context, in *GetSubnetsLeasesCountWithIdsRequest, opts ...grpc.CallOption) (*GetSubnetsLeasesCountResponse, error)
	GetSubnet6Leases(ctx context.Context, in *GetSubnet6LeasesRequest, opts ...grpc.CallOption) (*GetLeases6Response, error)
	GetSubnet6LeasesCount(ctx context.Context, in *GetSubnet6LeasesCountRequest, opts ...grpc.CallOption) (*GetLeasesCountResponse, error)
	GetSubnet6LeasesCountByAddressCode(ctx context.Context, in *GetSubnet6LeasesCountRequest, opts ...grpc.CallOption) (*GetLeasesCountResponse, error)
	GetSubnet6Lease(ctx context.Context, in *GetSubnet6LeaseRequest, opts ...grpc.CallOption) (*GetLease6Response, error)
	GetSubnet6LeasesWithIps(ctx context.Context, in *GetSubnet6LeasesWithIpsRequest, opts ...grpc.CallOption) (*GetLeases6Response, error)
	GetSubnets6LeasesWithDuids(ctx context.Context, in *GetSubnets6LeasesWithDuidsRequest, opts ...grpc.CallOption) (*GetLeases6Response, error)
	GetSubnets6LeasesWithMacs(ctx context.Context, in *GetSubnets6LeasesWithMacsRequest, opts ...grpc.CallOption) (*GetLeases6Response, error)
	GetSubnets6LeasesWithHostnames(ctx context.Context, in *GetSubnets6LeasesWithHostnamesRequest, opts ...grpc.CallOption) (*GetLeases6Response, error)
	GetPool6Leases(ctx context.Context, in *GetPool6LeasesRequest, opts ...grpc.CallOption) (*GetLeases6Response, error)
	GetPool6LeasesCount(ctx context.Context, in *GetPool6LeasesCountRequest, opts ...grpc.CallOption) (*GetLeasesCountResponse, error)
	GetReservation6LeasesCount(ctx context.Context, in *GetReservation6LeasesCountRequest, opts ...grpc.CallOption) (*GetLeasesCountResponse, error)
	GetReservation6Leases(ctx context.Context, in *GetReservation6LeasesRequest, opts ...grpc.CallOption) (*GetLeases6Response, error)
	DeleteLease6(ctx context.Context, in *DeleteLease6Request, opts ...grpc.CallOption) (*DeleteLeaseResponse, error)
	DeleteLeases6(ctx context.Context, in *DeleteLeases6Request, opts ...grpc.CallOption) (*DeleteLeaseResponse, error)
	GetDHCPNodes(ctx context.Context, in *GetDHCPNodesRequest, opts ...grpc.CallOption) (*GetDHCPNodesResponse, error)
}

type dHCPManagerClient struct {
	cc grpc.ClientConnInterface
}

func NewDHCPManagerClient(cc grpc.ClientConnInterface) DHCPManagerClient {
	return &dHCPManagerClient{cc}
}

func (c *dHCPManagerClient) GetSubnets4LeasesCount(ctx context.Context, in *GetSubnetsLeasesCountRequest, opts ...grpc.CallOption) (*GetSubnetsLeasesCountResponse, error) {
	out := new(GetSubnetsLeasesCountResponse)
	err := c.cc.Invoke(ctx, "/proto.DHCPManager/GetSubnets4LeasesCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dHCPManagerClient) GetSubnets4LeasesCountWithIds(ctx context.Context, in *GetSubnetsLeasesCountWithIdsRequest, opts ...grpc.CallOption) (*GetSubnetsLeasesCountResponse, error) {
	out := new(GetSubnetsLeasesCountResponse)
	err := c.cc.Invoke(ctx, "/proto.DHCPManager/GetSubnets4LeasesCountWithIds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dHCPManagerClient) GetSubnet4Leases(ctx context.Context, in *GetSubnet4LeasesRequest, opts ...grpc.CallOption) (*GetLeases4Response, error) {
	out := new(GetLeases4Response)
	err := c.cc.Invoke(ctx, "/proto.DHCPManager/GetSubnet4Leases", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dHCPManagerClient) GetSubnet4LeasesCount(ctx context.Context, in *GetSubnet4LeasesCountRequest, opts ...grpc.CallOption) (*GetLeasesCountResponse, error) {
	out := new(GetLeasesCountResponse)
	err := c.cc.Invoke(ctx, "/proto.DHCPManager/GetSubnet4LeasesCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dHCPManagerClient) GetSubnet4Lease(ctx context.Context, in *GetSubnet4LeaseRequest, opts ...grpc.CallOption) (*GetLease4Response, error) {
	out := new(GetLease4Response)
	err := c.cc.Invoke(ctx, "/proto.DHCPManager/GetSubnet4Lease", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dHCPManagerClient) GetSubnet4LeasesWithIps(ctx context.Context, in *GetSubnet4LeasesWithIpsRequest, opts ...grpc.CallOption) (*GetLeases4Response, error) {
	out := new(GetLeases4Response)
	err := c.cc.Invoke(ctx, "/proto.DHCPManager/GetSubnet4LeasesWithIps", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dHCPManagerClient) GetSubnets4LeasesWithMacs(ctx context.Context, in *GetSubnets4LeasesWithMacsRequest, opts ...grpc.CallOption) (*GetLeases4Response, error) {
	out := new(GetLeases4Response)
	err := c.cc.Invoke(ctx, "/proto.DHCPManager/GetSubnets4LeasesWithMacs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dHCPManagerClient) GetSubnets4LeasesWithHostnames(ctx context.Context, in *GetSubnets4LeasesWithHostnamesRequest, opts ...grpc.CallOption) (*GetLeases4Response, error) {
	out := new(GetLeases4Response)
	err := c.cc.Invoke(ctx, "/proto.DHCPManager/GetSubnets4LeasesWithHostnames", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dHCPManagerClient) GetPool4Leases(ctx context.Context, in *GetPool4LeasesRequest, opts ...grpc.CallOption) (*GetLeases4Response, error) {
	out := new(GetLeases4Response)
	err := c.cc.Invoke(ctx, "/proto.DHCPManager/GetPool4Leases", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dHCPManagerClient) GetPool4LeasesCount(ctx context.Context, in *GetPool4LeasesCountRequest, opts ...grpc.CallOption) (*GetLeasesCountResponse, error) {
	out := new(GetLeasesCountResponse)
	err := c.cc.Invoke(ctx, "/proto.DHCPManager/GetPool4LeasesCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dHCPManagerClient) GetReservation4LeaseCount(ctx context.Context, in *GetReservation4LeaseCountRequest, opts ...grpc.CallOption) (*GetLeasesCountResponse, error) {
	out := new(GetLeasesCountResponse)
	err := c.cc.Invoke(ctx, "/proto.DHCPManager/GetReservation4LeaseCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dHCPManagerClient) GetReservation4Lease(ctx context.Context, in *GetReservation4LeaseRequest, opts ...grpc.CallOption) (*GetLease4Response, error) {
	out := new(GetLease4Response)
	err := c.cc.Invoke(ctx, "/proto.DHCPManager/GetReservation4Lease", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dHCPManagerClient) DeleteLease4(ctx context.Context, in *DeleteLease4Request, opts ...grpc.CallOption) (*DeleteLeaseResponse, error) {
	out := new(DeleteLeaseResponse)
	err := c.cc.Invoke(ctx, "/proto.DHCPManager/DeleteLease4", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dHCPManagerClient) DeleteLeases4(ctx context.Context, in *DeleteLeases4Request, opts ...grpc.CallOption) (*DeleteLeaseResponse, error) {
	out := new(DeleteLeaseResponse)
	err := c.cc.Invoke(ctx, "/proto.DHCPManager/DeleteLeases4", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dHCPManagerClient) GetSubnets6LeasesCount(ctx context.Context, in *GetSubnetsLeasesCountRequest, opts ...grpc.CallOption) (*GetSubnetsLeasesCountResponse, error) {
	out := new(GetSubnetsLeasesCountResponse)
	err := c.cc.Invoke(ctx, "/proto.DHCPManager/GetSubnets6LeasesCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dHCPManagerClient) GetSubnets6LeasesCountWithIds(ctx context.Context, in *GetSubnetsLeasesCountWithIdsRequest, opts ...grpc.CallOption) (*GetSubnetsLeasesCountResponse, error) {
	out := new(GetSubnetsLeasesCountResponse)
	err := c.cc.Invoke(ctx, "/proto.DHCPManager/GetSubnets6LeasesCountWithIds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dHCPManagerClient) GetSubnet6Leases(ctx context.Context, in *GetSubnet6LeasesRequest, opts ...grpc.CallOption) (*GetLeases6Response, error) {
	out := new(GetLeases6Response)
	err := c.cc.Invoke(ctx, "/proto.DHCPManager/GetSubnet6Leases", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dHCPManagerClient) GetSubnet6LeasesCount(ctx context.Context, in *GetSubnet6LeasesCountRequest, opts ...grpc.CallOption) (*GetLeasesCountResponse, error) {
	out := new(GetLeasesCountResponse)
	err := c.cc.Invoke(ctx, "/proto.DHCPManager/GetSubnet6LeasesCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dHCPManagerClient) GetSubnet6LeasesCountByAddressCode(ctx context.Context, in *GetSubnet6LeasesCountRequest, opts ...grpc.CallOption) (*GetLeasesCountResponse, error) {
	out := new(GetLeasesCountResponse)
	err := c.cc.Invoke(ctx, "/proto.DHCPManager/GetSubnet6LeasesCountByAddressCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dHCPManagerClient) GetSubnet6Lease(ctx context.Context, in *GetSubnet6LeaseRequest, opts ...grpc.CallOption) (*GetLease6Response, error) {
	out := new(GetLease6Response)
	err := c.cc.Invoke(ctx, "/proto.DHCPManager/GetSubnet6Lease", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dHCPManagerClient) GetSubnet6LeasesWithIps(ctx context.Context, in *GetSubnet6LeasesWithIpsRequest, opts ...grpc.CallOption) (*GetLeases6Response, error) {
	out := new(GetLeases6Response)
	err := c.cc.Invoke(ctx, "/proto.DHCPManager/GetSubnet6LeasesWithIps", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dHCPManagerClient) GetSubnets6LeasesWithDuids(ctx context.Context, in *GetSubnets6LeasesWithDuidsRequest, opts ...grpc.CallOption) (*GetLeases6Response, error) {
	out := new(GetLeases6Response)
	err := c.cc.Invoke(ctx, "/proto.DHCPManager/GetSubnets6LeasesWithDuids", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dHCPManagerClient) GetSubnets6LeasesWithMacs(ctx context.Context, in *GetSubnets6LeasesWithMacsRequest, opts ...grpc.CallOption) (*GetLeases6Response, error) {
	out := new(GetLeases6Response)
	err := c.cc.Invoke(ctx, "/proto.DHCPManager/GetSubnets6LeasesWithMacs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dHCPManagerClient) GetSubnets6LeasesWithHostnames(ctx context.Context, in *GetSubnets6LeasesWithHostnamesRequest, opts ...grpc.CallOption) (*GetLeases6Response, error) {
	out := new(GetLeases6Response)
	err := c.cc.Invoke(ctx, "/proto.DHCPManager/GetSubnets6LeasesWithHostnames", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dHCPManagerClient) GetPool6Leases(ctx context.Context, in *GetPool6LeasesRequest, opts ...grpc.CallOption) (*GetLeases6Response, error) {
	out := new(GetLeases6Response)
	err := c.cc.Invoke(ctx, "/proto.DHCPManager/GetPool6Leases", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dHCPManagerClient) GetPool6LeasesCount(ctx context.Context, in *GetPool6LeasesCountRequest, opts ...grpc.CallOption) (*GetLeasesCountResponse, error) {
	out := new(GetLeasesCountResponse)
	err := c.cc.Invoke(ctx, "/proto.DHCPManager/GetPool6LeasesCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dHCPManagerClient) GetReservation6LeasesCount(ctx context.Context, in *GetReservation6LeasesCountRequest, opts ...grpc.CallOption) (*GetLeasesCountResponse, error) {
	out := new(GetLeasesCountResponse)
	err := c.cc.Invoke(ctx, "/proto.DHCPManager/GetReservation6LeasesCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dHCPManagerClient) GetReservation6Leases(ctx context.Context, in *GetReservation6LeasesRequest, opts ...grpc.CallOption) (*GetLeases6Response, error) {
	out := new(GetLeases6Response)
	err := c.cc.Invoke(ctx, "/proto.DHCPManager/GetReservation6Leases", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dHCPManagerClient) DeleteLease6(ctx context.Context, in *DeleteLease6Request, opts ...grpc.CallOption) (*DeleteLeaseResponse, error) {
	out := new(DeleteLeaseResponse)
	err := c.cc.Invoke(ctx, "/proto.DHCPManager/DeleteLease6", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dHCPManagerClient) DeleteLeases6(ctx context.Context, in *DeleteLeases6Request, opts ...grpc.CallOption) (*DeleteLeaseResponse, error) {
	out := new(DeleteLeaseResponse)
	err := c.cc.Invoke(ctx, "/proto.DHCPManager/DeleteLeases6", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dHCPManagerClient) GetDHCPNodes(ctx context.Context, in *GetDHCPNodesRequest, opts ...grpc.CallOption) (*GetDHCPNodesResponse, error) {
	out := new(GetDHCPNodesResponse)
	err := c.cc.Invoke(ctx, "/proto.DHCPManager/GetDHCPNodes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DHCPManagerServer is the server API for DHCPManager service.
type DHCPManagerServer interface {
	GetSubnets4LeasesCount(context.Context, *GetSubnetsLeasesCountRequest) (*GetSubnetsLeasesCountResponse, error)
	GetSubnets4LeasesCountWithIds(context.Context, *GetSubnetsLeasesCountWithIdsRequest) (*GetSubnetsLeasesCountResponse, error)
	GetSubnet4Leases(context.Context, *GetSubnet4LeasesRequest) (*GetLeases4Response, error)
	GetSubnet4LeasesCount(context.Context, *GetSubnet4LeasesCountRequest) (*GetLeasesCountResponse, error)
	GetSubnet4Lease(context.Context, *GetSubnet4LeaseRequest) (*GetLease4Response, error)
	GetSubnet4LeasesWithIps(context.Context, *GetSubnet4LeasesWithIpsRequest) (*GetLeases4Response, error)
	GetSubnets4LeasesWithMacs(context.Context, *GetSubnets4LeasesWithMacsRequest) (*GetLeases4Response, error)
	GetSubnets4LeasesWithHostnames(context.Context, *GetSubnets4LeasesWithHostnamesRequest) (*GetLeases4Response, error)
	GetPool4Leases(context.Context, *GetPool4LeasesRequest) (*GetLeases4Response, error)
	GetPool4LeasesCount(context.Context, *GetPool4LeasesCountRequest) (*GetLeasesCountResponse, error)
	GetReservation4LeaseCount(context.Context, *GetReservation4LeaseCountRequest) (*GetLeasesCountResponse, error)
	GetReservation4Lease(context.Context, *GetReservation4LeaseRequest) (*GetLease4Response, error)
	DeleteLease4(context.Context, *DeleteLease4Request) (*DeleteLeaseResponse, error)
	DeleteLeases4(context.Context, *DeleteLeases4Request) (*DeleteLeaseResponse, error)
	GetSubnets6LeasesCount(context.Context, *GetSubnetsLeasesCountRequest) (*GetSubnetsLeasesCountResponse, error)
	GetSubnets6LeasesCountWithIds(context.Context, *GetSubnetsLeasesCountWithIdsRequest) (*GetSubnetsLeasesCountResponse, error)
	GetSubnet6Leases(context.Context, *GetSubnet6LeasesRequest) (*GetLeases6Response, error)
	GetSubnet6LeasesCount(context.Context, *GetSubnet6LeasesCountRequest) (*GetLeasesCountResponse, error)
	GetSubnet6LeasesCountByAddressCode(context.Context, *GetSubnet6LeasesCountRequest) (*GetLeasesCountResponse, error)
	GetSubnet6Lease(context.Context, *GetSubnet6LeaseRequest) (*GetLease6Response, error)
	GetSubnet6LeasesWithIps(context.Context, *GetSubnet6LeasesWithIpsRequest) (*GetLeases6Response, error)
	GetSubnets6LeasesWithDuids(context.Context, *GetSubnets6LeasesWithDuidsRequest) (*GetLeases6Response, error)
	GetSubnets6LeasesWithMacs(context.Context, *GetSubnets6LeasesWithMacsRequest) (*GetLeases6Response, error)
	GetSubnets6LeasesWithHostnames(context.Context, *GetSubnets6LeasesWithHostnamesRequest) (*GetLeases6Response, error)
	GetPool6Leases(context.Context, *GetPool6LeasesRequest) (*GetLeases6Response, error)
	GetPool6LeasesCount(context.Context, *GetPool6LeasesCountRequest) (*GetLeasesCountResponse, error)
	GetReservation6LeasesCount(context.Context, *GetReservation6LeasesCountRequest) (*GetLeasesCountResponse, error)
	GetReservation6Leases(context.Context, *GetReservation6LeasesRequest) (*GetLeases6Response, error)
	DeleteLease6(context.Context, *DeleteLease6Request) (*DeleteLeaseResponse, error)
	DeleteLeases6(context.Context, *DeleteLeases6Request) (*DeleteLeaseResponse, error)
	GetDHCPNodes(context.Context, *GetDHCPNodesRequest) (*GetDHCPNodesResponse, error)
}

// UnimplementedDHCPManagerServer can be embedded to have forward compatible implementations.
type UnimplementedDHCPManagerServer struct {
}

func (*UnimplementedDHCPManagerServer) GetSubnets4LeasesCount(context.Context, *GetSubnetsLeasesCountRequest) (*GetSubnetsLeasesCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSubnets4LeasesCount not implemented")
}
func (*UnimplementedDHCPManagerServer) GetSubnets4LeasesCountWithIds(context.Context, *GetSubnetsLeasesCountWithIdsRequest) (*GetSubnetsLeasesCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSubnets4LeasesCountWithIds not implemented")
}
func (*UnimplementedDHCPManagerServer) GetSubnet4Leases(context.Context, *GetSubnet4LeasesRequest) (*GetLeases4Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSubnet4Leases not implemented")
}
func (*UnimplementedDHCPManagerServer) GetSubnet4LeasesCount(context.Context, *GetSubnet4LeasesCountRequest) (*GetLeasesCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSubnet4LeasesCount not implemented")
}
func (*UnimplementedDHCPManagerServer) GetSubnet4Lease(context.Context, *GetSubnet4LeaseRequest) (*GetLease4Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSubnet4Lease not implemented")
}
func (*UnimplementedDHCPManagerServer) GetSubnet4LeasesWithIps(context.Context, *GetSubnet4LeasesWithIpsRequest) (*GetLeases4Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSubnet4LeasesWithIps not implemented")
}
func (*UnimplementedDHCPManagerServer) GetSubnets4LeasesWithMacs(context.Context, *GetSubnets4LeasesWithMacsRequest) (*GetLeases4Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSubnets4LeasesWithMacs not implemented")
}
func (*UnimplementedDHCPManagerServer) GetSubnets4LeasesWithHostnames(context.Context, *GetSubnets4LeasesWithHostnamesRequest) (*GetLeases4Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSubnets4LeasesWithHostnames not implemented")
}
func (*UnimplementedDHCPManagerServer) GetPool4Leases(context.Context, *GetPool4LeasesRequest) (*GetLeases4Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPool4Leases not implemented")
}
func (*UnimplementedDHCPManagerServer) GetPool4LeasesCount(context.Context, *GetPool4LeasesCountRequest) (*GetLeasesCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPool4LeasesCount not implemented")
}
func (*UnimplementedDHCPManagerServer) GetReservation4LeaseCount(context.Context, *GetReservation4LeaseCountRequest) (*GetLeasesCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReservation4LeaseCount not implemented")
}
func (*UnimplementedDHCPManagerServer) GetReservation4Lease(context.Context, *GetReservation4LeaseRequest) (*GetLease4Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReservation4Lease not implemented")
}
func (*UnimplementedDHCPManagerServer) DeleteLease4(context.Context, *DeleteLease4Request) (*DeleteLeaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteLease4 not implemented")
}
func (*UnimplementedDHCPManagerServer) DeleteLeases4(context.Context, *DeleteLeases4Request) (*DeleteLeaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteLeases4 not implemented")
}
func (*UnimplementedDHCPManagerServer) GetSubnets6LeasesCount(context.Context, *GetSubnetsLeasesCountRequest) (*GetSubnetsLeasesCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSubnets6LeasesCount not implemented")
}
func (*UnimplementedDHCPManagerServer) GetSubnets6LeasesCountWithIds(context.Context, *GetSubnetsLeasesCountWithIdsRequest) (*GetSubnetsLeasesCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSubnets6LeasesCountWithIds not implemented")
}
func (*UnimplementedDHCPManagerServer) GetSubnet6Leases(context.Context, *GetSubnet6LeasesRequest) (*GetLeases6Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSubnet6Leases not implemented")
}
func (*UnimplementedDHCPManagerServer) GetSubnet6LeasesCount(context.Context, *GetSubnet6LeasesCountRequest) (*GetLeasesCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSubnet6LeasesCount not implemented")
}
func (*UnimplementedDHCPManagerServer) GetSubnet6LeasesCountByAddressCode(context.Context, *GetSubnet6LeasesCountRequest) (*GetLeasesCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSubnet6LeasesCountByAddressCode not implemented")
}
func (*UnimplementedDHCPManagerServer) GetSubnet6Lease(context.Context, *GetSubnet6LeaseRequest) (*GetLease6Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSubnet6Lease not implemented")
}
func (*UnimplementedDHCPManagerServer) GetSubnet6LeasesWithIps(context.Context, *GetSubnet6LeasesWithIpsRequest) (*GetLeases6Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSubnet6LeasesWithIps not implemented")
}
func (*UnimplementedDHCPManagerServer) GetSubnets6LeasesWithDuids(context.Context, *GetSubnets6LeasesWithDuidsRequest) (*GetLeases6Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSubnets6LeasesWithDuids not implemented")
}
func (*UnimplementedDHCPManagerServer) GetSubnets6LeasesWithMacs(context.Context, *GetSubnets6LeasesWithMacsRequest) (*GetLeases6Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSubnets6LeasesWithMacs not implemented")
}
func (*UnimplementedDHCPManagerServer) GetSubnets6LeasesWithHostnames(context.Context, *GetSubnets6LeasesWithHostnamesRequest) (*GetLeases6Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSubnets6LeasesWithHostnames not implemented")
}
func (*UnimplementedDHCPManagerServer) GetPool6Leases(context.Context, *GetPool6LeasesRequest) (*GetLeases6Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPool6Leases not implemented")
}
func (*UnimplementedDHCPManagerServer) GetPool6LeasesCount(context.Context, *GetPool6LeasesCountRequest) (*GetLeasesCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPool6LeasesCount not implemented")
}
func (*UnimplementedDHCPManagerServer) GetReservation6LeasesCount(context.Context, *GetReservation6LeasesCountRequest) (*GetLeasesCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReservation6LeasesCount not implemented")
}
func (*UnimplementedDHCPManagerServer) GetReservation6Leases(context.Context, *GetReservation6LeasesRequest) (*GetLeases6Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReservation6Leases not implemented")
}
func (*UnimplementedDHCPManagerServer) DeleteLease6(context.Context, *DeleteLease6Request) (*DeleteLeaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteLease6 not implemented")
}
func (*UnimplementedDHCPManagerServer) DeleteLeases6(context.Context, *DeleteLeases6Request) (*DeleteLeaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteLeases6 not implemented")
}
func (*UnimplementedDHCPManagerServer) GetDHCPNodes(context.Context, *GetDHCPNodesRequest) (*GetDHCPNodesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDHCPNodes not implemented")
}

func RegisterDHCPManagerServer(s *grpc.Server, srv DHCPManagerServer) {
	s.RegisterService(&_DHCPManager_serviceDesc, srv)
}

func _DHCPManager_GetSubnets4LeasesCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSubnetsLeasesCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DHCPManagerServer).GetSubnets4LeasesCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.DHCPManager/GetSubnets4LeasesCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DHCPManagerServer).GetSubnets4LeasesCount(ctx, req.(*GetSubnetsLeasesCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DHCPManager_GetSubnets4LeasesCountWithIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSubnetsLeasesCountWithIdsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DHCPManagerServer).GetSubnets4LeasesCountWithIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.DHCPManager/GetSubnets4LeasesCountWithIds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DHCPManagerServer).GetSubnets4LeasesCountWithIds(ctx, req.(*GetSubnetsLeasesCountWithIdsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DHCPManager_GetSubnet4Leases_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSubnet4LeasesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DHCPManagerServer).GetSubnet4Leases(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.DHCPManager/GetSubnet4Leases",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DHCPManagerServer).GetSubnet4Leases(ctx, req.(*GetSubnet4LeasesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DHCPManager_GetSubnet4LeasesCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSubnet4LeasesCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DHCPManagerServer).GetSubnet4LeasesCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.DHCPManager/GetSubnet4LeasesCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DHCPManagerServer).GetSubnet4LeasesCount(ctx, req.(*GetSubnet4LeasesCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DHCPManager_GetSubnet4Lease_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSubnet4LeaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DHCPManagerServer).GetSubnet4Lease(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.DHCPManager/GetSubnet4Lease",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DHCPManagerServer).GetSubnet4Lease(ctx, req.(*GetSubnet4LeaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DHCPManager_GetSubnet4LeasesWithIps_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSubnet4LeasesWithIpsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DHCPManagerServer).GetSubnet4LeasesWithIps(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.DHCPManager/GetSubnet4LeasesWithIps",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DHCPManagerServer).GetSubnet4LeasesWithIps(ctx, req.(*GetSubnet4LeasesWithIpsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DHCPManager_GetSubnets4LeasesWithMacs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSubnets4LeasesWithMacsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DHCPManagerServer).GetSubnets4LeasesWithMacs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.DHCPManager/GetSubnets4LeasesWithMacs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DHCPManagerServer).GetSubnets4LeasesWithMacs(ctx, req.(*GetSubnets4LeasesWithMacsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DHCPManager_GetSubnets4LeasesWithHostnames_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSubnets4LeasesWithHostnamesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DHCPManagerServer).GetSubnets4LeasesWithHostnames(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.DHCPManager/GetSubnets4LeasesWithHostnames",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DHCPManagerServer).GetSubnets4LeasesWithHostnames(ctx, req.(*GetSubnets4LeasesWithHostnamesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DHCPManager_GetPool4Leases_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPool4LeasesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DHCPManagerServer).GetPool4Leases(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.DHCPManager/GetPool4Leases",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DHCPManagerServer).GetPool4Leases(ctx, req.(*GetPool4LeasesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DHCPManager_GetPool4LeasesCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPool4LeasesCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DHCPManagerServer).GetPool4LeasesCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.DHCPManager/GetPool4LeasesCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DHCPManagerServer).GetPool4LeasesCount(ctx, req.(*GetPool4LeasesCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DHCPManager_GetReservation4LeaseCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReservation4LeaseCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DHCPManagerServer).GetReservation4LeaseCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.DHCPManager/GetReservation4LeaseCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DHCPManagerServer).GetReservation4LeaseCount(ctx, req.(*GetReservation4LeaseCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DHCPManager_GetReservation4Lease_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReservation4LeaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DHCPManagerServer).GetReservation4Lease(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.DHCPManager/GetReservation4Lease",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DHCPManagerServer).GetReservation4Lease(ctx, req.(*GetReservation4LeaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DHCPManager_DeleteLease4_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteLease4Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DHCPManagerServer).DeleteLease4(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.DHCPManager/DeleteLease4",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DHCPManagerServer).DeleteLease4(ctx, req.(*DeleteLease4Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _DHCPManager_DeleteLeases4_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteLeases4Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DHCPManagerServer).DeleteLeases4(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.DHCPManager/DeleteLeases4",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DHCPManagerServer).DeleteLeases4(ctx, req.(*DeleteLeases4Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _DHCPManager_GetSubnets6LeasesCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSubnetsLeasesCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DHCPManagerServer).GetSubnets6LeasesCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.DHCPManager/GetSubnets6LeasesCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DHCPManagerServer).GetSubnets6LeasesCount(ctx, req.(*GetSubnetsLeasesCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DHCPManager_GetSubnets6LeasesCountWithIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSubnetsLeasesCountWithIdsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DHCPManagerServer).GetSubnets6LeasesCountWithIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.DHCPManager/GetSubnets6LeasesCountWithIds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DHCPManagerServer).GetSubnets6LeasesCountWithIds(ctx, req.(*GetSubnetsLeasesCountWithIdsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DHCPManager_GetSubnet6Leases_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSubnet6LeasesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DHCPManagerServer).GetSubnet6Leases(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.DHCPManager/GetSubnet6Leases",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DHCPManagerServer).GetSubnet6Leases(ctx, req.(*GetSubnet6LeasesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DHCPManager_GetSubnet6LeasesCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSubnet6LeasesCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DHCPManagerServer).GetSubnet6LeasesCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.DHCPManager/GetSubnet6LeasesCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DHCPManagerServer).GetSubnet6LeasesCount(ctx, req.(*GetSubnet6LeasesCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DHCPManager_GetSubnet6LeasesCountByAddressCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSubnet6LeasesCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DHCPManagerServer).GetSubnet6LeasesCountByAddressCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.DHCPManager/GetSubnet6LeasesCountByAddressCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DHCPManagerServer).GetSubnet6LeasesCountByAddressCode(ctx, req.(*GetSubnet6LeasesCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DHCPManager_GetSubnet6Lease_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSubnet6LeaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DHCPManagerServer).GetSubnet6Lease(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.DHCPManager/GetSubnet6Lease",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DHCPManagerServer).GetSubnet6Lease(ctx, req.(*GetSubnet6LeaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DHCPManager_GetSubnet6LeasesWithIps_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSubnet6LeasesWithIpsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DHCPManagerServer).GetSubnet6LeasesWithIps(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.DHCPManager/GetSubnet6LeasesWithIps",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DHCPManagerServer).GetSubnet6LeasesWithIps(ctx, req.(*GetSubnet6LeasesWithIpsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DHCPManager_GetSubnets6LeasesWithDuids_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSubnets6LeasesWithDuidsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DHCPManagerServer).GetSubnets6LeasesWithDuids(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.DHCPManager/GetSubnets6LeasesWithDuids",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DHCPManagerServer).GetSubnets6LeasesWithDuids(ctx, req.(*GetSubnets6LeasesWithDuidsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DHCPManager_GetSubnets6LeasesWithMacs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSubnets6LeasesWithMacsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DHCPManagerServer).GetSubnets6LeasesWithMacs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.DHCPManager/GetSubnets6LeasesWithMacs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DHCPManagerServer).GetSubnets6LeasesWithMacs(ctx, req.(*GetSubnets6LeasesWithMacsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DHCPManager_GetSubnets6LeasesWithHostnames_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSubnets6LeasesWithHostnamesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DHCPManagerServer).GetSubnets6LeasesWithHostnames(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.DHCPManager/GetSubnets6LeasesWithHostnames",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DHCPManagerServer).GetSubnets6LeasesWithHostnames(ctx, req.(*GetSubnets6LeasesWithHostnamesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DHCPManager_GetPool6Leases_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPool6LeasesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DHCPManagerServer).GetPool6Leases(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.DHCPManager/GetPool6Leases",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DHCPManagerServer).GetPool6Leases(ctx, req.(*GetPool6LeasesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DHCPManager_GetPool6LeasesCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPool6LeasesCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DHCPManagerServer).GetPool6LeasesCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.DHCPManager/GetPool6LeasesCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DHCPManagerServer).GetPool6LeasesCount(ctx, req.(*GetPool6LeasesCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DHCPManager_GetReservation6LeasesCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReservation6LeasesCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DHCPManagerServer).GetReservation6LeasesCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.DHCPManager/GetReservation6LeasesCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DHCPManagerServer).GetReservation6LeasesCount(ctx, req.(*GetReservation6LeasesCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DHCPManager_GetReservation6Leases_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReservation6LeasesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DHCPManagerServer).GetReservation6Leases(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.DHCPManager/GetReservation6Leases",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DHCPManagerServer).GetReservation6Leases(ctx, req.(*GetReservation6LeasesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DHCPManager_DeleteLease6_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteLease6Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DHCPManagerServer).DeleteLease6(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.DHCPManager/DeleteLease6",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DHCPManagerServer).DeleteLease6(ctx, req.(*DeleteLease6Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _DHCPManager_DeleteLeases6_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteLeases6Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DHCPManagerServer).DeleteLeases6(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.DHCPManager/DeleteLeases6",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DHCPManagerServer).DeleteLeases6(ctx, req.(*DeleteLeases6Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _DHCPManager_GetDHCPNodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDHCPNodesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DHCPManagerServer).GetDHCPNodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.DHCPManager/GetDHCPNodes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DHCPManagerServer).GetDHCPNodes(ctx, req.(*GetDHCPNodesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _DHCPManager_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.DHCPManager",
	HandlerType: (*DHCPManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSubnets4LeasesCount",
			Handler:    _DHCPManager_GetSubnets4LeasesCount_Handler,
		},
		{
			MethodName: "GetSubnets4LeasesCountWithIds",
			Handler:    _DHCPManager_GetSubnets4LeasesCountWithIds_Handler,
		},
		{
			MethodName: "GetSubnet4Leases",
			Handler:    _DHCPManager_GetSubnet4Leases_Handler,
		},
		{
			MethodName: "GetSubnet4LeasesCount",
			Handler:    _DHCPManager_GetSubnet4LeasesCount_Handler,
		},
		{
			MethodName: "GetSubnet4Lease",
			Handler:    _DHCPManager_GetSubnet4Lease_Handler,
		},
		{
			MethodName: "GetSubnet4LeasesWithIps",
			Handler:    _DHCPManager_GetSubnet4LeasesWithIps_Handler,
		},
		{
			MethodName: "GetSubnets4LeasesWithMacs",
			Handler:    _DHCPManager_GetSubnets4LeasesWithMacs_Handler,
		},
		{
			MethodName: "GetSubnets4LeasesWithHostnames",
			Handler:    _DHCPManager_GetSubnets4LeasesWithHostnames_Handler,
		},
		{
			MethodName: "GetPool4Leases",
			Handler:    _DHCPManager_GetPool4Leases_Handler,
		},
		{
			MethodName: "GetPool4LeasesCount",
			Handler:    _DHCPManager_GetPool4LeasesCount_Handler,
		},
		{
			MethodName: "GetReservation4LeaseCount",
			Handler:    _DHCPManager_GetReservation4LeaseCount_Handler,
		},
		{
			MethodName: "GetReservation4Lease",
			Handler:    _DHCPManager_GetReservation4Lease_Handler,
		},
		{
			MethodName: "DeleteLease4",
			Handler:    _DHCPManager_DeleteLease4_Handler,
		},
		{
			MethodName: "DeleteLeases4",
			Handler:    _DHCPManager_DeleteLeases4_Handler,
		},
		{
			MethodName: "GetSubnets6LeasesCount",
			Handler:    _DHCPManager_GetSubnets6LeasesCount_Handler,
		},
		{
			MethodName: "GetSubnets6LeasesCountWithIds",
			Handler:    _DHCPManager_GetSubnets6LeasesCountWithIds_Handler,
		},
		{
			MethodName: "GetSubnet6Leases",
			Handler:    _DHCPManager_GetSubnet6Leases_Handler,
		},
		{
			MethodName: "GetSubnet6LeasesCount",
			Handler:    _DHCPManager_GetSubnet6LeasesCount_Handler,
		},
		{
			MethodName: "GetSubnet6LeasesCountByAddressCode",
			Handler:    _DHCPManager_GetSubnet6LeasesCountByAddressCode_Handler,
		},
		{
			MethodName: "GetSubnet6Lease",
			Handler:    _DHCPManager_GetSubnet6Lease_Handler,
		},
		{
			MethodName: "GetSubnet6LeasesWithIps",
			Handler:    _DHCPManager_GetSubnet6LeasesWithIps_Handler,
		},
		{
			MethodName: "GetSubnets6LeasesWithDuids",
			Handler:    _DHCPManager_GetSubnets6LeasesWithDuids_Handler,
		},
		{
			MethodName: "GetSubnets6LeasesWithMacs",
			Handler:    _DHCPManager_GetSubnets6LeasesWithMacs_Handler,
		},
		{
			MethodName: "GetSubnets6LeasesWithHostnames",
			Handler:    _DHCPManager_GetSubnets6LeasesWithHostnames_Handler,
		},
		{
			MethodName: "GetPool6Leases",
			Handler:    _DHCPManager_GetPool6Leases_Handler,
		},
		{
			MethodName: "GetPool6LeasesCount",
			Handler:    _DHCPManager_GetPool6LeasesCount_Handler,
		},
		{
			MethodName: "GetReservation6LeasesCount",
			Handler:    _DHCPManager_GetReservation6LeasesCount_Handler,
		},
		{
			MethodName: "GetReservation6Leases",
			Handler:    _DHCPManager_GetReservation6Leases_Handler,
		},
		{
			MethodName: "DeleteLease6",
			Handler:    _DHCPManager_DeleteLease6_Handler,
		},
		{
			MethodName: "DeleteLeases6",
			Handler:    _DHCPManager_DeleteLeases6_Handler,
		},
		{
			MethodName: "GetDHCPNodes",
			Handler:    _DHCPManager_GetDHCPNodes_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dhcp_agent.proto",
}
