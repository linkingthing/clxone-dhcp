// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.21.0
// 	protoc        v3.6.1
// source: dhcp_agent.proto

package dhcp_agent

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type LeaseState int32

const (
	LeaseState_NORMAL    LeaseState = 0
	LeaseState_DECLINED  LeaseState = 1
	LeaseState_RECLAIMED LeaseState = 2
)

// Enum value maps for LeaseState.
var (
	LeaseState_name = map[int32]string{
		0: "NORMAL",
		1: "DECLINED",
		2: "RECLAIMED",
	}
	LeaseState_value = map[string]int32{
		"NORMAL":    0,
		"DECLINED":  1,
		"RECLAIMED": 2,
	}
)

func (x LeaseState) Enum() *LeaseState {
	p := new(LeaseState)
	*p = x
	return p
}

func (x LeaseState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LeaseState) Descriptor() protoreflect.EnumDescriptor {
	return file_dhcp_agent_proto_enumTypes[0].Descriptor()
}

func (LeaseState) Type() protoreflect.EnumType {
	return &file_dhcp_agent_proto_enumTypes[0]
}

func (x LeaseState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LeaseState.Descriptor instead.
func (LeaseState) EnumDescriptor() ([]byte, []int) {
	return file_dhcp_agent_proto_rawDescGZIP(), []int{0}
}

type HwAddressSource int32

const (
	HwAddressSource_UNKNOWN         HwAddressSource = 0
	HwAddressSource_DUID            HwAddressSource = 2
	HwAddressSource_IPv6_LINKLOCAL  HwAddressSource = 4
	HwAddressSource_CLIENT_LINKADDR HwAddressSource = 8
	HwAddressSource_REMOTE_ID       HwAddressSource = 16
	HwAddressSource_DOCSIS_CMTS     HwAddressSource = 64
	HwAddressSource_DOCSIS_MODEM    HwAddressSource = 128
)

// Enum value maps for HwAddressSource.
var (
	HwAddressSource_name = map[int32]string{
		0:   "UNKNOWN",
		2:   "DUID",
		4:   "IPv6_LINKLOCAL",
		8:   "CLIENT_LINKADDR",
		16:  "REMOTE_ID",
		64:  "DOCSIS_CMTS",
		128: "DOCSIS_MODEM",
	}
	HwAddressSource_value = map[string]int32{
		"UNKNOWN":         0,
		"DUID":            2,
		"IPv6_LINKLOCAL":  4,
		"CLIENT_LINKADDR": 8,
		"REMOTE_ID":       16,
		"DOCSIS_CMTS":     64,
		"DOCSIS_MODEM":    128,
	}
)

func (x HwAddressSource) Enum() *HwAddressSource {
	p := new(HwAddressSource)
	*p = x
	return p
}

func (x HwAddressSource) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HwAddressSource) Descriptor() protoreflect.EnumDescriptor {
	return file_dhcp_agent_proto_enumTypes[1].Descriptor()
}

func (HwAddressSource) Type() protoreflect.EnumType {
	return &file_dhcp_agent_proto_enumTypes[1]
}

func (x HwAddressSource) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HwAddressSource.Descriptor instead.
func (HwAddressSource) EnumDescriptor() ([]byte, []int) {
	return file_dhcp_agent_proto_rawDescGZIP(), []int{1}
}

type GetDHCPNodesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetDHCPNodesRequest) Reset() {
	*x = GetDHCPNodesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_agent_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDHCPNodesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDHCPNodesRequest) ProtoMessage() {}

func (x *GetDHCPNodesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_agent_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDHCPNodesRequest.ProtoReflect.Descriptor instead.
func (*GetDHCPNodesRequest) Descriptor() ([]byte, []int) {
	return file_dhcp_agent_proto_rawDescGZIP(), []int{0}
}

type GetDHCPNodesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Succeed bool     `protobuf:"varint,1,opt,name=succeed,proto3" json:"succeed,omitempty"`
	Ipv4S   []string `protobuf:"bytes,2,rep,name=ipv4s,proto3" json:"ipv4s,omitempty"`
	Ipv6S   []string `protobuf:"bytes,3,rep,name=ipv6s,proto3" json:"ipv6s,omitempty"`
}

func (x *GetDHCPNodesResponse) Reset() {
	*x = GetDHCPNodesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_agent_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDHCPNodesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDHCPNodesResponse) ProtoMessage() {}

func (x *GetDHCPNodesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_agent_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDHCPNodesResponse.ProtoReflect.Descriptor instead.
func (*GetDHCPNodesResponse) Descriptor() ([]byte, []int) {
	return file_dhcp_agent_proto_rawDescGZIP(), []int{1}
}

func (x *GetDHCPNodesResponse) GetSucceed() bool {
	if x != nil {
		return x.Succeed
	}
	return false
}

func (x *GetDHCPNodesResponse) GetIpv4S() []string {
	if x != nil {
		return x.Ipv4S
	}
	return nil
}

func (x *GetDHCPNodesResponse) GetIpv6S() []string {
	if x != nil {
		return x.Ipv6S
	}
	return nil
}

type SubnetOption struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Code uint32 `protobuf:"varint,2,opt,name=code,proto3" json:"code,omitempty"`
	Data string `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *SubnetOption) Reset() {
	*x = SubnetOption{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_agent_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubnetOption) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubnetOption) ProtoMessage() {}

func (x *SubnetOption) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_agent_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubnetOption.ProtoReflect.Descriptor instead.
func (*SubnetOption) Descriptor() ([]byte, []int) {
	return file_dhcp_agent_proto_rawDescGZIP(), []int{2}
}

func (x *SubnetOption) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SubnetOption) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *SubnetOption) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

type CreateSubnet4Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                  uint64          `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Subnet              string          `protobuf:"bytes,2,opt,name=subnet,proto3" json:"subnet,omitempty"`
	ValidLifetime       uint32          `protobuf:"varint,3,opt,name=valid_lifetime,json=validLifetime,proto3" json:"valid_lifetime,omitempty"`
	MaxValidLifetime    uint32          `protobuf:"varint,4,opt,name=max_valid_lifetime,json=maxValidLifetime,proto3" json:"max_valid_lifetime,omitempty"`
	MinValidLifetime    uint32          `protobuf:"varint,5,opt,name=min_valid_lifetime,json=minValidLifetime,proto3" json:"min_valid_lifetime,omitempty"`
	RenewTime           uint32          `protobuf:"varint,6,opt,name=renew_time,json=renewTime,proto3" json:"renew_time,omitempty"`
	RebindTime          uint32          `protobuf:"varint,7,opt,name=rebind_time,json=rebindTime,proto3" json:"rebind_time,omitempty"`
	ClientClass         string          `protobuf:"bytes,8,opt,name=client_class,json=clientClass,proto3" json:"client_class,omitempty"`
	RelayAgentAddresses []string        `protobuf:"bytes,9,rep,name=relay_agent_addresses,json=relayAgentAddresses,proto3" json:"relay_agent_addresses,omitempty"`
	IfaceName           string          `protobuf:"bytes,10,opt,name=iface_name,json=ifaceName,proto3" json:"iface_name,omitempty"`
	NextServer          string          `protobuf:"bytes,11,opt,name=next_server,json=nextServer,proto3" json:"next_server,omitempty"`
	SubnetOptions       []*SubnetOption `protobuf:"bytes,12,rep,name=subnet_options,json=subnetOptions,proto3" json:"subnet_options,omitempty"`
}

func (x *CreateSubnet4Request) Reset() {
	*x = CreateSubnet4Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_agent_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateSubnet4Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSubnet4Request) ProtoMessage() {}

func (x *CreateSubnet4Request) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_agent_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSubnet4Request.ProtoReflect.Descriptor instead.
func (*CreateSubnet4Request) Descriptor() ([]byte, []int) {
	return file_dhcp_agent_proto_rawDescGZIP(), []int{3}
}

func (x *CreateSubnet4Request) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *CreateSubnet4Request) GetSubnet() string {
	if x != nil {
		return x.Subnet
	}
	return ""
}

func (x *CreateSubnet4Request) GetValidLifetime() uint32 {
	if x != nil {
		return x.ValidLifetime
	}
	return 0
}

func (x *CreateSubnet4Request) GetMaxValidLifetime() uint32 {
	if x != nil {
		return x.MaxValidLifetime
	}
	return 0
}

func (x *CreateSubnet4Request) GetMinValidLifetime() uint32 {
	if x != nil {
		return x.MinValidLifetime
	}
	return 0
}

func (x *CreateSubnet4Request) GetRenewTime() uint32 {
	if x != nil {
		return x.RenewTime
	}
	return 0
}

func (x *CreateSubnet4Request) GetRebindTime() uint32 {
	if x != nil {
		return x.RebindTime
	}
	return 0
}

func (x *CreateSubnet4Request) GetClientClass() string {
	if x != nil {
		return x.ClientClass
	}
	return ""
}

func (x *CreateSubnet4Request) GetRelayAgentAddresses() []string {
	if x != nil {
		return x.RelayAgentAddresses
	}
	return nil
}

func (x *CreateSubnet4Request) GetIfaceName() string {
	if x != nil {
		return x.IfaceName
	}
	return ""
}

func (x *CreateSubnet4Request) GetNextServer() string {
	if x != nil {
		return x.NextServer
	}
	return ""
}

func (x *CreateSubnet4Request) GetSubnetOptions() []*SubnetOption {
	if x != nil {
		return x.SubnetOptions
	}
	return nil
}

type DeleteSubnet4Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteSubnet4Request) Reset() {
	*x = DeleteSubnet4Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_agent_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteSubnet4Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteSubnet4Request) ProtoMessage() {}

func (x *DeleteSubnet4Request) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_agent_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteSubnet4Request.ProtoReflect.Descriptor instead.
func (*DeleteSubnet4Request) Descriptor() ([]byte, []int) {
	return file_dhcp_agent_proto_rawDescGZIP(), []int{4}
}

func (x *DeleteSubnet4Request) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type UpdateSubnet4Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                  uint64          `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Subnet              string          `protobuf:"bytes,2,opt,name=subnet,proto3" json:"subnet,omitempty"`
	ValidLifetime       uint32          `protobuf:"varint,3,opt,name=valid_lifetime,json=validLifetime,proto3" json:"valid_lifetime,omitempty"`
	MaxValidLifetime    uint32          `protobuf:"varint,4,opt,name=max_valid_lifetime,json=maxValidLifetime,proto3" json:"max_valid_lifetime,omitempty"`
	MinValidLifetime    uint32          `protobuf:"varint,5,opt,name=min_valid_lifetime,json=minValidLifetime,proto3" json:"min_valid_lifetime,omitempty"`
	RenewTime           uint32          `protobuf:"varint,6,opt,name=renew_time,json=renewTime,proto3" json:"renew_time,omitempty"`
	RebindTime          uint32          `protobuf:"varint,7,opt,name=rebind_time,json=rebindTime,proto3" json:"rebind_time,omitempty"`
	ClientClass         string          `protobuf:"bytes,8,opt,name=client_class,json=clientClass,proto3" json:"client_class,omitempty"`
	RelayAgentAddresses []string        `protobuf:"bytes,9,rep,name=relay_agent_addresses,json=relayAgentAddresses,proto3" json:"relay_agent_addresses,omitempty"`
	IfaceName           string          `protobuf:"bytes,10,opt,name=iface_name,json=ifaceName,proto3" json:"iface_name,omitempty"`
	NextServer          string          `protobuf:"bytes,11,opt,name=next_server,json=nextServer,proto3" json:"next_server,omitempty"`
	SubnetOptions       []*SubnetOption `protobuf:"bytes,12,rep,name=subnet_options,json=subnetOptions,proto3" json:"subnet_options,omitempty"`
}

func (x *UpdateSubnet4Request) Reset() {
	*x = UpdateSubnet4Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_agent_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateSubnet4Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSubnet4Request) ProtoMessage() {}

func (x *UpdateSubnet4Request) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_agent_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSubnet4Request.ProtoReflect.Descriptor instead.
func (*UpdateSubnet4Request) Descriptor() ([]byte, []int) {
	return file_dhcp_agent_proto_rawDescGZIP(), []int{5}
}

func (x *UpdateSubnet4Request) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpdateSubnet4Request) GetSubnet() string {
	if x != nil {
		return x.Subnet
	}
	return ""
}

func (x *UpdateSubnet4Request) GetValidLifetime() uint32 {
	if x != nil {
		return x.ValidLifetime
	}
	return 0
}

func (x *UpdateSubnet4Request) GetMaxValidLifetime() uint32 {
	if x != nil {
		return x.MaxValidLifetime
	}
	return 0
}

func (x *UpdateSubnet4Request) GetMinValidLifetime() uint32 {
	if x != nil {
		return x.MinValidLifetime
	}
	return 0
}

func (x *UpdateSubnet4Request) GetRenewTime() uint32 {
	if x != nil {
		return x.RenewTime
	}
	return 0
}

func (x *UpdateSubnet4Request) GetRebindTime() uint32 {
	if x != nil {
		return x.RebindTime
	}
	return 0
}

func (x *UpdateSubnet4Request) GetClientClass() string {
	if x != nil {
		return x.ClientClass
	}
	return ""
}

func (x *UpdateSubnet4Request) GetRelayAgentAddresses() []string {
	if x != nil {
		return x.RelayAgentAddresses
	}
	return nil
}

func (x *UpdateSubnet4Request) GetIfaceName() string {
	if x != nil {
		return x.IfaceName
	}
	return ""
}

func (x *UpdateSubnet4Request) GetNextServer() string {
	if x != nil {
		return x.NextServer
	}
	return ""
}

func (x *UpdateSubnet4Request) GetSubnetOptions() []*SubnetOption {
	if x != nil {
		return x.SubnetOptions
	}
	return nil
}

type CreateSubnet6Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                    uint64          `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Subnet                string          `protobuf:"bytes,2,opt,name=subnet,proto3" json:"subnet,omitempty"`
	ValidLifetime         uint32          `protobuf:"varint,3,opt,name=valid_lifetime,json=validLifetime,proto3" json:"valid_lifetime,omitempty"`
	MaxValidLifetime      uint32          `protobuf:"varint,4,opt,name=max_valid_lifetime,json=maxValidLifetime,proto3" json:"max_valid_lifetime,omitempty"`
	MinValidLifetime      uint32          `protobuf:"varint,5,opt,name=min_valid_lifetime,json=minValidLifetime,proto3" json:"min_valid_lifetime,omitempty"`
	RenewTime             uint32          `protobuf:"varint,6,opt,name=renew_time,json=renewTime,proto3" json:"renew_time,omitempty"`
	RebindTime            uint32          `protobuf:"varint,7,opt,name=rebind_time,json=rebindTime,proto3" json:"rebind_time,omitempty"`
	ClientClass           string          `protobuf:"bytes,8,opt,name=client_class,json=clientClass,proto3" json:"client_class,omitempty"`
	RelayAgentAddresses   []string        `protobuf:"bytes,9,rep,name=relay_agent_addresses,json=relayAgentAddresses,proto3" json:"relay_agent_addresses,omitempty"`
	RelayAgentInterfaceId string          `protobuf:"bytes,10,opt,name=relay_agent_interface_id,json=relayAgentInterfaceId,proto3" json:"relay_agent_interface_id,omitempty"`
	IfaceName             string          `protobuf:"bytes,11,opt,name=iface_name,json=ifaceName,proto3" json:"iface_name,omitempty"`
	RapidCommit           bool            `protobuf:"varint,12,opt,name=rapid_commit,json=rapidCommit,proto3" json:"rapid_commit,omitempty"`
	PreferredLifetime     uint32          `protobuf:"varint,13,opt,name=preferred_lifetime,json=preferredLifetime,proto3" json:"preferred_lifetime,omitempty"`
	MinPreferredLifetime  uint32          `protobuf:"varint,14,opt,name=min_preferred_lifetime,json=minPreferredLifetime,proto3" json:"min_preferred_lifetime,omitempty"`
	MaxPreferredLifetime  uint32          `protobuf:"varint,15,opt,name=max_preferred_lifetime,json=maxPreferredLifetime,proto3" json:"max_preferred_lifetime,omitempty"`
	SubnetOptions         []*SubnetOption `protobuf:"bytes,16,rep,name=subnet_options,json=subnetOptions,proto3" json:"subnet_options,omitempty"`
}

func (x *CreateSubnet6Request) Reset() {
	*x = CreateSubnet6Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_agent_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateSubnet6Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSubnet6Request) ProtoMessage() {}

func (x *CreateSubnet6Request) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_agent_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSubnet6Request.ProtoReflect.Descriptor instead.
func (*CreateSubnet6Request) Descriptor() ([]byte, []int) {
	return file_dhcp_agent_proto_rawDescGZIP(), []int{6}
}

func (x *CreateSubnet6Request) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *CreateSubnet6Request) GetSubnet() string {
	if x != nil {
		return x.Subnet
	}
	return ""
}

func (x *CreateSubnet6Request) GetValidLifetime() uint32 {
	if x != nil {
		return x.ValidLifetime
	}
	return 0
}

func (x *CreateSubnet6Request) GetMaxValidLifetime() uint32 {
	if x != nil {
		return x.MaxValidLifetime
	}
	return 0
}

func (x *CreateSubnet6Request) GetMinValidLifetime() uint32 {
	if x != nil {
		return x.MinValidLifetime
	}
	return 0
}

func (x *CreateSubnet6Request) GetRenewTime() uint32 {
	if x != nil {
		return x.RenewTime
	}
	return 0
}

func (x *CreateSubnet6Request) GetRebindTime() uint32 {
	if x != nil {
		return x.RebindTime
	}
	return 0
}

func (x *CreateSubnet6Request) GetClientClass() string {
	if x != nil {
		return x.ClientClass
	}
	return ""
}

func (x *CreateSubnet6Request) GetRelayAgentAddresses() []string {
	if x != nil {
		return x.RelayAgentAddresses
	}
	return nil
}

func (x *CreateSubnet6Request) GetRelayAgentInterfaceId() string {
	if x != nil {
		return x.RelayAgentInterfaceId
	}
	return ""
}

func (x *CreateSubnet6Request) GetIfaceName() string {
	if x != nil {
		return x.IfaceName
	}
	return ""
}

func (x *CreateSubnet6Request) GetRapidCommit() bool {
	if x != nil {
		return x.RapidCommit
	}
	return false
}

func (x *CreateSubnet6Request) GetPreferredLifetime() uint32 {
	if x != nil {
		return x.PreferredLifetime
	}
	return 0
}

func (x *CreateSubnet6Request) GetMinPreferredLifetime() uint32 {
	if x != nil {
		return x.MinPreferredLifetime
	}
	return 0
}

func (x *CreateSubnet6Request) GetMaxPreferredLifetime() uint32 {
	if x != nil {
		return x.MaxPreferredLifetime
	}
	return 0
}

func (x *CreateSubnet6Request) GetSubnetOptions() []*SubnetOption {
	if x != nil {
		return x.SubnetOptions
	}
	return nil
}

type DeleteSubnet6Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteSubnet6Request) Reset() {
	*x = DeleteSubnet6Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_agent_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteSubnet6Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteSubnet6Request) ProtoMessage() {}

func (x *DeleteSubnet6Request) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_agent_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteSubnet6Request.ProtoReflect.Descriptor instead.
func (*DeleteSubnet6Request) Descriptor() ([]byte, []int) {
	return file_dhcp_agent_proto_rawDescGZIP(), []int{7}
}

func (x *DeleteSubnet6Request) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type UpdateSubnet6Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                    uint64          `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Subnet                string          `protobuf:"bytes,2,opt,name=subnet,proto3" json:"subnet,omitempty"`
	ValidLifetime         uint32          `protobuf:"varint,3,opt,name=valid_lifetime,json=validLifetime,proto3" json:"valid_lifetime,omitempty"`
	MaxValidLifetime      uint32          `protobuf:"varint,4,opt,name=max_valid_lifetime,json=maxValidLifetime,proto3" json:"max_valid_lifetime,omitempty"`
	MinValidLifetime      uint32          `protobuf:"varint,5,opt,name=min_valid_lifetime,json=minValidLifetime,proto3" json:"min_valid_lifetime,omitempty"`
	RenewTime             uint32          `protobuf:"varint,6,opt,name=renew_time,json=renewTime,proto3" json:"renew_time,omitempty"`
	RebindTime            uint32          `protobuf:"varint,7,opt,name=rebind_time,json=rebindTime,proto3" json:"rebind_time,omitempty"`
	ClientClass           string          `protobuf:"bytes,8,opt,name=client_class,json=clientClass,proto3" json:"client_class,omitempty"`
	RelayAgentAddresses   []string        `protobuf:"bytes,9,rep,name=relay_agent_addresses,json=relayAgentAddresses,proto3" json:"relay_agent_addresses,omitempty"`
	RelayAgentInterfaceId string          `protobuf:"bytes,10,opt,name=relay_agent_interface_id,json=relayAgentInterfaceId,proto3" json:"relay_agent_interface_id,omitempty"`
	IfaceName             string          `protobuf:"bytes,11,opt,name=iface_name,json=ifaceName,proto3" json:"iface_name,omitempty"`
	RapidCommit           bool            `protobuf:"varint,12,opt,name=rapid_commit,json=rapidCommit,proto3" json:"rapid_commit,omitempty"`
	PreferredLifetime     uint32          `protobuf:"varint,13,opt,name=preferred_lifetime,json=preferredLifetime,proto3" json:"preferred_lifetime,omitempty"`
	MinPreferredLifetime  uint32          `protobuf:"varint,14,opt,name=min_preferred_lifetime,json=minPreferredLifetime,proto3" json:"min_preferred_lifetime,omitempty"`
	MaxPreferredLifetime  uint32          `protobuf:"varint,15,opt,name=max_preferred_lifetime,json=maxPreferredLifetime,proto3" json:"max_preferred_lifetime,omitempty"`
	SubnetOptions         []*SubnetOption `protobuf:"bytes,16,rep,name=subnet_options,json=subnetOptions,proto3" json:"subnet_options,omitempty"`
}

func (x *UpdateSubnet6Request) Reset() {
	*x = UpdateSubnet6Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_agent_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateSubnet6Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSubnet6Request) ProtoMessage() {}

func (x *UpdateSubnet6Request) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_agent_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSubnet6Request.ProtoReflect.Descriptor instead.
func (*UpdateSubnet6Request) Descriptor() ([]byte, []int) {
	return file_dhcp_agent_proto_rawDescGZIP(), []int{8}
}

func (x *UpdateSubnet6Request) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpdateSubnet6Request) GetSubnet() string {
	if x != nil {
		return x.Subnet
	}
	return ""
}

func (x *UpdateSubnet6Request) GetValidLifetime() uint32 {
	if x != nil {
		return x.ValidLifetime
	}
	return 0
}

func (x *UpdateSubnet6Request) GetMaxValidLifetime() uint32 {
	if x != nil {
		return x.MaxValidLifetime
	}
	return 0
}

func (x *UpdateSubnet6Request) GetMinValidLifetime() uint32 {
	if x != nil {
		return x.MinValidLifetime
	}
	return 0
}

func (x *UpdateSubnet6Request) GetRenewTime() uint32 {
	if x != nil {
		return x.RenewTime
	}
	return 0
}

func (x *UpdateSubnet6Request) GetRebindTime() uint32 {
	if x != nil {
		return x.RebindTime
	}
	return 0
}

func (x *UpdateSubnet6Request) GetClientClass() string {
	if x != nil {
		return x.ClientClass
	}
	return ""
}

func (x *UpdateSubnet6Request) GetRelayAgentAddresses() []string {
	if x != nil {
		return x.RelayAgentAddresses
	}
	return nil
}

func (x *UpdateSubnet6Request) GetRelayAgentInterfaceId() string {
	if x != nil {
		return x.RelayAgentInterfaceId
	}
	return ""
}

func (x *UpdateSubnet6Request) GetIfaceName() string {
	if x != nil {
		return x.IfaceName
	}
	return ""
}

func (x *UpdateSubnet6Request) GetRapidCommit() bool {
	if x != nil {
		return x.RapidCommit
	}
	return false
}

func (x *UpdateSubnet6Request) GetPreferredLifetime() uint32 {
	if x != nil {
		return x.PreferredLifetime
	}
	return 0
}

func (x *UpdateSubnet6Request) GetMinPreferredLifetime() uint32 {
	if x != nil {
		return x.MinPreferredLifetime
	}
	return 0
}

func (x *UpdateSubnet6Request) GetMaxPreferredLifetime() uint32 {
	if x != nil {
		return x.MaxPreferredLifetime
	}
	return 0
}

func (x *UpdateSubnet6Request) GetSubnetOptions() []*SubnetOption {
	if x != nil {
		return x.SubnetOptions
	}
	return nil
}

type CreatePool4Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubnetId     uint64 `protobuf:"varint,1,opt,name=subnet_id,json=subnetId,proto3" json:"subnet_id,omitempty"`
	BeginAddress string `protobuf:"bytes,2,opt,name=begin_address,json=beginAddress,proto3" json:"begin_address,omitempty"`
	EndAddress   string `protobuf:"bytes,3,opt,name=end_address,json=endAddress,proto3" json:"end_address,omitempty"`
}

func (x *CreatePool4Request) Reset() {
	*x = CreatePool4Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_agent_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreatePool4Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePool4Request) ProtoMessage() {}

func (x *CreatePool4Request) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_agent_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePool4Request.ProtoReflect.Descriptor instead.
func (*CreatePool4Request) Descriptor() ([]byte, []int) {
	return file_dhcp_agent_proto_rawDescGZIP(), []int{9}
}

func (x *CreatePool4Request) GetSubnetId() uint64 {
	if x != nil {
		return x.SubnetId
	}
	return 0
}

func (x *CreatePool4Request) GetBeginAddress() string {
	if x != nil {
		return x.BeginAddress
	}
	return ""
}

func (x *CreatePool4Request) GetEndAddress() string {
	if x != nil {
		return x.EndAddress
	}
	return ""
}

type DeletePool4Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubnetId     uint64 `protobuf:"varint,1,opt,name=subnet_id,json=subnetId,proto3" json:"subnet_id,omitempty"`
	BeginAddress string `protobuf:"bytes,2,opt,name=begin_address,json=beginAddress,proto3" json:"begin_address,omitempty"`
	EndAddress   string `protobuf:"bytes,3,opt,name=end_address,json=endAddress,proto3" json:"end_address,omitempty"`
}

func (x *DeletePool4Request) Reset() {
	*x = DeletePool4Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_agent_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeletePool4Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeletePool4Request) ProtoMessage() {}

func (x *DeletePool4Request) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_agent_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeletePool4Request.ProtoReflect.Descriptor instead.
func (*DeletePool4Request) Descriptor() ([]byte, []int) {
	return file_dhcp_agent_proto_rawDescGZIP(), []int{10}
}

func (x *DeletePool4Request) GetSubnetId() uint64 {
	if x != nil {
		return x.SubnetId
	}
	return 0
}

func (x *DeletePool4Request) GetBeginAddress() string {
	if x != nil {
		return x.BeginAddress
	}
	return ""
}

func (x *DeletePool4Request) GetEndAddress() string {
	if x != nil {
		return x.EndAddress
	}
	return ""
}

type CreateReservedPool4Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubnetId     uint64 `protobuf:"varint,1,opt,name=subnet_id,json=subnetId,proto3" json:"subnet_id,omitempty"`
	BeginAddress string `protobuf:"bytes,2,opt,name=begin_address,json=beginAddress,proto3" json:"begin_address,omitempty"`
	EndAddress   string `protobuf:"bytes,3,opt,name=end_address,json=endAddress,proto3" json:"end_address,omitempty"`
}

func (x *CreateReservedPool4Request) Reset() {
	*x = CreateReservedPool4Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_agent_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateReservedPool4Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateReservedPool4Request) ProtoMessage() {}

func (x *CreateReservedPool4Request) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_agent_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateReservedPool4Request.ProtoReflect.Descriptor instead.
func (*CreateReservedPool4Request) Descriptor() ([]byte, []int) {
	return file_dhcp_agent_proto_rawDescGZIP(), []int{11}
}

func (x *CreateReservedPool4Request) GetSubnetId() uint64 {
	if x != nil {
		return x.SubnetId
	}
	return 0
}

func (x *CreateReservedPool4Request) GetBeginAddress() string {
	if x != nil {
		return x.BeginAddress
	}
	return ""
}

func (x *CreateReservedPool4Request) GetEndAddress() string {
	if x != nil {
		return x.EndAddress
	}
	return ""
}

type DeleteReservedPool4Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubnetId     uint64 `protobuf:"varint,1,opt,name=subnet_id,json=subnetId,proto3" json:"subnet_id,omitempty"`
	BeginAddress string `protobuf:"bytes,2,opt,name=begin_address,json=beginAddress,proto3" json:"begin_address,omitempty"`
	EndAddress   string `protobuf:"bytes,3,opt,name=end_address,json=endAddress,proto3" json:"end_address,omitempty"`
}

func (x *DeleteReservedPool4Request) Reset() {
	*x = DeleteReservedPool4Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_agent_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteReservedPool4Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteReservedPool4Request) ProtoMessage() {}

func (x *DeleteReservedPool4Request) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_agent_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteReservedPool4Request.ProtoReflect.Descriptor instead.
func (*DeleteReservedPool4Request) Descriptor() ([]byte, []int) {
	return file_dhcp_agent_proto_rawDescGZIP(), []int{12}
}

func (x *DeleteReservedPool4Request) GetSubnetId() uint64 {
	if x != nil {
		return x.SubnetId
	}
	return 0
}

func (x *DeleteReservedPool4Request) GetBeginAddress() string {
	if x != nil {
		return x.BeginAddress
	}
	return ""
}

func (x *DeleteReservedPool4Request) GetEndAddress() string {
	if x != nil {
		return x.EndAddress
	}
	return ""
}

type CreatePool6Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubnetId     uint64 `protobuf:"varint,1,opt,name=subnet_id,json=subnetId,proto3" json:"subnet_id,omitempty"`
	BeginAddress string `protobuf:"bytes,2,opt,name=begin_address,json=beginAddress,proto3" json:"begin_address,omitempty"`
	EndAddress   string `protobuf:"bytes,3,opt,name=end_address,json=endAddress,proto3" json:"end_address,omitempty"`
}

func (x *CreatePool6Request) Reset() {
	*x = CreatePool6Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_agent_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreatePool6Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePool6Request) ProtoMessage() {}

func (x *CreatePool6Request) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_agent_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePool6Request.ProtoReflect.Descriptor instead.
func (*CreatePool6Request) Descriptor() ([]byte, []int) {
	return file_dhcp_agent_proto_rawDescGZIP(), []int{13}
}

func (x *CreatePool6Request) GetSubnetId() uint64 {
	if x != nil {
		return x.SubnetId
	}
	return 0
}

func (x *CreatePool6Request) GetBeginAddress() string {
	if x != nil {
		return x.BeginAddress
	}
	return ""
}

func (x *CreatePool6Request) GetEndAddress() string {
	if x != nil {
		return x.EndAddress
	}
	return ""
}

type DeletePool6Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubnetId     uint64 `protobuf:"varint,1,opt,name=subnet_id,json=subnetId,proto3" json:"subnet_id,omitempty"`
	BeginAddress string `protobuf:"bytes,2,opt,name=begin_address,json=beginAddress,proto3" json:"begin_address,omitempty"`
	EndAddress   string `protobuf:"bytes,3,opt,name=end_address,json=endAddress,proto3" json:"end_address,omitempty"`
}

func (x *DeletePool6Request) Reset() {
	*x = DeletePool6Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_agent_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeletePool6Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeletePool6Request) ProtoMessage() {}

func (x *DeletePool6Request) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_agent_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeletePool6Request.ProtoReflect.Descriptor instead.
func (*DeletePool6Request) Descriptor() ([]byte, []int) {
	return file_dhcp_agent_proto_rawDescGZIP(), []int{14}
}

func (x *DeletePool6Request) GetSubnetId() uint64 {
	if x != nil {
		return x.SubnetId
	}
	return 0
}

func (x *DeletePool6Request) GetBeginAddress() string {
	if x != nil {
		return x.BeginAddress
	}
	return ""
}

func (x *DeletePool6Request) GetEndAddress() string {
	if x != nil {
		return x.EndAddress
	}
	return ""
}

type CreateReservedPool6Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubnetId     uint64 `protobuf:"varint,1,opt,name=subnet_id,json=subnetId,proto3" json:"subnet_id,omitempty"`
	BeginAddress string `protobuf:"bytes,2,opt,name=begin_address,json=beginAddress,proto3" json:"begin_address,omitempty"`
	EndAddress   string `protobuf:"bytes,3,opt,name=end_address,json=endAddress,proto3" json:"end_address,omitempty"`
}

func (x *CreateReservedPool6Request) Reset() {
	*x = CreateReservedPool6Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_agent_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateReservedPool6Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateReservedPool6Request) ProtoMessage() {}

func (x *CreateReservedPool6Request) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_agent_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateReservedPool6Request.ProtoReflect.Descriptor instead.
func (*CreateReservedPool6Request) Descriptor() ([]byte, []int) {
	return file_dhcp_agent_proto_rawDescGZIP(), []int{15}
}

func (x *CreateReservedPool6Request) GetSubnetId() uint64 {
	if x != nil {
		return x.SubnetId
	}
	return 0
}

func (x *CreateReservedPool6Request) GetBeginAddress() string {
	if x != nil {
		return x.BeginAddress
	}
	return ""
}

func (x *CreateReservedPool6Request) GetEndAddress() string {
	if x != nil {
		return x.EndAddress
	}
	return ""
}

type DeleteReservedPool6Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubnetId     uint64 `protobuf:"varint,1,opt,name=subnet_id,json=subnetId,proto3" json:"subnet_id,omitempty"`
	BeginAddress string `protobuf:"bytes,2,opt,name=begin_address,json=beginAddress,proto3" json:"begin_address,omitempty"`
	EndAddress   string `protobuf:"bytes,3,opt,name=end_address,json=endAddress,proto3" json:"end_address,omitempty"`
}

func (x *DeleteReservedPool6Request) Reset() {
	*x = DeleteReservedPool6Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_agent_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteReservedPool6Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteReservedPool6Request) ProtoMessage() {}

func (x *DeleteReservedPool6Request) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_agent_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteReservedPool6Request.ProtoReflect.Descriptor instead.
func (*DeleteReservedPool6Request) Descriptor() ([]byte, []int) {
	return file_dhcp_agent_proto_rawDescGZIP(), []int{16}
}

func (x *DeleteReservedPool6Request) GetSubnetId() uint64 {
	if x != nil {
		return x.SubnetId
	}
	return 0
}

func (x *DeleteReservedPool6Request) GetBeginAddress() string {
	if x != nil {
		return x.BeginAddress
	}
	return ""
}

func (x *DeleteReservedPool6Request) GetEndAddress() string {
	if x != nil {
		return x.EndAddress
	}
	return ""
}

type CreateReservation4Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubnetId  uint64 `protobuf:"varint,1,opt,name=subnet_id,json=subnetId,proto3" json:"subnet_id,omitempty"`
	HwAddress string `protobuf:"bytes,2,opt,name=hw_address,json=hwAddress,proto3" json:"hw_address,omitempty"`
	IpAddress string `protobuf:"bytes,3,opt,name=ip_address,json=ipAddress,proto3" json:"ip_address,omitempty"`
}

func (x *CreateReservation4Request) Reset() {
	*x = CreateReservation4Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_agent_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateReservation4Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateReservation4Request) ProtoMessage() {}

func (x *CreateReservation4Request) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_agent_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateReservation4Request.ProtoReflect.Descriptor instead.
func (*CreateReservation4Request) Descriptor() ([]byte, []int) {
	return file_dhcp_agent_proto_rawDescGZIP(), []int{17}
}

func (x *CreateReservation4Request) GetSubnetId() uint64 {
	if x != nil {
		return x.SubnetId
	}
	return 0
}

func (x *CreateReservation4Request) GetHwAddress() string {
	if x != nil {
		return x.HwAddress
	}
	return ""
}

func (x *CreateReservation4Request) GetIpAddress() string {
	if x != nil {
		return x.IpAddress
	}
	return ""
}

type DeleteReservation4Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubnetId  uint64 `protobuf:"varint,1,opt,name=subnet_id,json=subnetId,proto3" json:"subnet_id,omitempty"`
	HwAddress string `protobuf:"bytes,2,opt,name=hw_address,json=hwAddress,proto3" json:"hw_address,omitempty"`
	IpAddress string `protobuf:"bytes,3,opt,name=ip_address,json=ipAddress,proto3" json:"ip_address,omitempty"`
}

func (x *DeleteReservation4Request) Reset() {
	*x = DeleteReservation4Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_agent_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteReservation4Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteReservation4Request) ProtoMessage() {}

func (x *DeleteReservation4Request) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_agent_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteReservation4Request.ProtoReflect.Descriptor instead.
func (*DeleteReservation4Request) Descriptor() ([]byte, []int) {
	return file_dhcp_agent_proto_rawDescGZIP(), []int{18}
}

func (x *DeleteReservation4Request) GetSubnetId() uint64 {
	if x != nil {
		return x.SubnetId
	}
	return 0
}

func (x *DeleteReservation4Request) GetHwAddress() string {
	if x != nil {
		return x.HwAddress
	}
	return ""
}

func (x *DeleteReservation4Request) GetIpAddress() string {
	if x != nil {
		return x.IpAddress
	}
	return ""
}

type CreateReservation6Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubnetId    uint64   `protobuf:"varint,1,opt,name=subnet_id,json=subnetId,proto3" json:"subnet_id,omitempty"`
	HwAddress   string   `protobuf:"bytes,2,opt,name=hw_address,json=hwAddress,proto3" json:"hw_address,omitempty"`
	Duid        string   `protobuf:"bytes,3,opt,name=duid,proto3" json:"duid,omitempty"`
	IpAddresses []string `protobuf:"bytes,4,rep,name=ip_addresses,json=ipAddresses,proto3" json:"ip_addresses,omitempty"`
	Prefixes    []string `protobuf:"bytes,5,rep,name=prefixes,proto3" json:"prefixes,omitempty"`
}

func (x *CreateReservation6Request) Reset() {
	*x = CreateReservation6Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_agent_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateReservation6Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateReservation6Request) ProtoMessage() {}

func (x *CreateReservation6Request) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_agent_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateReservation6Request.ProtoReflect.Descriptor instead.
func (*CreateReservation6Request) Descriptor() ([]byte, []int) {
	return file_dhcp_agent_proto_rawDescGZIP(), []int{19}
}

func (x *CreateReservation6Request) GetSubnetId() uint64 {
	if x != nil {
		return x.SubnetId
	}
	return 0
}

func (x *CreateReservation6Request) GetHwAddress() string {
	if x != nil {
		return x.HwAddress
	}
	return ""
}

func (x *CreateReservation6Request) GetDuid() string {
	if x != nil {
		return x.Duid
	}
	return ""
}

func (x *CreateReservation6Request) GetIpAddresses() []string {
	if x != nil {
		return x.IpAddresses
	}
	return nil
}

func (x *CreateReservation6Request) GetPrefixes() []string {
	if x != nil {
		return x.Prefixes
	}
	return nil
}

type DeleteReservation6Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubnetId  uint64 `protobuf:"varint,1,opt,name=subnet_id,json=subnetId,proto3" json:"subnet_id,omitempty"`
	HwAddress string `protobuf:"bytes,2,opt,name=hw_address,json=hwAddress,proto3" json:"hw_address,omitempty"`
	Duid      string `protobuf:"bytes,3,opt,name=duid,proto3" json:"duid,omitempty"`
}

func (x *DeleteReservation6Request) Reset() {
	*x = DeleteReservation6Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_agent_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteReservation6Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteReservation6Request) ProtoMessage() {}

func (x *DeleteReservation6Request) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_agent_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteReservation6Request.ProtoReflect.Descriptor instead.
func (*DeleteReservation6Request) Descriptor() ([]byte, []int) {
	return file_dhcp_agent_proto_rawDescGZIP(), []int{20}
}

func (x *DeleteReservation6Request) GetSubnetId() uint64 {
	if x != nil {
		return x.SubnetId
	}
	return 0
}

func (x *DeleteReservation6Request) GetHwAddress() string {
	if x != nil {
		return x.HwAddress
	}
	return ""
}

func (x *DeleteReservation6Request) GetDuid() string {
	if x != nil {
		return x.Duid
	}
	return ""
}

type CreatePdPoolRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubnetId     uint64 `protobuf:"varint,1,opt,name=subnet_id,json=subnetId,proto3" json:"subnet_id,omitempty"`
	Prefix       string `protobuf:"bytes,2,opt,name=prefix,proto3" json:"prefix,omitempty"`
	PrefixLen    uint32 `protobuf:"varint,3,opt,name=prefix_len,json=prefixLen,proto3" json:"prefix_len,omitempty"`
	DelegatedLen uint32 `protobuf:"varint,4,opt,name=delegated_len,json=delegatedLen,proto3" json:"delegated_len,omitempty"`
}

func (x *CreatePdPoolRequest) Reset() {
	*x = CreatePdPoolRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_agent_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreatePdPoolRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePdPoolRequest) ProtoMessage() {}

func (x *CreatePdPoolRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_agent_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePdPoolRequest.ProtoReflect.Descriptor instead.
func (*CreatePdPoolRequest) Descriptor() ([]byte, []int) {
	return file_dhcp_agent_proto_rawDescGZIP(), []int{21}
}

func (x *CreatePdPoolRequest) GetSubnetId() uint64 {
	if x != nil {
		return x.SubnetId
	}
	return 0
}

func (x *CreatePdPoolRequest) GetPrefix() string {
	if x != nil {
		return x.Prefix
	}
	return ""
}

func (x *CreatePdPoolRequest) GetPrefixLen() uint32 {
	if x != nil {
		return x.PrefixLen
	}
	return 0
}

func (x *CreatePdPoolRequest) GetDelegatedLen() uint32 {
	if x != nil {
		return x.DelegatedLen
	}
	return 0
}

type DeletePdPoolRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubnetId     uint64 `protobuf:"varint,1,opt,name=subnet_id,json=subnetId,proto3" json:"subnet_id,omitempty"`
	Prefix       string `protobuf:"bytes,2,opt,name=prefix,proto3" json:"prefix,omitempty"`
	PrefixLen    uint32 `protobuf:"varint,3,opt,name=prefix_len,json=prefixLen,proto3" json:"prefix_len,omitempty"`
	DelegatedLen uint32 `protobuf:"varint,4,opt,name=delegated_len,json=delegatedLen,proto3" json:"delegated_len,omitempty"`
}

func (x *DeletePdPoolRequest) Reset() {
	*x = DeletePdPoolRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_agent_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeletePdPoolRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeletePdPoolRequest) ProtoMessage() {}

func (x *DeletePdPoolRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_agent_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeletePdPoolRequest.ProtoReflect.Descriptor instead.
func (*DeletePdPoolRequest) Descriptor() ([]byte, []int) {
	return file_dhcp_agent_proto_rawDescGZIP(), []int{22}
}

func (x *DeletePdPoolRequest) GetSubnetId() uint64 {
	if x != nil {
		return x.SubnetId
	}
	return 0
}

func (x *DeletePdPoolRequest) GetPrefix() string {
	if x != nil {
		return x.Prefix
	}
	return ""
}

func (x *DeletePdPoolRequest) GetPrefixLen() uint32 {
	if x != nil {
		return x.PrefixLen
	}
	return 0
}

func (x *DeletePdPoolRequest) GetDelegatedLen() uint32 {
	if x != nil {
		return x.DelegatedLen
	}
	return 0
}

type CreateReservedPdPoolRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubnetId     uint64 `protobuf:"varint,1,opt,name=subnet_id,json=subnetId,proto3" json:"subnet_id,omitempty"`
	Prefix       string `protobuf:"bytes,2,opt,name=prefix,proto3" json:"prefix,omitempty"`
	PrefixLen    uint32 `protobuf:"varint,3,opt,name=prefix_len,json=prefixLen,proto3" json:"prefix_len,omitempty"`
	DelegatedLen uint32 `protobuf:"varint,4,opt,name=delegated_len,json=delegatedLen,proto3" json:"delegated_len,omitempty"`
}

func (x *CreateReservedPdPoolRequest) Reset() {
	*x = CreateReservedPdPoolRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_agent_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateReservedPdPoolRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateReservedPdPoolRequest) ProtoMessage() {}

func (x *CreateReservedPdPoolRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_agent_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateReservedPdPoolRequest.ProtoReflect.Descriptor instead.
func (*CreateReservedPdPoolRequest) Descriptor() ([]byte, []int) {
	return file_dhcp_agent_proto_rawDescGZIP(), []int{23}
}

func (x *CreateReservedPdPoolRequest) GetSubnetId() uint64 {
	if x != nil {
		return x.SubnetId
	}
	return 0
}

func (x *CreateReservedPdPoolRequest) GetPrefix() string {
	if x != nil {
		return x.Prefix
	}
	return ""
}

func (x *CreateReservedPdPoolRequest) GetPrefixLen() uint32 {
	if x != nil {
		return x.PrefixLen
	}
	return 0
}

func (x *CreateReservedPdPoolRequest) GetDelegatedLen() uint32 {
	if x != nil {
		return x.DelegatedLen
	}
	return 0
}

type DeleteReservedPdPoolRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubnetId     uint64 `protobuf:"varint,1,opt,name=subnet_id,json=subnetId,proto3" json:"subnet_id,omitempty"`
	Prefix       string `protobuf:"bytes,2,opt,name=prefix,proto3" json:"prefix,omitempty"`
	PrefixLen    uint32 `protobuf:"varint,3,opt,name=prefix_len,json=prefixLen,proto3" json:"prefix_len,omitempty"`
	DelegatedLen uint32 `protobuf:"varint,4,opt,name=delegated_len,json=delegatedLen,proto3" json:"delegated_len,omitempty"`
}

func (x *DeleteReservedPdPoolRequest) Reset() {
	*x = DeleteReservedPdPoolRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_agent_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteReservedPdPoolRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteReservedPdPoolRequest) ProtoMessage() {}

func (x *DeleteReservedPdPoolRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_agent_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteReservedPdPoolRequest.ProtoReflect.Descriptor instead.
func (*DeleteReservedPdPoolRequest) Descriptor() ([]byte, []int) {
	return file_dhcp_agent_proto_rawDescGZIP(), []int{24}
}

func (x *DeleteReservedPdPoolRequest) GetSubnetId() uint64 {
	if x != nil {
		return x.SubnetId
	}
	return 0
}

func (x *DeleteReservedPdPoolRequest) GetPrefix() string {
	if x != nil {
		return x.Prefix
	}
	return ""
}

func (x *DeleteReservedPdPoolRequest) GetPrefixLen() uint32 {
	if x != nil {
		return x.PrefixLen
	}
	return 0
}

func (x *DeleteReservedPdPoolRequest) GetDelegatedLen() uint32 {
	if x != nil {
		return x.DelegatedLen
	}
	return 0
}

type CreateClientClass4Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name   string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Code   uint32 `protobuf:"varint,2,opt,name=code,proto3" json:"code,omitempty"`
	Regexp string `protobuf:"bytes,3,opt,name=regexp,proto3" json:"regexp,omitempty"`
}

func (x *CreateClientClass4Request) Reset() {
	*x = CreateClientClass4Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_agent_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateClientClass4Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateClientClass4Request) ProtoMessage() {}

func (x *CreateClientClass4Request) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_agent_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateClientClass4Request.ProtoReflect.Descriptor instead.
func (*CreateClientClass4Request) Descriptor() ([]byte, []int) {
	return file_dhcp_agent_proto_rawDescGZIP(), []int{25}
}

func (x *CreateClientClass4Request) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateClientClass4Request) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *CreateClientClass4Request) GetRegexp() string {
	if x != nil {
		return x.Regexp
	}
	return ""
}

type DeleteClientClass4Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *DeleteClientClass4Request) Reset() {
	*x = DeleteClientClass4Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_agent_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteClientClass4Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteClientClass4Request) ProtoMessage() {}

func (x *DeleteClientClass4Request) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_agent_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteClientClass4Request.ProtoReflect.Descriptor instead.
func (*DeleteClientClass4Request) Descriptor() ([]byte, []int) {
	return file_dhcp_agent_proto_rawDescGZIP(), []int{26}
}

func (x *DeleteClientClass4Request) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type UpdateClientClass4Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name   string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Code   uint32 `protobuf:"varint,2,opt,name=code,proto3" json:"code,omitempty"`
	Regexp string `protobuf:"bytes,3,opt,name=regexp,proto3" json:"regexp,omitempty"`
}

func (x *UpdateClientClass4Request) Reset() {
	*x = UpdateClientClass4Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_agent_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateClientClass4Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateClientClass4Request) ProtoMessage() {}

func (x *UpdateClientClass4Request) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_agent_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateClientClass4Request.ProtoReflect.Descriptor instead.
func (*UpdateClientClass4Request) Descriptor() ([]byte, []int) {
	return file_dhcp_agent_proto_rawDescGZIP(), []int{27}
}

func (x *UpdateClientClass4Request) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateClientClass4Request) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *UpdateClientClass4Request) GetRegexp() string {
	if x != nil {
		return x.Regexp
	}
	return ""
}

type CreateClientClass6Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name   string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Code   uint32 `protobuf:"varint,2,opt,name=code,proto3" json:"code,omitempty"`
	Regexp string `protobuf:"bytes,3,opt,name=regexp,proto3" json:"regexp,omitempty"`
}

func (x *CreateClientClass6Request) Reset() {
	*x = CreateClientClass6Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_agent_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateClientClass6Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateClientClass6Request) ProtoMessage() {}

func (x *CreateClientClass6Request) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_agent_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateClientClass6Request.ProtoReflect.Descriptor instead.
func (*CreateClientClass6Request) Descriptor() ([]byte, []int) {
	return file_dhcp_agent_proto_rawDescGZIP(), []int{28}
}

func (x *CreateClientClass6Request) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateClientClass6Request) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *CreateClientClass6Request) GetRegexp() string {
	if x != nil {
		return x.Regexp
	}
	return ""
}

type DeleteClientClass6Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *DeleteClientClass6Request) Reset() {
	*x = DeleteClientClass6Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_agent_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteClientClass6Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteClientClass6Request) ProtoMessage() {}

func (x *DeleteClientClass6Request) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_agent_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteClientClass6Request.ProtoReflect.Descriptor instead.
func (*DeleteClientClass6Request) Descriptor() ([]byte, []int) {
	return file_dhcp_agent_proto_rawDescGZIP(), []int{29}
}

func (x *DeleteClientClass6Request) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type UpdateClientClass6Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name   string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Code   uint32 `protobuf:"varint,2,opt,name=code,proto3" json:"code,omitempty"`
	Regexp string `protobuf:"bytes,3,opt,name=regexp,proto3" json:"regexp,omitempty"`
}

func (x *UpdateClientClass6Request) Reset() {
	*x = UpdateClientClass6Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_agent_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateClientClass6Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateClientClass6Request) ProtoMessage() {}

func (x *UpdateClientClass6Request) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_agent_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateClientClass6Request.ProtoReflect.Descriptor instead.
func (*UpdateClientClass6Request) Descriptor() ([]byte, []int) {
	return file_dhcp_agent_proto_rawDescGZIP(), []int{30}
}

func (x *UpdateClientClass6Request) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateClientClass6Request) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *UpdateClientClass6Request) GetRegexp() string {
	if x != nil {
		return x.Regexp
	}
	return ""
}

type CreateFingerprintRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fingerprint     string `protobuf:"bytes,1,opt,name=fingerprint,proto3" json:"fingerprint,omitempty"`
	VendorId        string `protobuf:"bytes,2,opt,name=vendor_id,json=vendorId,proto3" json:"vendor_id,omitempty"`
	OperatingSystem string `protobuf:"bytes,3,opt,name=operating_system,json=operatingSystem,proto3" json:"operating_system,omitempty"`
	ClientType      string `protobuf:"bytes,4,opt,name=client_type,json=clientType,proto3" json:"client_type,omitempty"`
	MatchPattern    string `protobuf:"bytes,5,opt,name=match_pattern,json=matchPattern,proto3" json:"match_pattern,omitempty"`
}

func (x *CreateFingerprintRequest) Reset() {
	*x = CreateFingerprintRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_agent_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateFingerprintRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateFingerprintRequest) ProtoMessage() {}

func (x *CreateFingerprintRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_agent_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateFingerprintRequest.ProtoReflect.Descriptor instead.
func (*CreateFingerprintRequest) Descriptor() ([]byte, []int) {
	return file_dhcp_agent_proto_rawDescGZIP(), []int{31}
}

func (x *CreateFingerprintRequest) GetFingerprint() string {
	if x != nil {
		return x.Fingerprint
	}
	return ""
}

func (x *CreateFingerprintRequest) GetVendorId() string {
	if x != nil {
		return x.VendorId
	}
	return ""
}

func (x *CreateFingerprintRequest) GetOperatingSystem() string {
	if x != nil {
		return x.OperatingSystem
	}
	return ""
}

func (x *CreateFingerprintRequest) GetClientType() string {
	if x != nil {
		return x.ClientType
	}
	return ""
}

func (x *CreateFingerprintRequest) GetMatchPattern() string {
	if x != nil {
		return x.MatchPattern
	}
	return ""
}

type DeleteFingerprintRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fingerprint     string `protobuf:"bytes,1,opt,name=fingerprint,proto3" json:"fingerprint,omitempty"`
	VendorId        string `protobuf:"bytes,2,opt,name=vendor_id,json=vendorId,proto3" json:"vendor_id,omitempty"`
	OperatingSystem string `protobuf:"bytes,3,opt,name=operating_system,json=operatingSystem,proto3" json:"operating_system,omitempty"`
	ClientType      string `protobuf:"bytes,4,opt,name=client_type,json=clientType,proto3" json:"client_type,omitempty"`
}

func (x *DeleteFingerprintRequest) Reset() {
	*x = DeleteFingerprintRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_agent_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteFingerprintRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteFingerprintRequest) ProtoMessage() {}

func (x *DeleteFingerprintRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_agent_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteFingerprintRequest.ProtoReflect.Descriptor instead.
func (*DeleteFingerprintRequest) Descriptor() ([]byte, []int) {
	return file_dhcp_agent_proto_rawDescGZIP(), []int{32}
}

func (x *DeleteFingerprintRequest) GetFingerprint() string {
	if x != nil {
		return x.Fingerprint
	}
	return ""
}

func (x *DeleteFingerprintRequest) GetVendorId() string {
	if x != nil {
		return x.VendorId
	}
	return ""
}

func (x *DeleteFingerprintRequest) GetOperatingSystem() string {
	if x != nil {
		return x.OperatingSystem
	}
	return ""
}

func (x *DeleteFingerprintRequest) GetClientType() string {
	if x != nil {
		return x.ClientType
	}
	return ""
}

type UpdateFingerprintRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Old *DeleteFingerprintRequest `protobuf:"bytes,1,opt,name=old,proto3" json:"old,omitempty"`
	New *CreateFingerprintRequest `protobuf:"bytes,2,opt,name=new,proto3" json:"new,omitempty"`
}

func (x *UpdateFingerprintRequest) Reset() {
	*x = UpdateFingerprintRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_agent_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateFingerprintRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateFingerprintRequest) ProtoMessage() {}

func (x *UpdateFingerprintRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_agent_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateFingerprintRequest.ProtoReflect.Descriptor instead.
func (*UpdateFingerprintRequest) Descriptor() ([]byte, []int) {
	return file_dhcp_agent_proto_rawDescGZIP(), []int{33}
}

func (x *UpdateFingerprintRequest) GetOld() *DeleteFingerprintRequest {
	if x != nil {
		return x.Old
	}
	return nil
}

func (x *UpdateFingerprintRequest) GetNew() *CreateFingerprintRequest {
	if x != nil {
		return x.New
	}
	return nil
}

type CreateOuiRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Oui          string `protobuf:"bytes,1,opt,name=oui,proto3" json:"oui,omitempty"`
	Organization string `protobuf:"bytes,2,opt,name=organization,proto3" json:"organization,omitempty"`
}

func (x *CreateOuiRequest) Reset() {
	*x = CreateOuiRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_agent_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateOuiRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateOuiRequest) ProtoMessage() {}

func (x *CreateOuiRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_agent_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateOuiRequest.ProtoReflect.Descriptor instead.
func (*CreateOuiRequest) Descriptor() ([]byte, []int) {
	return file_dhcp_agent_proto_rawDescGZIP(), []int{34}
}

func (x *CreateOuiRequest) GetOui() string {
	if x != nil {
		return x.Oui
	}
	return ""
}

func (x *CreateOuiRequest) GetOrganization() string {
	if x != nil {
		return x.Organization
	}
	return ""
}

type DeleteOuiRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Oui string `protobuf:"bytes,1,opt,name=oui,proto3" json:"oui,omitempty"`
}

func (x *DeleteOuiRequest) Reset() {
	*x = DeleteOuiRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_agent_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteOuiRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteOuiRequest) ProtoMessage() {}

func (x *DeleteOuiRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_agent_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteOuiRequest.ProtoReflect.Descriptor instead.
func (*DeleteOuiRequest) Descriptor() ([]byte, []int) {
	return file_dhcp_agent_proto_rawDescGZIP(), []int{35}
}

func (x *DeleteOuiRequest) GetOui() string {
	if x != nil {
		return x.Oui
	}
	return ""
}

type UpdateOuiRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Oui          string `protobuf:"bytes,1,opt,name=oui,proto3" json:"oui,omitempty"`
	Organization string `protobuf:"bytes,2,opt,name=organization,proto3" json:"organization,omitempty"`
}

func (x *UpdateOuiRequest) Reset() {
	*x = UpdateOuiRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_agent_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateOuiRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateOuiRequest) ProtoMessage() {}

func (x *UpdateOuiRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_agent_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateOuiRequest.ProtoReflect.Descriptor instead.
func (*UpdateOuiRequest) Descriptor() ([]byte, []int) {
	return file_dhcp_agent_proto_rawDescGZIP(), []int{36}
}

func (x *UpdateOuiRequest) GetOui() string {
	if x != nil {
		return x.Oui
	}
	return ""
}

func (x *UpdateOuiRequest) GetOrganization() string {
	if x != nil {
		return x.Organization
	}
	return ""
}

type UpdateAdmitRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enabled bool `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
}

func (x *UpdateAdmitRequest) Reset() {
	*x = UpdateAdmitRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_agent_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateAdmitRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateAdmitRequest) ProtoMessage() {}

func (x *UpdateAdmitRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_agent_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateAdmitRequest.ProtoReflect.Descriptor instead.
func (*UpdateAdmitRequest) Descriptor() ([]byte, []int) {
	return file_dhcp_agent_proto_rawDescGZIP(), []int{37}
}

func (x *UpdateAdmitRequest) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

type CreateAdmitMacRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HwAddress string `protobuf:"bytes,1,opt,name=hw_address,json=hwAddress,proto3" json:"hw_address,omitempty"`
}

func (x *CreateAdmitMacRequest) Reset() {
	*x = CreateAdmitMacRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_agent_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateAdmitMacRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateAdmitMacRequest) ProtoMessage() {}

func (x *CreateAdmitMacRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_agent_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateAdmitMacRequest.ProtoReflect.Descriptor instead.
func (*CreateAdmitMacRequest) Descriptor() ([]byte, []int) {
	return file_dhcp_agent_proto_rawDescGZIP(), []int{38}
}

func (x *CreateAdmitMacRequest) GetHwAddress() string {
	if x != nil {
		return x.HwAddress
	}
	return ""
}

type DeleteAdmitMacRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HwAddress string `protobuf:"bytes,1,opt,name=hw_address,json=hwAddress,proto3" json:"hw_address,omitempty"`
}

func (x *DeleteAdmitMacRequest) Reset() {
	*x = DeleteAdmitMacRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_agent_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteAdmitMacRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteAdmitMacRequest) ProtoMessage() {}

func (x *DeleteAdmitMacRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_agent_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteAdmitMacRequest.ProtoReflect.Descriptor instead.
func (*DeleteAdmitMacRequest) Descriptor() ([]byte, []int) {
	return file_dhcp_agent_proto_rawDescGZIP(), []int{39}
}

func (x *DeleteAdmitMacRequest) GetHwAddress() string {
	if x != nil {
		return x.HwAddress
	}
	return ""
}

type CreateAdmitFingerprintRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientType string `protobuf:"bytes,1,opt,name=client_type,json=clientType,proto3" json:"client_type,omitempty"`
}

func (x *CreateAdmitFingerprintRequest) Reset() {
	*x = CreateAdmitFingerprintRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_agent_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateAdmitFingerprintRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateAdmitFingerprintRequest) ProtoMessage() {}

func (x *CreateAdmitFingerprintRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_agent_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateAdmitFingerprintRequest.ProtoReflect.Descriptor instead.
func (*CreateAdmitFingerprintRequest) Descriptor() ([]byte, []int) {
	return file_dhcp_agent_proto_rawDescGZIP(), []int{40}
}

func (x *CreateAdmitFingerprintRequest) GetClientType() string {
	if x != nil {
		return x.ClientType
	}
	return ""
}

type DeleteAdmitFingerprintRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientType string `protobuf:"bytes,1,opt,name=client_type,json=clientType,proto3" json:"client_type,omitempty"`
}

func (x *DeleteAdmitFingerprintRequest) Reset() {
	*x = DeleteAdmitFingerprintRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_agent_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteAdmitFingerprintRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteAdmitFingerprintRequest) ProtoMessage() {}

func (x *DeleteAdmitFingerprintRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_agent_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteAdmitFingerprintRequest.ProtoReflect.Descriptor instead.
func (*DeleteAdmitFingerprintRequest) Descriptor() ([]byte, []int) {
	return file_dhcp_agent_proto_rawDescGZIP(), []int{41}
}

func (x *DeleteAdmitFingerprintRequest) GetClientType() string {
	if x != nil {
		return x.ClientType
	}
	return ""
}

type UpdatePingerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enabled bool   `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	Timeout uint32 `protobuf:"varint,2,opt,name=timeout,proto3" json:"timeout,omitempty"`
}

func (x *UpdatePingerRequest) Reset() {
	*x = UpdatePingerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_agent_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdatePingerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatePingerRequest) ProtoMessage() {}

func (x *UpdatePingerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_agent_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatePingerRequest.ProtoReflect.Descriptor instead.
func (*UpdatePingerRequest) Descriptor() ([]byte, []int) {
	return file_dhcp_agent_proto_rawDescGZIP(), []int{42}
}

func (x *UpdatePingerRequest) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *UpdatePingerRequest) GetTimeout() uint32 {
	if x != nil {
		return x.Timeout
	}
	return 0
}

type GetSubnetsLeasesCountRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetSubnetsLeasesCountRequest) Reset() {
	*x = GetSubnetsLeasesCountRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_agent_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSubnetsLeasesCountRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSubnetsLeasesCountRequest) ProtoMessage() {}

func (x *GetSubnetsLeasesCountRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_agent_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSubnetsLeasesCountRequest.ProtoReflect.Descriptor instead.
func (*GetSubnetsLeasesCountRequest) Descriptor() ([]byte, []int) {
	return file_dhcp_agent_proto_rawDescGZIP(), []int{43}
}

type GetSubnetsLeasesCountWithIdsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ids []uint64 `protobuf:"varint,1,rep,packed,name=ids,proto3" json:"ids,omitempty"`
}

func (x *GetSubnetsLeasesCountWithIdsRequest) Reset() {
	*x = GetSubnetsLeasesCountWithIdsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_agent_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSubnetsLeasesCountWithIdsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSubnetsLeasesCountWithIdsRequest) ProtoMessage() {}

func (x *GetSubnetsLeasesCountWithIdsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_agent_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSubnetsLeasesCountWithIdsRequest.ProtoReflect.Descriptor instead.
func (*GetSubnetsLeasesCountWithIdsRequest) Descriptor() ([]byte, []int) {
	return file_dhcp_agent_proto_rawDescGZIP(), []int{44}
}

func (x *GetSubnetsLeasesCountWithIdsRequest) GetIds() []uint64 {
	if x != nil {
		return x.Ids
	}
	return nil
}

type GetSubnetsLeasesCountResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Succeed            bool              `protobuf:"varint,1,opt,name=succeed,proto3" json:"succeed,omitempty"`
	SubnetsLeasesCount map[uint64]uint64 `protobuf:"bytes,2,rep,name=subnets_leases_count,json=subnetsLeasesCount,proto3" json:"subnets_leases_count,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *GetSubnetsLeasesCountResponse) Reset() {
	*x = GetSubnetsLeasesCountResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_agent_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSubnetsLeasesCountResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSubnetsLeasesCountResponse) ProtoMessage() {}

func (x *GetSubnetsLeasesCountResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_agent_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSubnetsLeasesCountResponse.ProtoReflect.Descriptor instead.
func (*GetSubnetsLeasesCountResponse) Descriptor() ([]byte, []int) {
	return file_dhcp_agent_proto_rawDescGZIP(), []int{45}
}

func (x *GetSubnetsLeasesCountResponse) GetSucceed() bool {
	if x != nil {
		return x.Succeed
	}
	return false
}

func (x *GetSubnetsLeasesCountResponse) GetSubnetsLeasesCount() map[uint64]uint64 {
	if x != nil {
		return x.SubnetsLeasesCount
	}
	return nil
}

type GetSubnet4LeasesCountRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetSubnet4LeasesCountRequest) Reset() {
	*x = GetSubnet4LeasesCountRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_agent_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSubnet4LeasesCountRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSubnet4LeasesCountRequest) ProtoMessage() {}

func (x *GetSubnet4LeasesCountRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_agent_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSubnet4LeasesCountRequest.ProtoReflect.Descriptor instead.
func (*GetSubnet4LeasesCountRequest) Descriptor() ([]byte, []int) {
	return file_dhcp_agent_proto_rawDescGZIP(), []int{46}
}

func (x *GetSubnet4LeasesCountRequest) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type GetPool4LeasesCountRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubnetId     uint64 `protobuf:"varint,1,opt,name=subnet_id,json=subnetId,proto3" json:"subnet_id,omitempty"`
	BeginAddress string `protobuf:"bytes,2,opt,name=begin_address,json=beginAddress,proto3" json:"begin_address,omitempty"`
	EndAddress   string `protobuf:"bytes,3,opt,name=end_address,json=endAddress,proto3" json:"end_address,omitempty"`
}

func (x *GetPool4LeasesCountRequest) Reset() {
	*x = GetPool4LeasesCountRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_agent_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPool4LeasesCountRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPool4LeasesCountRequest) ProtoMessage() {}

func (x *GetPool4LeasesCountRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_agent_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPool4LeasesCountRequest.ProtoReflect.Descriptor instead.
func (*GetPool4LeasesCountRequest) Descriptor() ([]byte, []int) {
	return file_dhcp_agent_proto_rawDescGZIP(), []int{47}
}

func (x *GetPool4LeasesCountRequest) GetSubnetId() uint64 {
	if x != nil {
		return x.SubnetId
	}
	return 0
}

func (x *GetPool4LeasesCountRequest) GetBeginAddress() string {
	if x != nil {
		return x.BeginAddress
	}
	return ""
}

func (x *GetPool4LeasesCountRequest) GetEndAddress() string {
	if x != nil {
		return x.EndAddress
	}
	return ""
}

type GetReservation4LeaseCountRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubnetId  uint64 `protobuf:"varint,1,opt,name=subnet_id,json=subnetId,proto3" json:"subnet_id,omitempty"`
	HwAddress string `protobuf:"bytes,2,opt,name=hw_address,json=hwAddress,proto3" json:"hw_address,omitempty"`
	IpAddress string `protobuf:"bytes,3,opt,name=ip_address,json=ipAddress,proto3" json:"ip_address,omitempty"`
}

func (x *GetReservation4LeaseCountRequest) Reset() {
	*x = GetReservation4LeaseCountRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_agent_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetReservation4LeaseCountRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetReservation4LeaseCountRequest) ProtoMessage() {}

func (x *GetReservation4LeaseCountRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_agent_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetReservation4LeaseCountRequest.ProtoReflect.Descriptor instead.
func (*GetReservation4LeaseCountRequest) Descriptor() ([]byte, []int) {
	return file_dhcp_agent_proto_rawDescGZIP(), []int{48}
}

func (x *GetReservation4LeaseCountRequest) GetSubnetId() uint64 {
	if x != nil {
		return x.SubnetId
	}
	return 0
}

func (x *GetReservation4LeaseCountRequest) GetHwAddress() string {
	if x != nil {
		return x.HwAddress
	}
	return ""
}

func (x *GetReservation4LeaseCountRequest) GetIpAddress() string {
	if x != nil {
		return x.IpAddress
	}
	return ""
}

type GetReservation4LeaseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubnetId  uint64 `protobuf:"varint,1,opt,name=subnet_id,json=subnetId,proto3" json:"subnet_id,omitempty"`
	HwAddress string `protobuf:"bytes,2,opt,name=hw_address,json=hwAddress,proto3" json:"hw_address,omitempty"`
	IpAddress string `protobuf:"bytes,3,opt,name=ip_address,json=ipAddress,proto3" json:"ip_address,omitempty"`
}

func (x *GetReservation4LeaseRequest) Reset() {
	*x = GetReservation4LeaseRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_agent_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetReservation4LeaseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetReservation4LeaseRequest) ProtoMessage() {}

func (x *GetReservation4LeaseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_agent_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetReservation4LeaseRequest.ProtoReflect.Descriptor instead.
func (*GetReservation4LeaseRequest) Descriptor() ([]byte, []int) {
	return file_dhcp_agent_proto_rawDescGZIP(), []int{49}
}

func (x *GetReservation4LeaseRequest) GetSubnetId() uint64 {
	if x != nil {
		return x.SubnetId
	}
	return 0
}

func (x *GetReservation4LeaseRequest) GetHwAddress() string {
	if x != nil {
		return x.HwAddress
	}
	return ""
}

func (x *GetReservation4LeaseRequest) GetIpAddress() string {
	if x != nil {
		return x.IpAddress
	}
	return ""
}

type GetLeasesCountResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Succeed     bool   `protobuf:"varint,1,opt,name=succeed,proto3" json:"succeed,omitempty"`
	LeasesCount uint64 `protobuf:"varint,2,opt,name=leases_count,json=leasesCount,proto3" json:"leases_count,omitempty"`
}

func (x *GetLeasesCountResponse) Reset() {
	*x = GetLeasesCountResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_agent_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLeasesCountResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLeasesCountResponse) ProtoMessage() {}

func (x *GetLeasesCountResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_agent_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLeasesCountResponse.ProtoReflect.Descriptor instead.
func (*GetLeasesCountResponse) Descriptor() ([]byte, []int) {
	return file_dhcp_agent_proto_rawDescGZIP(), []int{50}
}

func (x *GetLeasesCountResponse) GetSucceed() bool {
	if x != nil {
		return x.Succeed
	}
	return false
}

func (x *GetLeasesCountResponse) GetLeasesCount() uint64 {
	if x != nil {
		return x.LeasesCount
	}
	return 0
}

type GetSubnet6LeasesCountRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetSubnet6LeasesCountRequest) Reset() {
	*x = GetSubnet6LeasesCountRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_agent_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSubnet6LeasesCountRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSubnet6LeasesCountRequest) ProtoMessage() {}

func (x *GetSubnet6LeasesCountRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_agent_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSubnet6LeasesCountRequest.ProtoReflect.Descriptor instead.
func (*GetSubnet6LeasesCountRequest) Descriptor() ([]byte, []int) {
	return file_dhcp_agent_proto_rawDescGZIP(), []int{51}
}

func (x *GetSubnet6LeasesCountRequest) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type GetPool6LeasesCountRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubnetId     uint64 `protobuf:"varint,1,opt,name=subnet_id,json=subnetId,proto3" json:"subnet_id,omitempty"`
	BeginAddress string `protobuf:"bytes,2,opt,name=begin_address,json=beginAddress,proto3" json:"begin_address,omitempty"`
	EndAddress   string `protobuf:"bytes,3,opt,name=end_address,json=endAddress,proto3" json:"end_address,omitempty"`
}

func (x *GetPool6LeasesCountRequest) Reset() {
	*x = GetPool6LeasesCountRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_agent_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPool6LeasesCountRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPool6LeasesCountRequest) ProtoMessage() {}

func (x *GetPool6LeasesCountRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_agent_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPool6LeasesCountRequest.ProtoReflect.Descriptor instead.
func (*GetPool6LeasesCountRequest) Descriptor() ([]byte, []int) {
	return file_dhcp_agent_proto_rawDescGZIP(), []int{52}
}

func (x *GetPool6LeasesCountRequest) GetSubnetId() uint64 {
	if x != nil {
		return x.SubnetId
	}
	return 0
}

func (x *GetPool6LeasesCountRequest) GetBeginAddress() string {
	if x != nil {
		return x.BeginAddress
	}
	return ""
}

func (x *GetPool6LeasesCountRequest) GetEndAddress() string {
	if x != nil {
		return x.EndAddress
	}
	return ""
}

type GetReservation6LeasesCountRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubnetId    uint64   `protobuf:"varint,1,opt,name=subnet_id,json=subnetId,proto3" json:"subnet_id,omitempty"`
	HwAddress   string   `protobuf:"bytes,2,opt,name=hw_address,json=hwAddress,proto3" json:"hw_address,omitempty"`
	Duid        string   `protobuf:"bytes,3,opt,name=duid,proto3" json:"duid,omitempty"`
	IpAddresses []string `protobuf:"bytes,4,rep,name=ip_addresses,json=ipAddresses,proto3" json:"ip_addresses,omitempty"`
	Prefixes    []string `protobuf:"bytes,5,rep,name=prefixes,proto3" json:"prefixes,omitempty"`
}

func (x *GetReservation6LeasesCountRequest) Reset() {
	*x = GetReservation6LeasesCountRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_agent_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetReservation6LeasesCountRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetReservation6LeasesCountRequest) ProtoMessage() {}

func (x *GetReservation6LeasesCountRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_agent_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetReservation6LeasesCountRequest.ProtoReflect.Descriptor instead.
func (*GetReservation6LeasesCountRequest) Descriptor() ([]byte, []int) {
	return file_dhcp_agent_proto_rawDescGZIP(), []int{53}
}

func (x *GetReservation6LeasesCountRequest) GetSubnetId() uint64 {
	if x != nil {
		return x.SubnetId
	}
	return 0
}

func (x *GetReservation6LeasesCountRequest) GetHwAddress() string {
	if x != nil {
		return x.HwAddress
	}
	return ""
}

func (x *GetReservation6LeasesCountRequest) GetDuid() string {
	if x != nil {
		return x.Duid
	}
	return ""
}

func (x *GetReservation6LeasesCountRequest) GetIpAddresses() []string {
	if x != nil {
		return x.IpAddresses
	}
	return nil
}

func (x *GetReservation6LeasesCountRequest) GetPrefixes() []string {
	if x != nil {
		return x.Prefixes
	}
	return nil
}

type GetReservation6LeasesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubnetId    uint64   `protobuf:"varint,1,opt,name=subnet_id,json=subnetId,proto3" json:"subnet_id,omitempty"`
	HwAddress   string   `protobuf:"bytes,2,opt,name=hw_address,json=hwAddress,proto3" json:"hw_address,omitempty"`
	Duid        string   `protobuf:"bytes,3,opt,name=duid,proto3" json:"duid,omitempty"`
	IpAddresses []string `protobuf:"bytes,4,rep,name=ip_addresses,json=ipAddresses,proto3" json:"ip_addresses,omitempty"`
	Prefixes    []string `protobuf:"bytes,5,rep,name=prefixes,proto3" json:"prefixes,omitempty"`
}

func (x *GetReservation6LeasesRequest) Reset() {
	*x = GetReservation6LeasesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_agent_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetReservation6LeasesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetReservation6LeasesRequest) ProtoMessage() {}

func (x *GetReservation6LeasesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_agent_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetReservation6LeasesRequest.ProtoReflect.Descriptor instead.
func (*GetReservation6LeasesRequest) Descriptor() ([]byte, []int) {
	return file_dhcp_agent_proto_rawDescGZIP(), []int{54}
}

func (x *GetReservation6LeasesRequest) GetSubnetId() uint64 {
	if x != nil {
		return x.SubnetId
	}
	return 0
}

func (x *GetReservation6LeasesRequest) GetHwAddress() string {
	if x != nil {
		return x.HwAddress
	}
	return ""
}

func (x *GetReservation6LeasesRequest) GetDuid() string {
	if x != nil {
		return x.Duid
	}
	return ""
}

func (x *GetReservation6LeasesRequest) GetIpAddresses() []string {
	if x != nil {
		return x.IpAddresses
	}
	return nil
}

func (x *GetReservation6LeasesRequest) GetPrefixes() []string {
	if x != nil {
		return x.Prefixes
	}
	return nil
}

type GetSubnet4LeasesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetSubnet4LeasesRequest) Reset() {
	*x = GetSubnet4LeasesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_agent_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSubnet4LeasesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSubnet4LeasesRequest) ProtoMessage() {}

func (x *GetSubnet4LeasesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_agent_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSubnet4LeasesRequest.ProtoReflect.Descriptor instead.
func (*GetSubnet4LeasesRequest) Descriptor() ([]byte, []int) {
	return file_dhcp_agent_proto_rawDescGZIP(), []int{55}
}

func (x *GetSubnet4LeasesRequest) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type GetSubnet4LeaseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Address string `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
}

func (x *GetSubnet4LeaseRequest) Reset() {
	*x = GetSubnet4LeaseRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_agent_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSubnet4LeaseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSubnet4LeaseRequest) ProtoMessage() {}

func (x *GetSubnet4LeaseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_agent_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSubnet4LeaseRequest.ProtoReflect.Descriptor instead.
func (*GetSubnet4LeaseRequest) Descriptor() ([]byte, []int) {
	return file_dhcp_agent_proto_rawDescGZIP(), []int{56}
}

func (x *GetSubnet4LeaseRequest) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *GetSubnet4LeaseRequest) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

type GetSubnet4LeasesWithIpsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Addresses []*GetSubnet4LeaseRequest `protobuf:"bytes,1,rep,name=addresses,proto3" json:"addresses,omitempty"`
}

func (x *GetSubnet4LeasesWithIpsRequest) Reset() {
	*x = GetSubnet4LeasesWithIpsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_agent_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSubnet4LeasesWithIpsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSubnet4LeasesWithIpsRequest) ProtoMessage() {}

func (x *GetSubnet4LeasesWithIpsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_agent_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSubnet4LeasesWithIpsRequest.ProtoReflect.Descriptor instead.
func (*GetSubnet4LeasesWithIpsRequest) Descriptor() ([]byte, []int) {
	return file_dhcp_agent_proto_rawDescGZIP(), []int{57}
}

func (x *GetSubnet4LeasesWithIpsRequest) GetAddresses() []*GetSubnet4LeaseRequest {
	if x != nil {
		return x.Addresses
	}
	return nil
}

type GetLeases4WithIpsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Succeed bool                   `protobuf:"varint,1,opt,name=succeed,proto3" json:"succeed,omitempty"`
	Leases  map[string]*DHCPLease4 `protobuf:"bytes,2,rep,name=leases,proto3" json:"leases,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *GetLeases4WithIpsResponse) Reset() {
	*x = GetLeases4WithIpsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_agent_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLeases4WithIpsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLeases4WithIpsResponse) ProtoMessage() {}

func (x *GetLeases4WithIpsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_agent_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLeases4WithIpsResponse.ProtoReflect.Descriptor instead.
func (*GetLeases4WithIpsResponse) Descriptor() ([]byte, []int) {
	return file_dhcp_agent_proto_rawDescGZIP(), []int{58}
}

func (x *GetLeases4WithIpsResponse) GetSucceed() bool {
	if x != nil {
		return x.Succeed
	}
	return false
}

func (x *GetLeases4WithIpsResponse) GetLeases() map[string]*DHCPLease4 {
	if x != nil {
		return x.Leases
	}
	return nil
}

type GetSubnet6LeasesWithIpsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Addresses []*GetSubnet6LeaseRequest `protobuf:"bytes,1,rep,name=addresses,proto3" json:"addresses,omitempty"`
}

func (x *GetSubnet6LeasesWithIpsRequest) Reset() {
	*x = GetSubnet6LeasesWithIpsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_agent_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSubnet6LeasesWithIpsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSubnet6LeasesWithIpsRequest) ProtoMessage() {}

func (x *GetSubnet6LeasesWithIpsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_agent_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSubnet6LeasesWithIpsRequest.ProtoReflect.Descriptor instead.
func (*GetSubnet6LeasesWithIpsRequest) Descriptor() ([]byte, []int) {
	return file_dhcp_agent_proto_rawDescGZIP(), []int{59}
}

func (x *GetSubnet6LeasesWithIpsRequest) GetAddresses() []*GetSubnet6LeaseRequest {
	if x != nil {
		return x.Addresses
	}
	return nil
}

type GetLeases6WithIpsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Succeed bool                   `protobuf:"varint,1,opt,name=succeed,proto3" json:"succeed,omitempty"`
	Leases  map[string]*DHCPLease6 `protobuf:"bytes,2,rep,name=leases,proto3" json:"leases,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *GetLeases6WithIpsResponse) Reset() {
	*x = GetLeases6WithIpsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_agent_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLeases6WithIpsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLeases6WithIpsResponse) ProtoMessage() {}

func (x *GetLeases6WithIpsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_agent_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLeases6WithIpsResponse.ProtoReflect.Descriptor instead.
func (*GetLeases6WithIpsResponse) Descriptor() ([]byte, []int) {
	return file_dhcp_agent_proto_rawDescGZIP(), []int{60}
}

func (x *GetLeases6WithIpsResponse) GetSucceed() bool {
	if x != nil {
		return x.Succeed
	}
	return false
}

func (x *GetLeases6WithIpsResponse) GetLeases() map[string]*DHCPLease6 {
	if x != nil {
		return x.Leases
	}
	return nil
}

type GetSubnet6LeasesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetSubnet6LeasesRequest) Reset() {
	*x = GetSubnet6LeasesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_agent_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSubnet6LeasesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSubnet6LeasesRequest) ProtoMessage() {}

func (x *GetSubnet6LeasesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_agent_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSubnet6LeasesRequest.ProtoReflect.Descriptor instead.
func (*GetSubnet6LeasesRequest) Descriptor() ([]byte, []int) {
	return file_dhcp_agent_proto_rawDescGZIP(), []int{61}
}

func (x *GetSubnet6LeasesRequest) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type GetSubnet6LeaseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Address string `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
}

func (x *GetSubnet6LeaseRequest) Reset() {
	*x = GetSubnet6LeaseRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_agent_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSubnet6LeaseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSubnet6LeaseRequest) ProtoMessage() {}

func (x *GetSubnet6LeaseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_agent_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSubnet6LeaseRequest.ProtoReflect.Descriptor instead.
func (*GetSubnet6LeaseRequest) Descriptor() ([]byte, []int) {
	return file_dhcp_agent_proto_rawDescGZIP(), []int{62}
}

func (x *GetSubnet6LeaseRequest) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *GetSubnet6LeaseRequest) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

type GetPool4LeasesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubnetId     uint64 `protobuf:"varint,1,opt,name=subnet_id,json=subnetId,proto3" json:"subnet_id,omitempty"`
	BeginAddress string `protobuf:"bytes,2,opt,name=begin_address,json=beginAddress,proto3" json:"begin_address,omitempty"`
	EndAddress   string `protobuf:"bytes,3,opt,name=end_address,json=endAddress,proto3" json:"end_address,omitempty"`
}

func (x *GetPool4LeasesRequest) Reset() {
	*x = GetPool4LeasesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_agent_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPool4LeasesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPool4LeasesRequest) ProtoMessage() {}

func (x *GetPool4LeasesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_agent_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPool4LeasesRequest.ProtoReflect.Descriptor instead.
func (*GetPool4LeasesRequest) Descriptor() ([]byte, []int) {
	return file_dhcp_agent_proto_rawDescGZIP(), []int{63}
}

func (x *GetPool4LeasesRequest) GetSubnetId() uint64 {
	if x != nil {
		return x.SubnetId
	}
	return 0
}

func (x *GetPool4LeasesRequest) GetBeginAddress() string {
	if x != nil {
		return x.BeginAddress
	}
	return ""
}

func (x *GetPool4LeasesRequest) GetEndAddress() string {
	if x != nil {
		return x.EndAddress
	}
	return ""
}

type GetPool6LeasesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubnetId     uint64 `protobuf:"varint,1,opt,name=subnet_id,json=subnetId,proto3" json:"subnet_id,omitempty"`
	BeginAddress string `protobuf:"bytes,2,opt,name=begin_address,json=beginAddress,proto3" json:"begin_address,omitempty"`
	EndAddress   string `protobuf:"bytes,3,opt,name=end_address,json=endAddress,proto3" json:"end_address,omitempty"`
}

func (x *GetPool6LeasesRequest) Reset() {
	*x = GetPool6LeasesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_agent_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPool6LeasesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPool6LeasesRequest) ProtoMessage() {}

func (x *GetPool6LeasesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_agent_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPool6LeasesRequest.ProtoReflect.Descriptor instead.
func (*GetPool6LeasesRequest) Descriptor() ([]byte, []int) {
	return file_dhcp_agent_proto_rawDescGZIP(), []int{64}
}

func (x *GetPool6LeasesRequest) GetSubnetId() uint64 {
	if x != nil {
		return x.SubnetId
	}
	return 0
}

func (x *GetPool6LeasesRequest) GetBeginAddress() string {
	if x != nil {
		return x.BeginAddress
	}
	return ""
}

func (x *GetPool6LeasesRequest) GetEndAddress() string {
	if x != nil {
		return x.EndAddress
	}
	return ""
}

type DHCPLease4 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address               string     `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	SubnetId              uint64     `protobuf:"varint,2,opt,name=subnet_id,json=subnetId,proto3" json:"subnet_id,omitempty"`
	HwAddress             string     `protobuf:"bytes,3,opt,name=hw_address,json=hwAddress,proto3" json:"hw_address,omitempty"`
	HwAddressOrganization string     `protobuf:"bytes,4,opt,name=hw_address_organization,json=hwAddressOrganization,proto3" json:"hw_address_organization,omitempty"`
	ValidLifetime         uint32     `protobuf:"varint,5,opt,name=valid_lifetime,json=validLifetime,proto3" json:"valid_lifetime,omitempty"`
	Expire                int64      `protobuf:"varint,6,opt,name=expire,proto3" json:"expire,omitempty"`
	LeaseState            LeaseState `protobuf:"varint,7,opt,name=lease_state,json=leaseState,proto3,enum=proto.LeaseState" json:"lease_state,omitempty"`
	Hostname              string     `protobuf:"bytes,8,opt,name=hostname,proto3" json:"hostname,omitempty"`
	ClientId              string     `protobuf:"bytes,9,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	Fingerprint           string     `protobuf:"bytes,10,opt,name=fingerprint,proto3" json:"fingerprint,omitempty"`
	VendorId              string     `protobuf:"bytes,11,opt,name=vendor_id,json=vendorId,proto3" json:"vendor_id,omitempty"`
	OperatingSystem       string     `protobuf:"bytes,12,opt,name=operating_system,json=operatingSystem,proto3" json:"operating_system,omitempty"`
	ClientType            string     `protobuf:"bytes,13,opt,name=client_type,json=clientType,proto3" json:"client_type,omitempty"`
}

func (x *DHCPLease4) Reset() {
	*x = DHCPLease4{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_agent_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DHCPLease4) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DHCPLease4) ProtoMessage() {}

func (x *DHCPLease4) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_agent_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DHCPLease4.ProtoReflect.Descriptor instead.
func (*DHCPLease4) Descriptor() ([]byte, []int) {
	return file_dhcp_agent_proto_rawDescGZIP(), []int{65}
}

func (x *DHCPLease4) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *DHCPLease4) GetSubnetId() uint64 {
	if x != nil {
		return x.SubnetId
	}
	return 0
}

func (x *DHCPLease4) GetHwAddress() string {
	if x != nil {
		return x.HwAddress
	}
	return ""
}

func (x *DHCPLease4) GetHwAddressOrganization() string {
	if x != nil {
		return x.HwAddressOrganization
	}
	return ""
}

func (x *DHCPLease4) GetValidLifetime() uint32 {
	if x != nil {
		return x.ValidLifetime
	}
	return 0
}

func (x *DHCPLease4) GetExpire() int64 {
	if x != nil {
		return x.Expire
	}
	return 0
}

func (x *DHCPLease4) GetLeaseState() LeaseState {
	if x != nil {
		return x.LeaseState
	}
	return LeaseState_NORMAL
}

func (x *DHCPLease4) GetHostname() string {
	if x != nil {
		return x.Hostname
	}
	return ""
}

func (x *DHCPLease4) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *DHCPLease4) GetFingerprint() string {
	if x != nil {
		return x.Fingerprint
	}
	return ""
}

func (x *DHCPLease4) GetVendorId() string {
	if x != nil {
		return x.VendorId
	}
	return ""
}

func (x *DHCPLease4) GetOperatingSystem() string {
	if x != nil {
		return x.OperatingSystem
	}
	return ""
}

func (x *DHCPLease4) GetClientType() string {
	if x != nil {
		return x.ClientType
	}
	return ""
}

type GetLeases4Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Succeed bool          `protobuf:"varint,1,opt,name=succeed,proto3" json:"succeed,omitempty"`
	Leases  []*DHCPLease4 `protobuf:"bytes,2,rep,name=leases,proto3" json:"leases,omitempty"`
}

func (x *GetLeases4Response) Reset() {
	*x = GetLeases4Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_agent_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLeases4Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLeases4Response) ProtoMessage() {}

func (x *GetLeases4Response) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_agent_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLeases4Response.ProtoReflect.Descriptor instead.
func (*GetLeases4Response) Descriptor() ([]byte, []int) {
	return file_dhcp_agent_proto_rawDescGZIP(), []int{66}
}

func (x *GetLeases4Response) GetSucceed() bool {
	if x != nil {
		return x.Succeed
	}
	return false
}

func (x *GetLeases4Response) GetLeases() []*DHCPLease4 {
	if x != nil {
		return x.Leases
	}
	return nil
}

type GetLease4Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Succeed bool        `protobuf:"varint,1,opt,name=succeed,proto3" json:"succeed,omitempty"`
	Lease   *DHCPLease4 `protobuf:"bytes,2,opt,name=lease,proto3" json:"lease,omitempty"`
}

func (x *GetLease4Response) Reset() {
	*x = GetLease4Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_agent_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLease4Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLease4Response) ProtoMessage() {}

func (x *GetLease4Response) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_agent_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLease4Response.ProtoReflect.Descriptor instead.
func (*GetLease4Response) Descriptor() ([]byte, []int) {
	return file_dhcp_agent_proto_rawDescGZIP(), []int{67}
}

func (x *GetLease4Response) GetSucceed() bool {
	if x != nil {
		return x.Succeed
	}
	return false
}

func (x *GetLease4Response) GetLease() *DHCPLease4 {
	if x != nil {
		return x.Lease
	}
	return nil
}

type DHCPLease6 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address               string          `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	SubnetId              uint64          `protobuf:"varint,2,opt,name=subnet_id,json=subnetId,proto3" json:"subnet_id,omitempty"`
	HwAddress             string          `protobuf:"bytes,3,opt,name=hw_address,json=hwAddress,proto3" json:"hw_address,omitempty"`
	HwAddressType         string          `protobuf:"bytes,4,opt,name=hw_address_type,json=hwAddressType,proto3" json:"hw_address_type,omitempty"`
	HwAddressSource       HwAddressSource `protobuf:"varint,5,opt,name=hw_address_source,json=hwAddressSource,proto3,enum=proto.HwAddressSource" json:"hw_address_source,omitempty"`
	HwAddressOrganization string          `protobuf:"bytes,6,opt,name=hw_address_organization,json=hwAddressOrganization,proto3" json:"hw_address_organization,omitempty"`
	Duid                  string          `protobuf:"bytes,7,opt,name=duid,proto3" json:"duid,omitempty"`
	Iaid                  uint32          `protobuf:"varint,8,opt,name=iaid,proto3" json:"iaid,omitempty"`
	ValidLifetime         uint32          `protobuf:"varint,9,opt,name=valid_lifetime,json=validLifetime,proto3" json:"valid_lifetime,omitempty"`
	Expire                int64           `protobuf:"varint,10,opt,name=expire,proto3" json:"expire,omitempty"`
	PrefixLen             uint32          `protobuf:"varint,11,opt,name=prefix_len,json=prefixLen,proto3" json:"prefix_len,omitempty"`
	PreferredLifetime     uint32          `protobuf:"varint,12,opt,name=preferred_lifetime,json=preferredLifetime,proto3" json:"preferred_lifetime,omitempty"`
	LeaseType             string          `protobuf:"bytes,13,opt,name=lease_type,json=leaseType,proto3" json:"lease_type,omitempty"`
	LeaseState            LeaseState      `protobuf:"varint,14,opt,name=lease_state,json=leaseState,proto3,enum=proto.LeaseState" json:"lease_state,omitempty"`
	Hostname              string          `protobuf:"bytes,15,opt,name=hostname,proto3" json:"hostname,omitempty"`
	Fingerprint           string          `protobuf:"bytes,16,opt,name=fingerprint,proto3" json:"fingerprint,omitempty"`
	VendorId              string          `protobuf:"bytes,17,opt,name=vendor_id,json=vendorId,proto3" json:"vendor_id,omitempty"`
	OperatingSystem       string          `protobuf:"bytes,18,opt,name=operating_system,json=operatingSystem,proto3" json:"operating_system,omitempty"`
	ClientType            string          `protobuf:"bytes,19,opt,name=client_type,json=clientType,proto3" json:"client_type,omitempty"`
}

func (x *DHCPLease6) Reset() {
	*x = DHCPLease6{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_agent_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DHCPLease6) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DHCPLease6) ProtoMessage() {}

func (x *DHCPLease6) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_agent_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DHCPLease6.ProtoReflect.Descriptor instead.
func (*DHCPLease6) Descriptor() ([]byte, []int) {
	return file_dhcp_agent_proto_rawDescGZIP(), []int{68}
}

func (x *DHCPLease6) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *DHCPLease6) GetSubnetId() uint64 {
	if x != nil {
		return x.SubnetId
	}
	return 0
}

func (x *DHCPLease6) GetHwAddress() string {
	if x != nil {
		return x.HwAddress
	}
	return ""
}

func (x *DHCPLease6) GetHwAddressType() string {
	if x != nil {
		return x.HwAddressType
	}
	return ""
}

func (x *DHCPLease6) GetHwAddressSource() HwAddressSource {
	if x != nil {
		return x.HwAddressSource
	}
	return HwAddressSource_UNKNOWN
}

func (x *DHCPLease6) GetHwAddressOrganization() string {
	if x != nil {
		return x.HwAddressOrganization
	}
	return ""
}

func (x *DHCPLease6) GetDuid() string {
	if x != nil {
		return x.Duid
	}
	return ""
}

func (x *DHCPLease6) GetIaid() uint32 {
	if x != nil {
		return x.Iaid
	}
	return 0
}

func (x *DHCPLease6) GetValidLifetime() uint32 {
	if x != nil {
		return x.ValidLifetime
	}
	return 0
}

func (x *DHCPLease6) GetExpire() int64 {
	if x != nil {
		return x.Expire
	}
	return 0
}

func (x *DHCPLease6) GetPrefixLen() uint32 {
	if x != nil {
		return x.PrefixLen
	}
	return 0
}

func (x *DHCPLease6) GetPreferredLifetime() uint32 {
	if x != nil {
		return x.PreferredLifetime
	}
	return 0
}

func (x *DHCPLease6) GetLeaseType() string {
	if x != nil {
		return x.LeaseType
	}
	return ""
}

func (x *DHCPLease6) GetLeaseState() LeaseState {
	if x != nil {
		return x.LeaseState
	}
	return LeaseState_NORMAL
}

func (x *DHCPLease6) GetHostname() string {
	if x != nil {
		return x.Hostname
	}
	return ""
}

func (x *DHCPLease6) GetFingerprint() string {
	if x != nil {
		return x.Fingerprint
	}
	return ""
}

func (x *DHCPLease6) GetVendorId() string {
	if x != nil {
		return x.VendorId
	}
	return ""
}

func (x *DHCPLease6) GetOperatingSystem() string {
	if x != nil {
		return x.OperatingSystem
	}
	return ""
}

func (x *DHCPLease6) GetClientType() string {
	if x != nil {
		return x.ClientType
	}
	return ""
}

type GetLeases6Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Succeed bool          `protobuf:"varint,1,opt,name=succeed,proto3" json:"succeed,omitempty"`
	Leases  []*DHCPLease6 `protobuf:"bytes,2,rep,name=leases,proto3" json:"leases,omitempty"`
}

func (x *GetLeases6Response) Reset() {
	*x = GetLeases6Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_agent_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLeases6Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLeases6Response) ProtoMessage() {}

func (x *GetLeases6Response) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_agent_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLeases6Response.ProtoReflect.Descriptor instead.
func (*GetLeases6Response) Descriptor() ([]byte, []int) {
	return file_dhcp_agent_proto_rawDescGZIP(), []int{69}
}

func (x *GetLeases6Response) GetSucceed() bool {
	if x != nil {
		return x.Succeed
	}
	return false
}

func (x *GetLeases6Response) GetLeases() []*DHCPLease6 {
	if x != nil {
		return x.Leases
	}
	return nil
}

type GetLease6Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Succeed bool        `protobuf:"varint,1,opt,name=succeed,proto3" json:"succeed,omitempty"`
	Lease   *DHCPLease6 `protobuf:"bytes,2,opt,name=lease,proto3" json:"lease,omitempty"`
}

func (x *GetLease6Response) Reset() {
	*x = GetLease6Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_agent_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLease6Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLease6Response) ProtoMessage() {}

func (x *GetLease6Response) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_agent_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLease6Response.ProtoReflect.Descriptor instead.
func (*GetLease6Response) Descriptor() ([]byte, []int) {
	return file_dhcp_agent_proto_rawDescGZIP(), []int{70}
}

func (x *GetLease6Response) GetSucceed() bool {
	if x != nil {
		return x.Succeed
	}
	return false
}

func (x *GetLease6Response) GetLease() *DHCPLease6 {
	if x != nil {
		return x.Lease
	}
	return nil
}

type CreateSubnets4AndPoolsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Subnets       []*CreateSubnet4Request       `protobuf:"bytes,1,rep,name=subnets,proto3" json:"subnets,omitempty"`
	Pools         []*CreatePool4Request         `protobuf:"bytes,2,rep,name=pools,proto3" json:"pools,omitempty"`
	ReservedPools []*CreateReservedPool4Request `protobuf:"bytes,3,rep,name=reserved_pools,json=reservedPools,proto3" json:"reserved_pools,omitempty"`
	Reservations  []*CreateReservation4Request  `protobuf:"bytes,4,rep,name=reservations,proto3" json:"reservations,omitempty"`
}

func (x *CreateSubnets4AndPoolsRequest) Reset() {
	*x = CreateSubnets4AndPoolsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_agent_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateSubnets4AndPoolsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSubnets4AndPoolsRequest) ProtoMessage() {}

func (x *CreateSubnets4AndPoolsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_agent_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSubnets4AndPoolsRequest.ProtoReflect.Descriptor instead.
func (*CreateSubnets4AndPoolsRequest) Descriptor() ([]byte, []int) {
	return file_dhcp_agent_proto_rawDescGZIP(), []int{71}
}

func (x *CreateSubnets4AndPoolsRequest) GetSubnets() []*CreateSubnet4Request {
	if x != nil {
		return x.Subnets
	}
	return nil
}

func (x *CreateSubnets4AndPoolsRequest) GetPools() []*CreatePool4Request {
	if x != nil {
		return x.Pools
	}
	return nil
}

func (x *CreateSubnets4AndPoolsRequest) GetReservedPools() []*CreateReservedPool4Request {
	if x != nil {
		return x.ReservedPools
	}
	return nil
}

func (x *CreateSubnets4AndPoolsRequest) GetReservations() []*CreateReservation4Request {
	if x != nil {
		return x.Reservations
	}
	return nil
}

type DeleteSubnets4Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ids []uint64 `protobuf:"varint,1,rep,packed,name=Ids,proto3" json:"Ids,omitempty"`
}

func (x *DeleteSubnets4Request) Reset() {
	*x = DeleteSubnets4Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_agent_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteSubnets4Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteSubnets4Request) ProtoMessage() {}

func (x *DeleteSubnets4Request) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_agent_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteSubnets4Request.ProtoReflect.Descriptor instead.
func (*DeleteSubnets4Request) Descriptor() ([]byte, []int) {
	return file_dhcp_agent_proto_rawDescGZIP(), []int{72}
}

func (x *DeleteSubnets4Request) GetIds() []uint64 {
	if x != nil {
		return x.Ids
	}
	return nil
}

type CreateSubnets6AndPoolsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Subnets         []*CreateSubnet6Request        `protobuf:"bytes,1,rep,name=subnets,proto3" json:"subnets,omitempty"`
	Pools           []*CreatePool6Request          `protobuf:"bytes,2,rep,name=pools,proto3" json:"pools,omitempty"`
	ReservedPools   []*CreateReservedPool6Request  `protobuf:"bytes,3,rep,name=reserved_pools,json=reservedPools,proto3" json:"reserved_pools,omitempty"`
	Reservations    []*CreateReservation6Request   `protobuf:"bytes,4,rep,name=reservations,proto3" json:"reservations,omitempty"`
	PdPools         []*CreatePdPoolRequest         `protobuf:"bytes,5,rep,name=pd_pools,json=pdPools,proto3" json:"pd_pools,omitempty"`
	ReservedPdPools []*CreateReservedPdPoolRequest `protobuf:"bytes,6,rep,name=reserved_pd_pools,json=reservedPdPools,proto3" json:"reserved_pd_pools,omitempty"`
}

func (x *CreateSubnets6AndPoolsRequest) Reset() {
	*x = CreateSubnets6AndPoolsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_agent_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateSubnets6AndPoolsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSubnets6AndPoolsRequest) ProtoMessage() {}

func (x *CreateSubnets6AndPoolsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_agent_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSubnets6AndPoolsRequest.ProtoReflect.Descriptor instead.
func (*CreateSubnets6AndPoolsRequest) Descriptor() ([]byte, []int) {
	return file_dhcp_agent_proto_rawDescGZIP(), []int{73}
}

func (x *CreateSubnets6AndPoolsRequest) GetSubnets() []*CreateSubnet6Request {
	if x != nil {
		return x.Subnets
	}
	return nil
}

func (x *CreateSubnets6AndPoolsRequest) GetPools() []*CreatePool6Request {
	if x != nil {
		return x.Pools
	}
	return nil
}

func (x *CreateSubnets6AndPoolsRequest) GetReservedPools() []*CreateReservedPool6Request {
	if x != nil {
		return x.ReservedPools
	}
	return nil
}

func (x *CreateSubnets6AndPoolsRequest) GetReservations() []*CreateReservation6Request {
	if x != nil {
		return x.Reservations
	}
	return nil
}

func (x *CreateSubnets6AndPoolsRequest) GetPdPools() []*CreatePdPoolRequest {
	if x != nil {
		return x.PdPools
	}
	return nil
}

func (x *CreateSubnets6AndPoolsRequest) GetReservedPdPools() []*CreateReservedPdPoolRequest {
	if x != nil {
		return x.ReservedPdPools
	}
	return nil
}

type DeleteSubnets6Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ids []uint64 `protobuf:"varint,1,rep,packed,name=Ids,proto3" json:"Ids,omitempty"`
}

func (x *DeleteSubnets6Request) Reset() {
	*x = DeleteSubnets6Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_agent_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteSubnets6Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteSubnets6Request) ProtoMessage() {}

func (x *DeleteSubnets6Request) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_agent_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteSubnets6Request.ProtoReflect.Descriptor instead.
func (*DeleteSubnets6Request) Descriptor() ([]byte, []int) {
	return file_dhcp_agent_proto_rawDescGZIP(), []int{74}
}

func (x *DeleteSubnets6Request) GetIds() []uint64 {
	if x != nil {
		return x.Ids
	}
	return nil
}

type CreateSharedNetwork4Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name      string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	SubnetIds []uint64 `protobuf:"varint,2,rep,packed,name=subnet_ids,json=subnetIds,proto3" json:"subnet_ids,omitempty"`
}

func (x *CreateSharedNetwork4Request) Reset() {
	*x = CreateSharedNetwork4Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_agent_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateSharedNetwork4Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSharedNetwork4Request) ProtoMessage() {}

func (x *CreateSharedNetwork4Request) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_agent_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSharedNetwork4Request.ProtoReflect.Descriptor instead.
func (*CreateSharedNetwork4Request) Descriptor() ([]byte, []int) {
	return file_dhcp_agent_proto_rawDescGZIP(), []int{75}
}

func (x *CreateSharedNetwork4Request) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateSharedNetwork4Request) GetSubnetIds() []uint64 {
	if x != nil {
		return x.SubnetIds
	}
	return nil
}

type DeleteSharedNetwork4Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *DeleteSharedNetwork4Request) Reset() {
	*x = DeleteSharedNetwork4Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_agent_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteSharedNetwork4Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteSharedNetwork4Request) ProtoMessage() {}

func (x *DeleteSharedNetwork4Request) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_agent_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteSharedNetwork4Request.ProtoReflect.Descriptor instead.
func (*DeleteSharedNetwork4Request) Descriptor() ([]byte, []int) {
	return file_dhcp_agent_proto_rawDescGZIP(), []int{76}
}

func (x *DeleteSharedNetwork4Request) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type UpdateSharedNetwork4Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Old *DeleteSharedNetwork4Request `protobuf:"bytes,1,opt,name=old,proto3" json:"old,omitempty"`
	New *CreateSharedNetwork4Request `protobuf:"bytes,2,opt,name=new,proto3" json:"new,omitempty"`
}

func (x *UpdateSharedNetwork4Request) Reset() {
	*x = UpdateSharedNetwork4Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_agent_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateSharedNetwork4Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSharedNetwork4Request) ProtoMessage() {}

func (x *UpdateSharedNetwork4Request) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_agent_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSharedNetwork4Request.ProtoReflect.Descriptor instead.
func (*UpdateSharedNetwork4Request) Descriptor() ([]byte, []int) {
	return file_dhcp_agent_proto_rawDescGZIP(), []int{77}
}

func (x *UpdateSharedNetwork4Request) GetOld() *DeleteSharedNetwork4Request {
	if x != nil {
		return x.Old
	}
	return nil
}

func (x *UpdateSharedNetwork4Request) GetNew() *CreateSharedNetwork4Request {
	if x != nil {
		return x.New
	}
	return nil
}

type DeleteLease4Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubnetId uint64 `protobuf:"varint,1,opt,name=subnet_id,json=subnetId,proto3" json:"subnet_id,omitempty"`
	Address  string `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
}

func (x *DeleteLease4Request) Reset() {
	*x = DeleteLease4Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_agent_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteLease4Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteLease4Request) ProtoMessage() {}

func (x *DeleteLease4Request) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_agent_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteLease4Request.ProtoReflect.Descriptor instead.
func (*DeleteLease4Request) Descriptor() ([]byte, []int) {
	return file_dhcp_agent_proto_rawDescGZIP(), []int{78}
}

func (x *DeleteLease4Request) GetSubnetId() uint64 {
	if x != nil {
		return x.SubnetId
	}
	return 0
}

func (x *DeleteLease4Request) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

type DeleteLease6Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubnetId  uint64 `protobuf:"varint,1,opt,name=subnet_id,json=subnetId,proto3" json:"subnet_id,omitempty"`
	LeaseType string `protobuf:"bytes,2,opt,name=lease_type,json=leaseType,proto3" json:"lease_type,omitempty"`
	Address   string `protobuf:"bytes,3,opt,name=address,proto3" json:"address,omitempty"`
}

func (x *DeleteLease6Request) Reset() {
	*x = DeleteLease6Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_agent_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteLease6Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteLease6Request) ProtoMessage() {}

func (x *DeleteLease6Request) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_agent_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteLease6Request.ProtoReflect.Descriptor instead.
func (*DeleteLease6Request) Descriptor() ([]byte, []int) {
	return file_dhcp_agent_proto_rawDescGZIP(), []int{79}
}

func (x *DeleteLease6Request) GetSubnetId() uint64 {
	if x != nil {
		return x.SubnetId
	}
	return 0
}

func (x *DeleteLease6Request) GetLeaseType() string {
	if x != nil {
		return x.LeaseType
	}
	return ""
}

func (x *DeleteLease6Request) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

type DeleteLeaseResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Succeed bool `protobuf:"varint,1,opt,name=succeed,proto3" json:"succeed,omitempty"`
}

func (x *DeleteLeaseResponse) Reset() {
	*x = DeleteLeaseResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_agent_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteLeaseResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteLeaseResponse) ProtoMessage() {}

func (x *DeleteLeaseResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_agent_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteLeaseResponse.ProtoReflect.Descriptor instead.
func (*DeleteLeaseResponse) Descriptor() ([]byte, []int) {
	return file_dhcp_agent_proto_rawDescGZIP(), []int{80}
}

func (x *DeleteLeaseResponse) GetSucceed() bool {
	if x != nil {
		return x.Succeed
	}
	return false
}

var File_dhcp_agent_proto protoreflect.FileDescriptor

var file_dhcp_agent_proto_rawDesc = []byte{
	0x0a, 0x10, 0x64, 0x68, 0x63, 0x70, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x05, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x15, 0x0a, 0x13, 0x47, 0x65, 0x74,
	0x44, 0x48, 0x43, 0x50, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x22, 0x5c, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x44, 0x48, 0x43, 0x50, 0x4e, 0x6f, 0x64, 0x65, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63,
	0x65, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65,
	0x65, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x70, 0x76, 0x34, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x05, 0x69, 0x70, 0x76, 0x34, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x70, 0x76, 0x36,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x69, 0x70, 0x76, 0x36, 0x73, 0x22, 0x4a,
	0x0a, 0x0c, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xd4, 0x03, 0x0a, 0x14, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x34, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x5f, 0x6c, 0x69, 0x66, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0d, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x4c, 0x69, 0x66, 0x65, 0x74, 0x69,
	0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x6d, 0x61, 0x78, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f,
	0x6c, 0x69, 0x66, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10,
	0x6d, 0x61, 0x78, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x4c, 0x69, 0x66, 0x65, 0x74, 0x69, 0x6d, 0x65,
	0x12, 0x2c, 0x0a, 0x12, 0x6d, 0x69, 0x6e, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x6c, 0x69,
	0x66, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x6d, 0x69,
	0x6e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x4c, 0x69, 0x66, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x1d,
	0x0a, 0x0a, 0x72, 0x65, 0x6e, 0x65, 0x77, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x09, 0x72, 0x65, 0x6e, 0x65, 0x77, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a,
	0x0b, 0x72, 0x65, 0x62, 0x69, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0a, 0x72, 0x65, 0x62, 0x69, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x21,
	0x0a, 0x0c, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x6c, 0x61, 0x73,
	0x73, 0x12, 0x32, 0x0a, 0x15, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74,
	0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x13, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x66, 0x61, 0x63, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6e, 0x65, 0x78, 0x74, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x3a, 0x0a, 0x0e, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x5f,
	0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x0d, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x22, 0x26, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x75, 0x62, 0x6e, 0x65,
	0x74, 0x34, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x22, 0xd4, 0x03, 0x0a, 0x14, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x34, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x5f, 0x6c, 0x69, 0x66, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0d, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x4c, 0x69, 0x66, 0x65, 0x74, 0x69, 0x6d,
	0x65, 0x12, 0x2c, 0x0a, 0x12, 0x6d, 0x61, 0x78, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x6c,
	0x69, 0x66, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x6d,
	0x61, 0x78, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x4c, 0x69, 0x66, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x12,
	0x2c, 0x0a, 0x12, 0x6d, 0x69, 0x6e, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x6c, 0x69, 0x66,
	0x65, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x6d, 0x69, 0x6e,
	0x56, 0x61, 0x6c, 0x69, 0x64, 0x4c, 0x69, 0x66, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x1d, 0x0a,
	0x0a, 0x72, 0x65, 0x6e, 0x65, 0x77, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x09, 0x72, 0x65, 0x6e, 0x65, 0x77, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b,
	0x72, 0x65, 0x62, 0x69, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0a, 0x72, 0x65, 0x62, 0x69, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x21, 0x0a,
	0x0c, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x6c, 0x61, 0x73, 0x73,
	0x12, 0x32, 0x0a, 0x15, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x13, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x65, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x66, 0x61, 0x63, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6e, 0x65, 0x78, 0x74, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x12, 0x3a, 0x0a, 0x0e, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x5f, 0x6f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x0d, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x22, 0xaa, 0x05, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x75, 0x62, 0x6e, 0x65,
	0x74, 0x36, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x75, 0x62,
	0x6e, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x75, 0x62, 0x6e, 0x65,
	0x74, 0x12, 0x25, 0x0a, 0x0e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x6c, 0x69, 0x66, 0x65, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x4c, 0x69, 0x66, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x6d, 0x61, 0x78, 0x5f,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x6c, 0x69, 0x66, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x6d, 0x61, 0x78, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x4c, 0x69,
	0x66, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x6d, 0x69, 0x6e, 0x5f, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x5f, 0x6c, 0x69, 0x66, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x10, 0x6d, 0x69, 0x6e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x4c, 0x69, 0x66, 0x65,
	0x74, 0x69, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x6e, 0x65, 0x77, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x72, 0x65, 0x6e, 0x65, 0x77, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x62, 0x69, 0x6e, 0x64, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x72, 0x65, 0x62, 0x69, 0x6e, 0x64,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x63,
	0x6c, 0x61, 0x73, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x32, 0x0a, 0x15, 0x72, 0x65, 0x6c, 0x61, 0x79,
	0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73,
	0x18, 0x09, 0x20, 0x03, 0x28, 0x09, 0x52, 0x13, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x41, 0x67, 0x65,
	0x6e, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0x37, 0x0a, 0x18, 0x72,
	0x65, 0x6c, 0x61, 0x79, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x72,
	0x65, 0x6c, 0x61, 0x79, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x66, 0x61, 0x63, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x61, 0x70, 0x69, 0x64, 0x5f, 0x63, 0x6f, 0x6d,
	0x6d, 0x69, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x72, 0x61, 0x70, 0x69, 0x64,
	0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x12, 0x2d, 0x0a, 0x12, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72,
	0x72, 0x65, 0x64, 0x5f, 0x6c, 0x69, 0x66, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x11, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x4c, 0x69, 0x66,
	0x65, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x34, 0x0a, 0x16, 0x6d, 0x69, 0x6e, 0x5f, 0x70, 0x72, 0x65,
	0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x5f, 0x6c, 0x69, 0x66, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x6d, 0x69, 0x6e, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72,
	0x72, 0x65, 0x64, 0x4c, 0x69, 0x66, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x34, 0x0a, 0x16, 0x6d,
	0x61, 0x78, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x5f, 0x6c, 0x69, 0x66,
	0x65, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x6d, 0x61, 0x78,
	0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x4c, 0x69, 0x66, 0x65, 0x74, 0x69, 0x6d,
	0x65, 0x12, 0x3a, 0x0a, 0x0e, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x5f, 0x6f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d,
	0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x26, 0x0a,
	0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x36, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x02, 0x69, 0x64, 0x22, 0xaa, 0x05, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x36, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f,
	0x6c, 0x69, 0x66, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x4c, 0x69, 0x66, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x2c, 0x0a,
	0x12, 0x6d, 0x61, 0x78, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x6c, 0x69, 0x66, 0x65, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x6d, 0x61, 0x78, 0x56, 0x61,
	0x6c, 0x69, 0x64, 0x4c, 0x69, 0x66, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x6d,
	0x69, 0x6e, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x6c, 0x69, 0x66, 0x65, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x6d, 0x69, 0x6e, 0x56, 0x61, 0x6c, 0x69,
	0x64, 0x4c, 0x69, 0x66, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x6e,
	0x65, 0x77, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x72,
	0x65, 0x6e, 0x65, 0x77, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x62, 0x69,
	0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x72,
	0x65, 0x62, 0x69, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x32, 0x0a, 0x15,
	0x72, 0x65, 0x6c, 0x61, 0x79, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x09, 0x52, 0x13, 0x72, 0x65, 0x6c,
	0x61, 0x79, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73,
	0x12, 0x37, 0x0a, 0x18, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x15, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x66, 0x61,
	0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69,
	0x66, 0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x61, 0x70, 0x69,
	0x64, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b,
	0x72, 0x61, 0x70, 0x69, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x12, 0x2d, 0x0a, 0x12, 0x70,
	0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x5f, 0x6c, 0x69, 0x66, 0x65, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72,
	0x65, 0x64, 0x4c, 0x69, 0x66, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x34, 0x0a, 0x16, 0x6d, 0x69,
	0x6e, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x5f, 0x6c, 0x69, 0x66, 0x65,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x6d, 0x69, 0x6e, 0x50,
	0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x4c, 0x69, 0x66, 0x65, 0x74, 0x69, 0x6d, 0x65,
	0x12, 0x34, 0x0a, 0x16, 0x6d, 0x61, 0x78, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65,
	0x64, 0x5f, 0x6c, 0x69, 0x66, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x14, 0x6d, 0x61, 0x78, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x4c, 0x69,
	0x66, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x3a, 0x0a, 0x0e, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74,
	0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x22, 0x77, 0x0a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x6f, 0x6c,
	0x34, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x75, 0x62, 0x6e,
	0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x73, 0x75, 0x62,
	0x6e, 0x65, 0x74, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x5f, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x62, 0x65,
	0x67, 0x69, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x6e,
	0x64, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x65, 0x6e, 0x64, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x77, 0x0a, 0x12, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x34, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x49, 0x64, 0x12, 0x23,
	0x0a, 0x0d, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x6e, 0x64, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x6e, 0x64, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x22, 0x7f, 0x0a, 0x1a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x50, 0x6f, 0x6f, 0x6c, 0x34, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x49, 0x64, 0x12,
	0x23, 0x0a, 0x0d, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x6e, 0x64, 0x5f, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x6e, 0x64, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x7f, 0x0a, 0x1a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52,
	0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x50, 0x6f, 0x6f, 0x6c, 0x34, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x49, 0x64,
	0x12, 0x23, 0x0a, 0x0d, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x6e, 0x64, 0x5f, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x6e, 0x64, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x77, 0x0a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x50, 0x6f, 0x6f, 0x6c, 0x36, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09,
	0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x08, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x62, 0x65, 0x67,
	0x69, 0x6e, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1f,
	0x0a, 0x0b, 0x65, 0x6e, 0x64, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x6e, 0x64, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22,
	0x77, 0x0a, 0x12, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x36, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74,
	0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x5f, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x62, 0x65, 0x67, 0x69, 0x6e,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x6e, 0x64, 0x5f, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x6e,
	0x64, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x7f, 0x0a, 0x1a, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x50, 0x6f, 0x6f, 0x6c, 0x36, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x73, 0x75, 0x62, 0x6e, 0x65,
	0x74, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x5f, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x62, 0x65, 0x67, 0x69,
	0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x6e, 0x64, 0x5f,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65,
	0x6e, 0x64, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x7f, 0x0a, 0x1a, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x50, 0x6f, 0x6f, 0x6c, 0x36,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x75, 0x62, 0x6e, 0x65,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x73, 0x75, 0x62, 0x6e,
	0x65, 0x74, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x5f, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x62, 0x65, 0x67,
	0x69, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x6e, 0x64,
	0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x65, 0x6e, 0x64, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x76, 0x0a, 0x19, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x34,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x75, 0x62, 0x6e, 0x65,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x73, 0x75, 0x62, 0x6e,
	0x65, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x68, 0x77, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x68, 0x77, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x22, 0x76, 0x0a, 0x19, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x65,
	0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x34, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1b, 0x0a, 0x09, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x08, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a,
	0x68, 0x77, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x68, 0x77, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x69,
	0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x69, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0xaa, 0x01, 0x0a, 0x19, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x36, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x75, 0x62, 0x6e,
	0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x73, 0x75, 0x62,
	0x6e, 0x65, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x68, 0x77, 0x5f, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x68, 0x77, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x64, 0x75, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x70, 0x5f, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b,
	0x69, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x70,
	0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x70,
	0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x22, 0x6b, 0x0a, 0x19, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x36, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x49,
	0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x68, 0x77, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x68, 0x77, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x12, 0x0a, 0x04, 0x64, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x64, 0x75, 0x69, 0x64, 0x22, 0x8e, 0x01, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50,
	0x64, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09,
	0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x08, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x72, 0x65,
	0x66, 0x69, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69,
	0x78, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x6c, 0x65, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4c, 0x65, 0x6e,
	0x12, 0x23, 0x0a, 0x0d, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x6c, 0x65,
	0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74,
	0x65, 0x64, 0x4c, 0x65, 0x6e, 0x22, 0x8e, 0x01, 0x0a, 0x13, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x50, 0x64, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a,
	0x09, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x08, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x72,
	0x65, 0x66, 0x69, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x72, 0x65, 0x66,
	0x69, 0x78, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x6c, 0x65, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4c, 0x65,
	0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x6c,
	0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61,
	0x74, 0x65, 0x64, 0x4c, 0x65, 0x6e, 0x22, 0x96, 0x01, 0x0a, 0x1b, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x50, 0x64, 0x50, 0x6f, 0x6f, 0x6c, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x73, 0x75, 0x62, 0x6e, 0x65,
	0x74, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x1d, 0x0a, 0x0a, 0x70,
	0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x6c, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x09, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4c, 0x65, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x65,
	0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x6c, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0c, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x64, 0x4c, 0x65, 0x6e, 0x22,
	0x96, 0x01, 0x0a, 0x1b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x64, 0x50, 0x64, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1b, 0x0a, 0x09, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x08, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06,
	0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x72,
	0x65, 0x66, 0x69, 0x78, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x6c,
	0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78,
	0x4c, 0x65, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x6c, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x64, 0x65, 0x6c, 0x65,
	0x67, 0x61, 0x74, 0x65, 0x64, 0x4c, 0x65, 0x6e, 0x22, 0x5b, 0x0a, 0x19, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x34, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x72, 0x65, 0x67, 0x65, 0x78, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72,
	0x65, 0x67, 0x65, 0x78, 0x70, 0x22, 0x2f, 0x0a, 0x19, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x34, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x5b, 0x0a, 0x19, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x34, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72,
	0x65, 0x67, 0x65, 0x78, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x67,
	0x65, 0x78, 0x70, 0x22, 0x5b, 0x0a, 0x19, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x36, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x65,
	0x78, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x67, 0x65, 0x78, 0x70,
	0x22, 0x2f, 0x0a, 0x19, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x43, 0x6c, 0x61, 0x73, 0x73, 0x36, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x22, 0x5b, 0x0a, 0x19, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x36, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x65, 0x78, 0x70,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x67, 0x65, 0x78, 0x70, 0x22, 0xca,
	0x01, 0x0a, 0x18, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70,
	0x72, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x66,
	0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x66, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x12, 0x1b, 0x0a,
	0x09, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x53,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f,
	0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d,
	0x61, 0x74, 0x63, 0x68, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x22, 0xa5, 0x01, 0x0a, 0x18,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x66, 0x69, 0x6e, 0x67,
	0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x66,
	0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x76, 0x65,
	0x6e, 0x64, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x76,
	0x65, 0x6e, 0x64, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x22, 0x80, 0x01, 0x0a, 0x18, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x69,
	0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x31, 0x0a, 0x03, 0x6f, 0x6c, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x69, 0x6e, 0x67,
	0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x03,
	0x6f, 0x6c, 0x64, 0x12, 0x31, 0x0a, 0x03, 0x6e, 0x65, 0x77, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46,
	0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x52, 0x03, 0x6e, 0x65, 0x77, 0x22, 0x48, 0x0a, 0x10, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x4f, 0x75, 0x69, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x75,
	0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6f, 0x75, 0x69, 0x12, 0x22, 0x0a, 0x0c,
	0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0x24, 0x0a, 0x10, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f, 0x75, 0x69, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x75, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6f, 0x75, 0x69, 0x22, 0x48, 0x0a, 0x10, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x4f, 0x75, 0x69, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x75,
	0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6f, 0x75, 0x69, 0x12, 0x22, 0x0a, 0x0c,
	0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0x2e, 0x0a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x64, 0x6d, 0x69, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x22, 0x36, 0x0a, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x64, 0x6d, 0x69, 0x74, 0x4d,
	0x61, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x68, 0x77, 0x5f,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x68,
	0x77, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x36, 0x0a, 0x15, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x41, 0x64, 0x6d, 0x69, 0x74, 0x4d, 0x61, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x68, 0x77, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x68, 0x77, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x22, 0x40, 0x0a, 0x1d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x64, 0x6d, 0x69, 0x74, 0x46,
	0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x22, 0x40, 0x0a, 0x1d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x64, 0x6d, 0x69,
	0x74, 0x46, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x22, 0x49, 0x0a, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x69,
	0x6e, 0x67, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x22,
	0x1e, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x73, 0x4c, 0x65, 0x61,
	0x73, 0x65, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22,
	0x37, 0x0a, 0x23, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x73, 0x4c, 0x65, 0x61,
	0x73, 0x65, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x57, 0x69, 0x74, 0x68, 0x49, 0x64, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x04, 0x52, 0x03, 0x69, 0x64, 0x73, 0x22, 0xf0, 0x01, 0x0a, 0x1d, 0x47, 0x65, 0x74,
	0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x73, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75,
	0x63, 0x63, 0x65, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63,
	0x63, 0x65, 0x65, 0x64, 0x12, 0x6e, 0x0a, 0x14, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x73, 0x5f,
	0x6c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x75,
	0x62, 0x6e, 0x65, 0x74, 0x73, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x73,
	0x4c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x12, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x73, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x1a, 0x45, 0x0a, 0x17, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x73, 0x4c,
	0x65, 0x61, 0x73, 0x65, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x2e, 0x0a, 0x1c, 0x47,
	0x65, 0x74, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x34, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x22, 0x7f, 0x0a, 0x1a, 0x47,
	0x65, 0x74, 0x50, 0x6f, 0x6f, 0x6c, 0x34, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x75, 0x62,
	0x6e, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x73, 0x75,
	0x62, 0x6e, 0x65, 0x74, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x5f,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x62,
	0x65, 0x67, 0x69, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x65,
	0x6e, 0x64, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x65, 0x6e, 0x64, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x7d, 0x0a, 0x20,
	0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x34, 0x4c,
	0x65, 0x61, 0x73, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1b, 0x0a, 0x09, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x08, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a,
	0x0a, 0x68, 0x77, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x68, 0x77, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1d, 0x0a, 0x0a,
	0x69, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x69, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x78, 0x0a, 0x1b, 0x47,
	0x65, 0x74, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x34, 0x4c, 0x65,
	0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x75,
	0x62, 0x6e, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x73,
	0x75, 0x62, 0x6e, 0x65, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x68, 0x77, 0x5f, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x68, 0x77, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x70, 0x5f, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x70, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x55, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x4c, 0x65, 0x61, 0x73,
	0x65, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x65, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x6c, 0x65, 0x61,
	0x73, 0x65, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0b, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x2e, 0x0a, 0x1c,
	0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x36, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x73,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x22, 0x7f, 0x0a, 0x1a,
	0x47, 0x65, 0x74, 0x50, 0x6f, 0x6f, 0x6c, 0x36, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x75,
	0x62, 0x6e, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x73,
	0x75, 0x62, 0x6e, 0x65, 0x74, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x62, 0x65, 0x67, 0x69, 0x6e,
	0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x62, 0x65, 0x67, 0x69, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1f, 0x0a, 0x0b,
	0x65, 0x6e, 0x64, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x65, 0x6e, 0x64, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0xb2, 0x01,
	0x0a, 0x21, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x36, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x49, 0x64,
	0x12, 0x1d, 0x0a, 0x0a, 0x68, 0x77, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x68, 0x77, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x12, 0x0a, 0x04, 0x64, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64,
	0x75, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x70, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78,
	0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78,
	0x65, 0x73, 0x22, 0xad, 0x01, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x36, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x49, 0x64,
	0x12, 0x1d, 0x0a, 0x0a, 0x68, 0x77, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x68, 0x77, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x12, 0x0a, 0x04, 0x64, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64,
	0x75, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x70, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78,
	0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78,
	0x65, 0x73, 0x22, 0x29, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x34,
	0x4c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x22, 0x42, 0x0a,
	0x16, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x34, 0x4c, 0x65, 0x61, 0x73, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x22, 0x5d, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x34, 0x4c,
	0x65, 0x61, 0x73, 0x65, 0x73, 0x57, 0x69, 0x74, 0x68, 0x49, 0x70, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x3b, 0x0a, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47,
	0x65, 0x74, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x34, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73,
	0x22, 0xc9, 0x01, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x34, 0x57,
	0x69, 0x74, 0x68, 0x49, 0x70, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x65, 0x64, 0x12, 0x44, 0x0a, 0x06, 0x6c, 0x65, 0x61, 0x73,
	0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x47, 0x65, 0x74, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x34, 0x57, 0x69, 0x74, 0x68, 0x49,
	0x70, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x4c, 0x65, 0x61, 0x73, 0x65,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x1a, 0x4c,
	0x0a, 0x0b, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x27, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x48, 0x43, 0x50, 0x4c, 0x65, 0x61, 0x73, 0x65,
	0x34, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x5d, 0x0a, 0x1e,
	0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x36, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x73,
	0x57, 0x69, 0x74, 0x68, 0x49, 0x70, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3b,
	0x0a, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62,
	0x6e, 0x65, 0x74, 0x36, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x52, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x22, 0xc9, 0x01, 0x0a, 0x19,
	0x47, 0x65, 0x74, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x36, 0x57, 0x69, 0x74, 0x68, 0x49, 0x70,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63,
	0x63, 0x65, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63,
	0x65, 0x65, 0x64, 0x12, 0x44, 0x0a, 0x06, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x4c,
	0x65, 0x61, 0x73, 0x65, 0x73, 0x36, 0x57, 0x69, 0x74, 0x68, 0x49, 0x70, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x06, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x1a, 0x4c, 0x0a, 0x0b, 0x4c, 0x65, 0x61,
	0x73, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x27, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x44, 0x48, 0x43, 0x50, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x36, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x29, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x53, 0x75,
	0x62, 0x6e, 0x65, 0x74, 0x36, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02,
	0x69, 0x64, 0x22, 0x42, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x36,
	0x4c, 0x65, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x7a, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x6f,
	0x6c, 0x34, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1b, 0x0a, 0x09, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x08, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d,
	0x62, 0x65, 0x67, 0x69, 0x6e, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x6e, 0x64, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x6e, 0x64, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x22, 0x7a, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x6f, 0x6c, 0x36, 0x4c, 0x65,
	0x61, 0x73, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x73,
	0x75, 0x62, 0x6e, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08,
	0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x62, 0x65, 0x67, 0x69,
	0x6e, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1f, 0x0a,
	0x0b, 0x65, 0x6e, 0x64, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x65, 0x6e, 0x64, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0xd1,
	0x03, 0x0a, 0x0a, 0x44, 0x48, 0x43, 0x50, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x34, 0x12, 0x18, 0x0a,
	0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x75, 0x62, 0x6e, 0x65,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x73, 0x75, 0x62, 0x6e,
	0x65, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x68, 0x77, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x68, 0x77, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x36, 0x0a, 0x17, 0x68, 0x77, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x5f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x68, 0x77, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x4f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x5f, 0x6c, 0x69, 0x66, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0d, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x4c, 0x69, 0x66, 0x65, 0x74, 0x69,
	0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x06, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x12, 0x32, 0x0a, 0x0b, 0x6c, 0x65,
	0x61, 0x73, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x52, 0x0a, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x66, 0x69, 0x6e, 0x67, 0x65,
	0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x66, 0x69,
	0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x76, 0x65, 0x6e,
	0x64, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x76, 0x65,
	0x6e, 0x64, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6e, 0x67, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x22, 0x59, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x34,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63,
	0x65, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65,
	0x65, 0x64, 0x12, 0x29, 0x0a, 0x06, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x48, 0x43, 0x50, 0x4c,
	0x65, 0x61, 0x73, 0x65, 0x34, 0x52, 0x06, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x22, 0x56, 0x0a,
	0x11, 0x47, 0x65, 0x74, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x34, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x65, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x65, 0x64, 0x12, 0x27, 0x0a, 0x05,
	0x6c, 0x65, 0x61, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x48, 0x43, 0x50, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x34, 0x52, 0x05,
	0x6c, 0x65, 0x61, 0x73, 0x65, 0x22, 0xb5, 0x05, 0x0a, 0x0a, 0x44, 0x48, 0x43, 0x50, 0x4c, 0x65,
	0x61, 0x73, 0x65, 0x36, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1b,
	0x0a, 0x09, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x08, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x68,
	0x77, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x68, 0x77, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x68, 0x77,
	0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x68, 0x77, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x42, 0x0a, 0x11, 0x68, 0x77, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x48, 0x77, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x0f, 0x68, 0x77, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x36, 0x0a, 0x17, 0x68, 0x77, 0x5f, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x5f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x68, 0x77, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12,
	0x0a, 0x04, 0x64, 0x75, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x75,
	0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x61, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x04, 0x69, 0x61, 0x69, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f,
	0x6c, 0x69, 0x66, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x4c, 0x69, 0x66, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x65,
	0x78, 0x70, 0x69, 0x72, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f,
	0x6c, 0x65, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x70, 0x72, 0x65, 0x66, 0x69,
	0x78, 0x4c, 0x65, 0x6e, 0x12, 0x2d, 0x0a, 0x12, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65,
	0x64, 0x5f, 0x6c, 0x69, 0x66, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x11, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x4c, 0x69, 0x66, 0x65, 0x74,
	0x69, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x32, 0x0a, 0x0b, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x4c, 0x65, 0x61, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0a, 0x6c, 0x65, 0x61, 0x73,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x66, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e,
	0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x66, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70,
	0x72, 0x69, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x49,
	0x64, 0x12, 0x29, 0x0a, 0x10, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x73,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x1f, 0x0a, 0x0b,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x22, 0x59, 0x0a,
	0x12, 0x47, 0x65, 0x74, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x36, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x65, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x65, 0x64, 0x12, 0x29, 0x0a,
	0x06, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x48, 0x43, 0x50, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x36,
	0x52, 0x06, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x22, 0x56, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x4c,
	0x65, 0x61, 0x73, 0x65, 0x36, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x73, 0x75, 0x63, 0x63, 0x65, 0x65, 0x64, 0x12, 0x27, 0x0a, 0x05, 0x6c, 0x65, 0x61, 0x73, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44,
	0x48, 0x43, 0x50, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x36, 0x52, 0x05, 0x6c, 0x65, 0x61, 0x73, 0x65,
	0x22, 0x97, 0x02, 0x0a, 0x1d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x75, 0x62, 0x6e, 0x65,
	0x74, 0x73, 0x34, 0x41, 0x6e, 0x64, 0x50, 0x6f, 0x6f, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x35, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x34, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x52, 0x07, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x73, 0x12, 0x2f, 0x0a, 0x05, 0x70, 0x6f, 0x6f,
	0x6c, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x34, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x52, 0x05, 0x70, 0x6f, 0x6f, 0x6c, 0x73, 0x12, 0x48, 0x0a, 0x0e, 0x72, 0x65,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x50, 0x6f, 0x6f, 0x6c, 0x34, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0d, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x50,
	0x6f, 0x6f, 0x6c, 0x73, 0x12, 0x44, 0x0a, 0x0c, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x34, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0c, 0x72, 0x65,
	0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x29, 0x0a, 0x15, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x73, 0x34, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x49, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x04,
	0x52, 0x03, 0x49, 0x64, 0x73, 0x22, 0x9e, 0x03, 0x0a, 0x1d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x73, 0x36, 0x41, 0x6e, 0x64, 0x50, 0x6f, 0x6f, 0x6c, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x35, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x6e, 0x65,
	0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x36, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x07, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x73, 0x12, 0x2f,
	0x0a, 0x05, 0x70, 0x6f, 0x6f, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x6f, 0x6c,
	0x36, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x05, 0x70, 0x6f, 0x6f, 0x6c, 0x73, 0x12,
	0x48, 0x0a, 0x0e, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x5f, 0x70, 0x6f, 0x6f, 0x6c,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x50, 0x6f,
	0x6f, 0x6c, 0x36, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0d, 0x72, 0x65, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x64, 0x50, 0x6f, 0x6f, 0x6c, 0x73, 0x12, 0x44, 0x0a, 0x0c, 0x72, 0x65, 0x73,
	0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x36, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x35, 0x0a, 0x08, 0x70, 0x64, 0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x50, 0x64, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x07, 0x70,
	0x64, 0x50, 0x6f, 0x6f, 0x6c, 0x73, 0x12, 0x4e, 0x0a, 0x11, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x64, 0x5f, 0x70, 0x64, 0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x50, 0x64, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0f, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x50,
	0x64, 0x50, 0x6f, 0x6f, 0x6c, 0x73, 0x22, 0x29, 0x0a, 0x15, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x73, 0x36, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x10, 0x0a, 0x03, 0x49, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x04, 0x52, 0x03, 0x49, 0x64,
	0x73, 0x22, 0x50, 0x0a, 0x1b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x68, 0x61, 0x72, 0x65,
	0x64, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x34, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x5f, 0x69,
	0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x04, 0x52, 0x09, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74,
	0x49, 0x64, 0x73, 0x22, 0x31, 0x0a, 0x1b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x68, 0x61,
	0x72, 0x65, 0x64, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x34, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x89, 0x01, 0x0a, 0x1b, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x34, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x34, 0x0a, 0x03, 0x6f, 0x6c, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x34,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x03, 0x6f, 0x6c, 0x64, 0x12, 0x34, 0x0a, 0x03,
	0x6e, 0x65, 0x77, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x4e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x34, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x03, 0x6e,
	0x65, 0x77, 0x22, 0x4c, 0x0a, 0x13, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4c, 0x65, 0x61, 0x73,
	0x65, 0x34, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x75, 0x62,
	0x6e, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x73, 0x75,
	0x62, 0x6e, 0x65, 0x74, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x22, 0x6b, 0x0a, 0x13, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x36,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x75, 0x62, 0x6e, 0x65,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x73, 0x75, 0x62, 0x6e,
	0x65, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x2f, 0x0a,
	0x13, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x65, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x65, 0x64, 0x2a, 0x35,
	0x0a, 0x0a, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x0a, 0x0a, 0x06,
	0x4e, 0x4f, 0x52, 0x4d, 0x41, 0x4c, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x44, 0x45, 0x43, 0x4c,
	0x49, 0x4e, 0x45, 0x44, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x52, 0x45, 0x43, 0x4c, 0x41, 0x49,
	0x4d, 0x45, 0x44, 0x10, 0x02, 0x2a, 0x84, 0x01, 0x0a, 0x0f, 0x48, 0x77, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b,
	0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x44, 0x55, 0x49, 0x44, 0x10, 0x02,
	0x12, 0x12, 0x0a, 0x0e, 0x49, 0x50, 0x76, 0x36, 0x5f, 0x4c, 0x49, 0x4e, 0x4b, 0x4c, 0x4f, 0x43,
	0x41, 0x4c, 0x10, 0x04, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x4c,
	0x49, 0x4e, 0x4b, 0x41, 0x44, 0x44, 0x52, 0x10, 0x08, 0x12, 0x0d, 0x0a, 0x09, 0x52, 0x45, 0x4d,
	0x4f, 0x54, 0x45, 0x5f, 0x49, 0x44, 0x10, 0x10, 0x12, 0x0f, 0x0a, 0x0b, 0x44, 0x4f, 0x43, 0x53,
	0x49, 0x53, 0x5f, 0x43, 0x4d, 0x54, 0x53, 0x10, 0x40, 0x12, 0x11, 0x0a, 0x0c, 0x44, 0x4f, 0x43,
	0x53, 0x49, 0x53, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x4d, 0x10, 0x80, 0x01, 0x32, 0xbf, 0x10, 0x0a,
	0x0b, 0x44, 0x48, 0x43, 0x50, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x12, 0x65, 0x0a, 0x16,
	0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x73, 0x34, 0x4c, 0x65, 0x61, 0x73, 0x65,
	0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x23, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47,
	0x65, 0x74, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x73, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x73, 0x4c, 0x65,
	0x61, 0x73, 0x65, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x73, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74,
	0x73, 0x34, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x57, 0x69, 0x74,
	0x68, 0x49, 0x64, 0x73, 0x12, 0x2a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74,
	0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x73, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x57, 0x69, 0x74, 0x68, 0x49, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x24, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x6e,
	0x65, 0x74, 0x73, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4f, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x53,
	0x75, 0x62, 0x6e, 0x65, 0x74, 0x34, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x12, 0x1e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x34, 0x4c,
	0x65, 0x61, 0x73, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x34, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5d, 0x0a, 0x15, 0x47, 0x65, 0x74,
	0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x34, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x23, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x75,
	0x62, 0x6e, 0x65, 0x74, 0x34, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x47, 0x65, 0x74, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4c, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x53,
	0x75, 0x62, 0x6e, 0x65, 0x74, 0x34, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x12, 0x1d, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x34, 0x4c, 0x65,
	0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x34, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x64, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62,
	0x6e, 0x65, 0x74, 0x34, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x57, 0x69, 0x74, 0x68, 0x49, 0x70,
	0x73, 0x12, 0x25, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62,
	0x6e, 0x65, 0x74, 0x34, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x57, 0x69, 0x74, 0x68, 0x49, 0x70,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x47, 0x65, 0x74, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x34, 0x57, 0x69, 0x74, 0x68, 0x49,
	0x70, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4b, 0x0a, 0x0e,
	0x47, 0x65, 0x74, 0x50, 0x6f, 0x6f, 0x6c, 0x34, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x12, 0x1c,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x6f, 0x6c, 0x34, 0x4c,
	0x65, 0x61, 0x73, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x34, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x59, 0x0a, 0x13, 0x47, 0x65, 0x74,
	0x50, 0x6f, 0x6f, 0x6c, 0x34, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x21, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x6f, 0x6c,
	0x34, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x4c,
	0x65, 0x61, 0x73, 0x65, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x65, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x65, 0x72,
	0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x34, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x27, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73,
	0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x34, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x56, 0x0a, 0x14, 0x47,
	0x65, 0x74, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x34, 0x4c, 0x65,
	0x61, 0x73, 0x65, 0x12, 0x22, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x52,
	0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x34, 0x4c, 0x65, 0x61, 0x73, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x47, 0x65, 0x74, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x34, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x48, 0x0a, 0x0c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4c, 0x65, 0x61,
	0x73, 0x65, 0x34, 0x12, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x34, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4c, 0x65,
	0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x65, 0x0a,
	0x16, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x73, 0x36, 0x4c, 0x65, 0x61, 0x73,
	0x65, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x23, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x73, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x73,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x73, 0x4c,
	0x65, 0x61, 0x73, 0x65, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x73, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x6e, 0x65,
	0x74, 0x73, 0x36, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x57, 0x69,
	0x74, 0x68, 0x49, 0x64, 0x73, 0x12, 0x2a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65,
	0x74, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x73, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x57, 0x69, 0x74, 0x68, 0x49, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x24, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62,
	0x6e, 0x65, 0x74, 0x73, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4f, 0x0a, 0x10, 0x47, 0x65, 0x74,
	0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x36, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x12, 0x1e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x36,
	0x4c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x36,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5d, 0x0a, 0x15, 0x47, 0x65,
	0x74, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x36, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x23, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x53,
	0x75, 0x62, 0x6e, 0x65, 0x74, 0x36, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x47, 0x65, 0x74, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4c, 0x0a, 0x0f, 0x47, 0x65, 0x74,
	0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x36, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x12, 0x1d, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x36, 0x4c,
	0x65, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x36, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x64, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x53, 0x75,
	0x62, 0x6e, 0x65, 0x74, 0x36, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x57, 0x69, 0x74, 0x68, 0x49,
	0x70, 0x73, 0x12, 0x25, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x75,
	0x62, 0x6e, 0x65, 0x74, 0x36, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x57, 0x69, 0x74, 0x68, 0x49,
	0x70, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x36, 0x57, 0x69, 0x74, 0x68,
	0x49, 0x70, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4b, 0x0a,
	0x0e, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x6f, 0x6c, 0x36, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x12,
	0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x6f, 0x6c, 0x36,
	0x4c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x36,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x59, 0x0a, 0x13, 0x47, 0x65,
	0x74, 0x50, 0x6f, 0x6f, 0x6c, 0x36, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x21, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x6f,
	0x6c, 0x36, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74,
	0x4c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x67, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x65,
	0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x36, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x28, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x52,
	0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x36, 0x4c, 0x65, 0x61, 0x73, 0x65,
	0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x59,
	0x0a, 0x15, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x36, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x12, 0x23, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x36, 0x4c,
	0x65, 0x61, 0x73, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x36, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x48, 0x0a, 0x0c, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x36, 0x12, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x36, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x49, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x44, 0x48, 0x43, 0x50, 0x4e, 0x6f,
	0x64, 0x65, 0x73, 0x12, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x44,
	0x48, 0x43, 0x50, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x48, 0x43, 0x50, 0x4e,
	0x6f, 0x64, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x09,
	0x5a, 0x07, 0x2e, 0x3b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_dhcp_agent_proto_rawDescOnce sync.Once
	file_dhcp_agent_proto_rawDescData = file_dhcp_agent_proto_rawDesc
)

func file_dhcp_agent_proto_rawDescGZIP() []byte {
	file_dhcp_agent_proto_rawDescOnce.Do(func() {
		file_dhcp_agent_proto_rawDescData = protoimpl.X.CompressGZIP(file_dhcp_agent_proto_rawDescData)
	})
	return file_dhcp_agent_proto_rawDescData
}

var file_dhcp_agent_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_dhcp_agent_proto_msgTypes = make([]protoimpl.MessageInfo, 84)
var file_dhcp_agent_proto_goTypes = []interface{}{
	(LeaseState)(0),                             // 0: proto.LeaseState
	(HwAddressSource)(0),                        // 1: proto.HwAddressSource
	(*GetDHCPNodesRequest)(nil),                 // 2: proto.GetDHCPNodesRequest
	(*GetDHCPNodesResponse)(nil),                // 3: proto.GetDHCPNodesResponse
	(*SubnetOption)(nil),                        // 4: proto.SubnetOption
	(*CreateSubnet4Request)(nil),                // 5: proto.CreateSubnet4Request
	(*DeleteSubnet4Request)(nil),                // 6: proto.DeleteSubnet4Request
	(*UpdateSubnet4Request)(nil),                // 7: proto.UpdateSubnet4Request
	(*CreateSubnet6Request)(nil),                // 8: proto.CreateSubnet6Request
	(*DeleteSubnet6Request)(nil),                // 9: proto.DeleteSubnet6Request
	(*UpdateSubnet6Request)(nil),                // 10: proto.UpdateSubnet6Request
	(*CreatePool4Request)(nil),                  // 11: proto.CreatePool4Request
	(*DeletePool4Request)(nil),                  // 12: proto.DeletePool4Request
	(*CreateReservedPool4Request)(nil),          // 13: proto.CreateReservedPool4Request
	(*DeleteReservedPool4Request)(nil),          // 14: proto.DeleteReservedPool4Request
	(*CreatePool6Request)(nil),                  // 15: proto.CreatePool6Request
	(*DeletePool6Request)(nil),                  // 16: proto.DeletePool6Request
	(*CreateReservedPool6Request)(nil),          // 17: proto.CreateReservedPool6Request
	(*DeleteReservedPool6Request)(nil),          // 18: proto.DeleteReservedPool6Request
	(*CreateReservation4Request)(nil),           // 19: proto.CreateReservation4Request
	(*DeleteReservation4Request)(nil),           // 20: proto.DeleteReservation4Request
	(*CreateReservation6Request)(nil),           // 21: proto.CreateReservation6Request
	(*DeleteReservation6Request)(nil),           // 22: proto.DeleteReservation6Request
	(*CreatePdPoolRequest)(nil),                 // 23: proto.CreatePdPoolRequest
	(*DeletePdPoolRequest)(nil),                 // 24: proto.DeletePdPoolRequest
	(*CreateReservedPdPoolRequest)(nil),         // 25: proto.CreateReservedPdPoolRequest
	(*DeleteReservedPdPoolRequest)(nil),         // 26: proto.DeleteReservedPdPoolRequest
	(*CreateClientClass4Request)(nil),           // 27: proto.CreateClientClass4Request
	(*DeleteClientClass4Request)(nil),           // 28: proto.DeleteClientClass4Request
	(*UpdateClientClass4Request)(nil),           // 29: proto.UpdateClientClass4Request
	(*CreateClientClass6Request)(nil),           // 30: proto.CreateClientClass6Request
	(*DeleteClientClass6Request)(nil),           // 31: proto.DeleteClientClass6Request
	(*UpdateClientClass6Request)(nil),           // 32: proto.UpdateClientClass6Request
	(*CreateFingerprintRequest)(nil),            // 33: proto.CreateFingerprintRequest
	(*DeleteFingerprintRequest)(nil),            // 34: proto.DeleteFingerprintRequest
	(*UpdateFingerprintRequest)(nil),            // 35: proto.UpdateFingerprintRequest
	(*CreateOuiRequest)(nil),                    // 36: proto.CreateOuiRequest
	(*DeleteOuiRequest)(nil),                    // 37: proto.DeleteOuiRequest
	(*UpdateOuiRequest)(nil),                    // 38: proto.UpdateOuiRequest
	(*UpdateAdmitRequest)(nil),                  // 39: proto.UpdateAdmitRequest
	(*CreateAdmitMacRequest)(nil),               // 40: proto.CreateAdmitMacRequest
	(*DeleteAdmitMacRequest)(nil),               // 41: proto.DeleteAdmitMacRequest
	(*CreateAdmitFingerprintRequest)(nil),       // 42: proto.CreateAdmitFingerprintRequest
	(*DeleteAdmitFingerprintRequest)(nil),       // 43: proto.DeleteAdmitFingerprintRequest
	(*UpdatePingerRequest)(nil),                 // 44: proto.UpdatePingerRequest
	(*GetSubnetsLeasesCountRequest)(nil),        // 45: proto.GetSubnetsLeasesCountRequest
	(*GetSubnetsLeasesCountWithIdsRequest)(nil), // 46: proto.GetSubnetsLeasesCountWithIdsRequest
	(*GetSubnetsLeasesCountResponse)(nil),       // 47: proto.GetSubnetsLeasesCountResponse
	(*GetSubnet4LeasesCountRequest)(nil),        // 48: proto.GetSubnet4LeasesCountRequest
	(*GetPool4LeasesCountRequest)(nil),          // 49: proto.GetPool4LeasesCountRequest
	(*GetReservation4LeaseCountRequest)(nil),    // 50: proto.GetReservation4LeaseCountRequest
	(*GetReservation4LeaseRequest)(nil),         // 51: proto.GetReservation4LeaseRequest
	(*GetLeasesCountResponse)(nil),              // 52: proto.GetLeasesCountResponse
	(*GetSubnet6LeasesCountRequest)(nil),        // 53: proto.GetSubnet6LeasesCountRequest
	(*GetPool6LeasesCountRequest)(nil),          // 54: proto.GetPool6LeasesCountRequest
	(*GetReservation6LeasesCountRequest)(nil),   // 55: proto.GetReservation6LeasesCountRequest
	(*GetReservation6LeasesRequest)(nil),        // 56: proto.GetReservation6LeasesRequest
	(*GetSubnet4LeasesRequest)(nil),             // 57: proto.GetSubnet4LeasesRequest
	(*GetSubnet4LeaseRequest)(nil),              // 58: proto.GetSubnet4LeaseRequest
	(*GetSubnet4LeasesWithIpsRequest)(nil),      // 59: proto.GetSubnet4LeasesWithIpsRequest
	(*GetLeases4WithIpsResponse)(nil),           // 60: proto.GetLeases4WithIpsResponse
	(*GetSubnet6LeasesWithIpsRequest)(nil),      // 61: proto.GetSubnet6LeasesWithIpsRequest
	(*GetLeases6WithIpsResponse)(nil),           // 62: proto.GetLeases6WithIpsResponse
	(*GetSubnet6LeasesRequest)(nil),             // 63: proto.GetSubnet6LeasesRequest
	(*GetSubnet6LeaseRequest)(nil),              // 64: proto.GetSubnet6LeaseRequest
	(*GetPool4LeasesRequest)(nil),               // 65: proto.GetPool4LeasesRequest
	(*GetPool6LeasesRequest)(nil),               // 66: proto.GetPool6LeasesRequest
	(*DHCPLease4)(nil),                          // 67: proto.DHCPLease4
	(*GetLeases4Response)(nil),                  // 68: proto.GetLeases4Response
	(*GetLease4Response)(nil),                   // 69: proto.GetLease4Response
	(*DHCPLease6)(nil),                          // 70: proto.DHCPLease6
	(*GetLeases6Response)(nil),                  // 71: proto.GetLeases6Response
	(*GetLease6Response)(nil),                   // 72: proto.GetLease6Response
	(*CreateSubnets4AndPoolsRequest)(nil),       // 73: proto.CreateSubnets4AndPoolsRequest
	(*DeleteSubnets4Request)(nil),               // 74: proto.DeleteSubnets4Request
	(*CreateSubnets6AndPoolsRequest)(nil),       // 75: proto.CreateSubnets6AndPoolsRequest
	(*DeleteSubnets6Request)(nil),               // 76: proto.DeleteSubnets6Request
	(*CreateSharedNetwork4Request)(nil),         // 77: proto.CreateSharedNetwork4Request
	(*DeleteSharedNetwork4Request)(nil),         // 78: proto.DeleteSharedNetwork4Request
	(*UpdateSharedNetwork4Request)(nil),         // 79: proto.UpdateSharedNetwork4Request
	(*DeleteLease4Request)(nil),                 // 80: proto.DeleteLease4Request
	(*DeleteLease6Request)(nil),                 // 81: proto.DeleteLease6Request
	(*DeleteLeaseResponse)(nil),                 // 82: proto.DeleteLeaseResponse
	nil,                                         // 83: proto.GetSubnetsLeasesCountResponse.SubnetsLeasesCountEntry
	nil,                                         // 84: proto.GetLeases4WithIpsResponse.LeasesEntry
	nil,                                         // 85: proto.GetLeases6WithIpsResponse.LeasesEntry
}
var file_dhcp_agent_proto_depIdxs = []int32{
	4,  // 0: proto.CreateSubnet4Request.subnet_options:type_name -> proto.SubnetOption
	4,  // 1: proto.UpdateSubnet4Request.subnet_options:type_name -> proto.SubnetOption
	4,  // 2: proto.CreateSubnet6Request.subnet_options:type_name -> proto.SubnetOption
	4,  // 3: proto.UpdateSubnet6Request.subnet_options:type_name -> proto.SubnetOption
	34, // 4: proto.UpdateFingerprintRequest.old:type_name -> proto.DeleteFingerprintRequest
	33, // 5: proto.UpdateFingerprintRequest.new:type_name -> proto.CreateFingerprintRequest
	83, // 6: proto.GetSubnetsLeasesCountResponse.subnets_leases_count:type_name -> proto.GetSubnetsLeasesCountResponse.SubnetsLeasesCountEntry
	58, // 7: proto.GetSubnet4LeasesWithIpsRequest.addresses:type_name -> proto.GetSubnet4LeaseRequest
	84, // 8: proto.GetLeases4WithIpsResponse.leases:type_name -> proto.GetLeases4WithIpsResponse.LeasesEntry
	64, // 9: proto.GetSubnet6LeasesWithIpsRequest.addresses:type_name -> proto.GetSubnet6LeaseRequest
	85, // 10: proto.GetLeases6WithIpsResponse.leases:type_name -> proto.GetLeases6WithIpsResponse.LeasesEntry
	0,  // 11: proto.DHCPLease4.lease_state:type_name -> proto.LeaseState
	67, // 12: proto.GetLeases4Response.leases:type_name -> proto.DHCPLease4
	67, // 13: proto.GetLease4Response.lease:type_name -> proto.DHCPLease4
	1,  // 14: proto.DHCPLease6.hw_address_source:type_name -> proto.HwAddressSource
	0,  // 15: proto.DHCPLease6.lease_state:type_name -> proto.LeaseState
	70, // 16: proto.GetLeases6Response.leases:type_name -> proto.DHCPLease6
	70, // 17: proto.GetLease6Response.lease:type_name -> proto.DHCPLease6
	5,  // 18: proto.CreateSubnets4AndPoolsRequest.subnets:type_name -> proto.CreateSubnet4Request
	11, // 19: proto.CreateSubnets4AndPoolsRequest.pools:type_name -> proto.CreatePool4Request
	13, // 20: proto.CreateSubnets4AndPoolsRequest.reserved_pools:type_name -> proto.CreateReservedPool4Request
	19, // 21: proto.CreateSubnets4AndPoolsRequest.reservations:type_name -> proto.CreateReservation4Request
	8,  // 22: proto.CreateSubnets6AndPoolsRequest.subnets:type_name -> proto.CreateSubnet6Request
	15, // 23: proto.CreateSubnets6AndPoolsRequest.pools:type_name -> proto.CreatePool6Request
	17, // 24: proto.CreateSubnets6AndPoolsRequest.reserved_pools:type_name -> proto.CreateReservedPool6Request
	21, // 25: proto.CreateSubnets6AndPoolsRequest.reservations:type_name -> proto.CreateReservation6Request
	23, // 26: proto.CreateSubnets6AndPoolsRequest.pd_pools:type_name -> proto.CreatePdPoolRequest
	25, // 27: proto.CreateSubnets6AndPoolsRequest.reserved_pd_pools:type_name -> proto.CreateReservedPdPoolRequest
	78, // 28: proto.UpdateSharedNetwork4Request.old:type_name -> proto.DeleteSharedNetwork4Request
	77, // 29: proto.UpdateSharedNetwork4Request.new:type_name -> proto.CreateSharedNetwork4Request
	67, // 30: proto.GetLeases4WithIpsResponse.LeasesEntry.value:type_name -> proto.DHCPLease4
	70, // 31: proto.GetLeases6WithIpsResponse.LeasesEntry.value:type_name -> proto.DHCPLease6
	45, // 32: proto.DHCPManager.GetSubnets4LeasesCount:input_type -> proto.GetSubnetsLeasesCountRequest
	46, // 33: proto.DHCPManager.GetSubnets4LeasesCountWithIds:input_type -> proto.GetSubnetsLeasesCountWithIdsRequest
	57, // 34: proto.DHCPManager.GetSubnet4Leases:input_type -> proto.GetSubnet4LeasesRequest
	48, // 35: proto.DHCPManager.GetSubnet4LeasesCount:input_type -> proto.GetSubnet4LeasesCountRequest
	58, // 36: proto.DHCPManager.GetSubnet4Lease:input_type -> proto.GetSubnet4LeaseRequest
	59, // 37: proto.DHCPManager.GetSubnet4LeasesWithIps:input_type -> proto.GetSubnet4LeasesWithIpsRequest
	65, // 38: proto.DHCPManager.GetPool4Leases:input_type -> proto.GetPool4LeasesRequest
	49, // 39: proto.DHCPManager.GetPool4LeasesCount:input_type -> proto.GetPool4LeasesCountRequest
	50, // 40: proto.DHCPManager.GetReservation4LeaseCount:input_type -> proto.GetReservation4LeaseCountRequest
	51, // 41: proto.DHCPManager.GetReservation4Lease:input_type -> proto.GetReservation4LeaseRequest
	80, // 42: proto.DHCPManager.DeleteLease4:input_type -> proto.DeleteLease4Request
	45, // 43: proto.DHCPManager.GetSubnets6LeasesCount:input_type -> proto.GetSubnetsLeasesCountRequest
	46, // 44: proto.DHCPManager.GetSubnets6LeasesCountWithIds:input_type -> proto.GetSubnetsLeasesCountWithIdsRequest
	63, // 45: proto.DHCPManager.GetSubnet6Leases:input_type -> proto.GetSubnet6LeasesRequest
	53, // 46: proto.DHCPManager.GetSubnet6LeasesCount:input_type -> proto.GetSubnet6LeasesCountRequest
	64, // 47: proto.DHCPManager.GetSubnet6Lease:input_type -> proto.GetSubnet6LeaseRequest
	61, // 48: proto.DHCPManager.GetSubnet6LeasesWithIps:input_type -> proto.GetSubnet6LeasesWithIpsRequest
	66, // 49: proto.DHCPManager.GetPool6Leases:input_type -> proto.GetPool6LeasesRequest
	54, // 50: proto.DHCPManager.GetPool6LeasesCount:input_type -> proto.GetPool6LeasesCountRequest
	55, // 51: proto.DHCPManager.GetReservation6LeasesCount:input_type -> proto.GetReservation6LeasesCountRequest
	56, // 52: proto.DHCPManager.GetReservation6Leases:input_type -> proto.GetReservation6LeasesRequest
	81, // 53: proto.DHCPManager.DeleteLease6:input_type -> proto.DeleteLease6Request
	2,  // 54: proto.DHCPManager.GetDHCPNodes:input_type -> proto.GetDHCPNodesRequest
	47, // 55: proto.DHCPManager.GetSubnets4LeasesCount:output_type -> proto.GetSubnetsLeasesCountResponse
	47, // 56: proto.DHCPManager.GetSubnets4LeasesCountWithIds:output_type -> proto.GetSubnetsLeasesCountResponse
	68, // 57: proto.DHCPManager.GetSubnet4Leases:output_type -> proto.GetLeases4Response
	52, // 58: proto.DHCPManager.GetSubnet4LeasesCount:output_type -> proto.GetLeasesCountResponse
	69, // 59: proto.DHCPManager.GetSubnet4Lease:output_type -> proto.GetLease4Response
	60, // 60: proto.DHCPManager.GetSubnet4LeasesWithIps:output_type -> proto.GetLeases4WithIpsResponse
	68, // 61: proto.DHCPManager.GetPool4Leases:output_type -> proto.GetLeases4Response
	52, // 62: proto.DHCPManager.GetPool4LeasesCount:output_type -> proto.GetLeasesCountResponse
	52, // 63: proto.DHCPManager.GetReservation4LeaseCount:output_type -> proto.GetLeasesCountResponse
	69, // 64: proto.DHCPManager.GetReservation4Lease:output_type -> proto.GetLease4Response
	82, // 65: proto.DHCPManager.DeleteLease4:output_type -> proto.DeleteLeaseResponse
	47, // 66: proto.DHCPManager.GetSubnets6LeasesCount:output_type -> proto.GetSubnetsLeasesCountResponse
	47, // 67: proto.DHCPManager.GetSubnets6LeasesCountWithIds:output_type -> proto.GetSubnetsLeasesCountResponse
	71, // 68: proto.DHCPManager.GetSubnet6Leases:output_type -> proto.GetLeases6Response
	52, // 69: proto.DHCPManager.GetSubnet6LeasesCount:output_type -> proto.GetLeasesCountResponse
	72, // 70: proto.DHCPManager.GetSubnet6Lease:output_type -> proto.GetLease6Response
	62, // 71: proto.DHCPManager.GetSubnet6LeasesWithIps:output_type -> proto.GetLeases6WithIpsResponse
	71, // 72: proto.DHCPManager.GetPool6Leases:output_type -> proto.GetLeases6Response
	52, // 73: proto.DHCPManager.GetPool6LeasesCount:output_type -> proto.GetLeasesCountResponse
	52, // 74: proto.DHCPManager.GetReservation6LeasesCount:output_type -> proto.GetLeasesCountResponse
	71, // 75: proto.DHCPManager.GetReservation6Leases:output_type -> proto.GetLeases6Response
	82, // 76: proto.DHCPManager.DeleteLease6:output_type -> proto.DeleteLeaseResponse
	3,  // 77: proto.DHCPManager.GetDHCPNodes:output_type -> proto.GetDHCPNodesResponse
	55, // [55:78] is the sub-list for method output_type
	32, // [32:55] is the sub-list for method input_type
	32, // [32:32] is the sub-list for extension type_name
	32, // [32:32] is the sub-list for extension extendee
	0,  // [0:32] is the sub-list for field type_name
}

func init() { file_dhcp_agent_proto_init() }
func file_dhcp_agent_proto_init() {
	if File_dhcp_agent_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_dhcp_agent_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDHCPNodesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_agent_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDHCPNodesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_agent_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubnetOption); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_agent_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateSubnet4Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_agent_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteSubnet4Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_agent_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateSubnet4Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_agent_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateSubnet6Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_agent_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteSubnet6Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_agent_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateSubnet6Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_agent_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreatePool4Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_agent_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeletePool4Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_agent_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateReservedPool4Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_agent_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteReservedPool4Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_agent_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreatePool6Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_agent_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeletePool6Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_agent_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateReservedPool6Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_agent_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteReservedPool6Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_agent_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateReservation4Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_agent_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteReservation4Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_agent_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateReservation6Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_agent_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteReservation6Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_agent_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreatePdPoolRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_agent_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeletePdPoolRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_agent_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateReservedPdPoolRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_agent_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteReservedPdPoolRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_agent_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateClientClass4Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_agent_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteClientClass4Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_agent_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateClientClass4Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_agent_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateClientClass6Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_agent_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteClientClass6Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_agent_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateClientClass6Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_agent_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateFingerprintRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_agent_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteFingerprintRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_agent_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateFingerprintRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_agent_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateOuiRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_agent_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteOuiRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_agent_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateOuiRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_agent_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateAdmitRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_agent_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateAdmitMacRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_agent_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteAdmitMacRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_agent_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateAdmitFingerprintRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_agent_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteAdmitFingerprintRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_agent_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdatePingerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_agent_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSubnetsLeasesCountRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_agent_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSubnetsLeasesCountWithIdsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_agent_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSubnetsLeasesCountResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_agent_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSubnet4LeasesCountRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_agent_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPool4LeasesCountRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_agent_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetReservation4LeaseCountRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_agent_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetReservation4LeaseRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_agent_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLeasesCountResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_agent_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSubnet6LeasesCountRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_agent_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPool6LeasesCountRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_agent_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetReservation6LeasesCountRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_agent_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetReservation6LeasesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_agent_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSubnet4LeasesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_agent_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSubnet4LeaseRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_agent_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSubnet4LeasesWithIpsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_agent_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLeases4WithIpsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_agent_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSubnet6LeasesWithIpsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_agent_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLeases6WithIpsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_agent_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSubnet6LeasesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_agent_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSubnet6LeaseRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_agent_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPool4LeasesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_agent_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPool6LeasesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_agent_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DHCPLease4); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_agent_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLeases4Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_agent_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLease4Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_agent_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DHCPLease6); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_agent_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLeases6Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_agent_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLease6Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_agent_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateSubnets4AndPoolsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_agent_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteSubnets4Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_agent_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateSubnets6AndPoolsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_agent_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteSubnets6Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_agent_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateSharedNetwork4Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_agent_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteSharedNetwork4Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_agent_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateSharedNetwork4Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_agent_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteLease4Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_agent_proto_msgTypes[79].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteLease6Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_agent_proto_msgTypes[80].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteLeaseResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_dhcp_agent_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   84,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_dhcp_agent_proto_goTypes,
		DependencyIndexes: file_dhcp_agent_proto_depIdxs,
		EnumInfos:         file_dhcp_agent_proto_enumTypes,
		MessageInfos:      file_dhcp_agent_proto_msgTypes,
	}.Build()
	File_dhcp_agent_proto = out.File
	file_dhcp_agent_proto_rawDesc = nil
	file_dhcp_agent_proto_goTypes = nil
	file_dhcp_agent_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// DHCPManagerClient is the client API for DHCPManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DHCPManagerClient interface {
	GetSubnets4LeasesCount(ctx context.Context, in *GetSubnetsLeasesCountRequest, opts ...grpc.CallOption) (*GetSubnetsLeasesCountResponse, error)
	GetSubnets4LeasesCountWithIds(ctx context.Context, in *GetSubnetsLeasesCountWithIdsRequest, opts ...grpc.CallOption) (*GetSubnetsLeasesCountResponse, error)
	GetSubnet4Leases(ctx context.Context, in *GetSubnet4LeasesRequest, opts ...grpc.CallOption) (*GetLeases4Response, error)
	GetSubnet4LeasesCount(ctx context.Context, in *GetSubnet4LeasesCountRequest, opts ...grpc.CallOption) (*GetLeasesCountResponse, error)
	GetSubnet4Lease(ctx context.Context, in *GetSubnet4LeaseRequest, opts ...grpc.CallOption) (*GetLease4Response, error)
	GetSubnet4LeasesWithIps(ctx context.Context, in *GetSubnet4LeasesWithIpsRequest, opts ...grpc.CallOption) (*GetLeases4WithIpsResponse, error)
	GetPool4Leases(ctx context.Context, in *GetPool4LeasesRequest, opts ...grpc.CallOption) (*GetLeases4Response, error)
	GetPool4LeasesCount(ctx context.Context, in *GetPool4LeasesCountRequest, opts ...grpc.CallOption) (*GetLeasesCountResponse, error)
	GetReservation4LeaseCount(ctx context.Context, in *GetReservation4LeaseCountRequest, opts ...grpc.CallOption) (*GetLeasesCountResponse, error)
	GetReservation4Lease(ctx context.Context, in *GetReservation4LeaseRequest, opts ...grpc.CallOption) (*GetLease4Response, error)
	DeleteLease4(ctx context.Context, in *DeleteLease4Request, opts ...grpc.CallOption) (*DeleteLeaseResponse, error)
	GetSubnets6LeasesCount(ctx context.Context, in *GetSubnetsLeasesCountRequest, opts ...grpc.CallOption) (*GetSubnetsLeasesCountResponse, error)
	GetSubnets6LeasesCountWithIds(ctx context.Context, in *GetSubnetsLeasesCountWithIdsRequest, opts ...grpc.CallOption) (*GetSubnetsLeasesCountResponse, error)
	GetSubnet6Leases(ctx context.Context, in *GetSubnet6LeasesRequest, opts ...grpc.CallOption) (*GetLeases6Response, error)
	GetSubnet6LeasesCount(ctx context.Context, in *GetSubnet6LeasesCountRequest, opts ...grpc.CallOption) (*GetLeasesCountResponse, error)
	GetSubnet6Lease(ctx context.Context, in *GetSubnet6LeaseRequest, opts ...grpc.CallOption) (*GetLease6Response, error)
	GetSubnet6LeasesWithIps(ctx context.Context, in *GetSubnet6LeasesWithIpsRequest, opts ...grpc.CallOption) (*GetLeases6WithIpsResponse, error)
	GetPool6Leases(ctx context.Context, in *GetPool6LeasesRequest, opts ...grpc.CallOption) (*GetLeases6Response, error)
	GetPool6LeasesCount(ctx context.Context, in *GetPool6LeasesCountRequest, opts ...grpc.CallOption) (*GetLeasesCountResponse, error)
	GetReservation6LeasesCount(ctx context.Context, in *GetReservation6LeasesCountRequest, opts ...grpc.CallOption) (*GetLeasesCountResponse, error)
	GetReservation6Leases(ctx context.Context, in *GetReservation6LeasesRequest, opts ...grpc.CallOption) (*GetLeases6Response, error)
	DeleteLease6(ctx context.Context, in *DeleteLease6Request, opts ...grpc.CallOption) (*DeleteLeaseResponse, error)
	GetDHCPNodes(ctx context.Context, in *GetDHCPNodesRequest, opts ...grpc.CallOption) (*GetDHCPNodesResponse, error)
}

type dHCPManagerClient struct {
	cc grpc.ClientConnInterface
}

func NewDHCPManagerClient(cc grpc.ClientConnInterface) DHCPManagerClient {
	return &dHCPManagerClient{cc}
}

func (c *dHCPManagerClient) GetSubnets4LeasesCount(ctx context.Context, in *GetSubnetsLeasesCountRequest, opts ...grpc.CallOption) (*GetSubnetsLeasesCountResponse, error) {
	out := new(GetSubnetsLeasesCountResponse)
	err := c.cc.Invoke(ctx, "/proto.DHCPManager/GetSubnets4LeasesCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dHCPManagerClient) GetSubnets4LeasesCountWithIds(ctx context.Context, in *GetSubnetsLeasesCountWithIdsRequest, opts ...grpc.CallOption) (*GetSubnetsLeasesCountResponse, error) {
	out := new(GetSubnetsLeasesCountResponse)
	err := c.cc.Invoke(ctx, "/proto.DHCPManager/GetSubnets4LeasesCountWithIds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dHCPManagerClient) GetSubnet4Leases(ctx context.Context, in *GetSubnet4LeasesRequest, opts ...grpc.CallOption) (*GetLeases4Response, error) {
	out := new(GetLeases4Response)
	err := c.cc.Invoke(ctx, "/proto.DHCPManager/GetSubnet4Leases", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dHCPManagerClient) GetSubnet4LeasesCount(ctx context.Context, in *GetSubnet4LeasesCountRequest, opts ...grpc.CallOption) (*GetLeasesCountResponse, error) {
	out := new(GetLeasesCountResponse)
	err := c.cc.Invoke(ctx, "/proto.DHCPManager/GetSubnet4LeasesCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dHCPManagerClient) GetSubnet4Lease(ctx context.Context, in *GetSubnet4LeaseRequest, opts ...grpc.CallOption) (*GetLease4Response, error) {
	out := new(GetLease4Response)
	err := c.cc.Invoke(ctx, "/proto.DHCPManager/GetSubnet4Lease", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dHCPManagerClient) GetSubnet4LeasesWithIps(ctx context.Context, in *GetSubnet4LeasesWithIpsRequest, opts ...grpc.CallOption) (*GetLeases4WithIpsResponse, error) {
	out := new(GetLeases4WithIpsResponse)
	err := c.cc.Invoke(ctx, "/proto.DHCPManager/GetSubnet4LeasesWithIps", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dHCPManagerClient) GetPool4Leases(ctx context.Context, in *GetPool4LeasesRequest, opts ...grpc.CallOption) (*GetLeases4Response, error) {
	out := new(GetLeases4Response)
	err := c.cc.Invoke(ctx, "/proto.DHCPManager/GetPool4Leases", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dHCPManagerClient) GetPool4LeasesCount(ctx context.Context, in *GetPool4LeasesCountRequest, opts ...grpc.CallOption) (*GetLeasesCountResponse, error) {
	out := new(GetLeasesCountResponse)
	err := c.cc.Invoke(ctx, "/proto.DHCPManager/GetPool4LeasesCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dHCPManagerClient) GetReservation4LeaseCount(ctx context.Context, in *GetReservation4LeaseCountRequest, opts ...grpc.CallOption) (*GetLeasesCountResponse, error) {
	out := new(GetLeasesCountResponse)
	err := c.cc.Invoke(ctx, "/proto.DHCPManager/GetReservation4LeaseCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dHCPManagerClient) GetReservation4Lease(ctx context.Context, in *GetReservation4LeaseRequest, opts ...grpc.CallOption) (*GetLease4Response, error) {
	out := new(GetLease4Response)
	err := c.cc.Invoke(ctx, "/proto.DHCPManager/GetReservation4Lease", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dHCPManagerClient) DeleteLease4(ctx context.Context, in *DeleteLease4Request, opts ...grpc.CallOption) (*DeleteLeaseResponse, error) {
	out := new(DeleteLeaseResponse)
	err := c.cc.Invoke(ctx, "/proto.DHCPManager/DeleteLease4", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dHCPManagerClient) GetSubnets6LeasesCount(ctx context.Context, in *GetSubnetsLeasesCountRequest, opts ...grpc.CallOption) (*GetSubnetsLeasesCountResponse, error) {
	out := new(GetSubnetsLeasesCountResponse)
	err := c.cc.Invoke(ctx, "/proto.DHCPManager/GetSubnets6LeasesCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dHCPManagerClient) GetSubnets6LeasesCountWithIds(ctx context.Context, in *GetSubnetsLeasesCountWithIdsRequest, opts ...grpc.CallOption) (*GetSubnetsLeasesCountResponse, error) {
	out := new(GetSubnetsLeasesCountResponse)
	err := c.cc.Invoke(ctx, "/proto.DHCPManager/GetSubnets6LeasesCountWithIds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dHCPManagerClient) GetSubnet6Leases(ctx context.Context, in *GetSubnet6LeasesRequest, opts ...grpc.CallOption) (*GetLeases6Response, error) {
	out := new(GetLeases6Response)
	err := c.cc.Invoke(ctx, "/proto.DHCPManager/GetSubnet6Leases", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dHCPManagerClient) GetSubnet6LeasesCount(ctx context.Context, in *GetSubnet6LeasesCountRequest, opts ...grpc.CallOption) (*GetLeasesCountResponse, error) {
	out := new(GetLeasesCountResponse)
	err := c.cc.Invoke(ctx, "/proto.DHCPManager/GetSubnet6LeasesCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dHCPManagerClient) GetSubnet6Lease(ctx context.Context, in *GetSubnet6LeaseRequest, opts ...grpc.CallOption) (*GetLease6Response, error) {
	out := new(GetLease6Response)
	err := c.cc.Invoke(ctx, "/proto.DHCPManager/GetSubnet6Lease", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dHCPManagerClient) GetSubnet6LeasesWithIps(ctx context.Context, in *GetSubnet6LeasesWithIpsRequest, opts ...grpc.CallOption) (*GetLeases6WithIpsResponse, error) {
	out := new(GetLeases6WithIpsResponse)
	err := c.cc.Invoke(ctx, "/proto.DHCPManager/GetSubnet6LeasesWithIps", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dHCPManagerClient) GetPool6Leases(ctx context.Context, in *GetPool6LeasesRequest, opts ...grpc.CallOption) (*GetLeases6Response, error) {
	out := new(GetLeases6Response)
	err := c.cc.Invoke(ctx, "/proto.DHCPManager/GetPool6Leases", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dHCPManagerClient) GetPool6LeasesCount(ctx context.Context, in *GetPool6LeasesCountRequest, opts ...grpc.CallOption) (*GetLeasesCountResponse, error) {
	out := new(GetLeasesCountResponse)
	err := c.cc.Invoke(ctx, "/proto.DHCPManager/GetPool6LeasesCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dHCPManagerClient) GetReservation6LeasesCount(ctx context.Context, in *GetReservation6LeasesCountRequest, opts ...grpc.CallOption) (*GetLeasesCountResponse, error) {
	out := new(GetLeasesCountResponse)
	err := c.cc.Invoke(ctx, "/proto.DHCPManager/GetReservation6LeasesCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dHCPManagerClient) GetReservation6Leases(ctx context.Context, in *GetReservation6LeasesRequest, opts ...grpc.CallOption) (*GetLeases6Response, error) {
	out := new(GetLeases6Response)
	err := c.cc.Invoke(ctx, "/proto.DHCPManager/GetReservation6Leases", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dHCPManagerClient) DeleteLease6(ctx context.Context, in *DeleteLease6Request, opts ...grpc.CallOption) (*DeleteLeaseResponse, error) {
	out := new(DeleteLeaseResponse)
	err := c.cc.Invoke(ctx, "/proto.DHCPManager/DeleteLease6", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dHCPManagerClient) GetDHCPNodes(ctx context.Context, in *GetDHCPNodesRequest, opts ...grpc.CallOption) (*GetDHCPNodesResponse, error) {
	out := new(GetDHCPNodesResponse)
	err := c.cc.Invoke(ctx, "/proto.DHCPManager/GetDHCPNodes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DHCPManagerServer is the server API for DHCPManager service.
type DHCPManagerServer interface {
	GetSubnets4LeasesCount(context.Context, *GetSubnetsLeasesCountRequest) (*GetSubnetsLeasesCountResponse, error)
	GetSubnets4LeasesCountWithIds(context.Context, *GetSubnetsLeasesCountWithIdsRequest) (*GetSubnetsLeasesCountResponse, error)
	GetSubnet4Leases(context.Context, *GetSubnet4LeasesRequest) (*GetLeases4Response, error)
	GetSubnet4LeasesCount(context.Context, *GetSubnet4LeasesCountRequest) (*GetLeasesCountResponse, error)
	GetSubnet4Lease(context.Context, *GetSubnet4LeaseRequest) (*GetLease4Response, error)
	GetSubnet4LeasesWithIps(context.Context, *GetSubnet4LeasesWithIpsRequest) (*GetLeases4WithIpsResponse, error)
	GetPool4Leases(context.Context, *GetPool4LeasesRequest) (*GetLeases4Response, error)
	GetPool4LeasesCount(context.Context, *GetPool4LeasesCountRequest) (*GetLeasesCountResponse, error)
	GetReservation4LeaseCount(context.Context, *GetReservation4LeaseCountRequest) (*GetLeasesCountResponse, error)
	GetReservation4Lease(context.Context, *GetReservation4LeaseRequest) (*GetLease4Response, error)
	DeleteLease4(context.Context, *DeleteLease4Request) (*DeleteLeaseResponse, error)
	GetSubnets6LeasesCount(context.Context, *GetSubnetsLeasesCountRequest) (*GetSubnetsLeasesCountResponse, error)
	GetSubnets6LeasesCountWithIds(context.Context, *GetSubnetsLeasesCountWithIdsRequest) (*GetSubnetsLeasesCountResponse, error)
	GetSubnet6Leases(context.Context, *GetSubnet6LeasesRequest) (*GetLeases6Response, error)
	GetSubnet6LeasesCount(context.Context, *GetSubnet6LeasesCountRequest) (*GetLeasesCountResponse, error)
	GetSubnet6Lease(context.Context, *GetSubnet6LeaseRequest) (*GetLease6Response, error)
	GetSubnet6LeasesWithIps(context.Context, *GetSubnet6LeasesWithIpsRequest) (*GetLeases6WithIpsResponse, error)
	GetPool6Leases(context.Context, *GetPool6LeasesRequest) (*GetLeases6Response, error)
	GetPool6LeasesCount(context.Context, *GetPool6LeasesCountRequest) (*GetLeasesCountResponse, error)
	GetReservation6LeasesCount(context.Context, *GetReservation6LeasesCountRequest) (*GetLeasesCountResponse, error)
	GetReservation6Leases(context.Context, *GetReservation6LeasesRequest) (*GetLeases6Response, error)
	DeleteLease6(context.Context, *DeleteLease6Request) (*DeleteLeaseResponse, error)
	GetDHCPNodes(context.Context, *GetDHCPNodesRequest) (*GetDHCPNodesResponse, error)
}

// UnimplementedDHCPManagerServer can be embedded to have forward compatible implementations.
type UnimplementedDHCPManagerServer struct {
}

func (*UnimplementedDHCPManagerServer) GetSubnets4LeasesCount(context.Context, *GetSubnetsLeasesCountRequest) (*GetSubnetsLeasesCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSubnets4LeasesCount not implemented")
}
func (*UnimplementedDHCPManagerServer) GetSubnets4LeasesCountWithIds(context.Context, *GetSubnetsLeasesCountWithIdsRequest) (*GetSubnetsLeasesCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSubnets4LeasesCountWithIds not implemented")
}
func (*UnimplementedDHCPManagerServer) GetSubnet4Leases(context.Context, *GetSubnet4LeasesRequest) (*GetLeases4Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSubnet4Leases not implemented")
}
func (*UnimplementedDHCPManagerServer) GetSubnet4LeasesCount(context.Context, *GetSubnet4LeasesCountRequest) (*GetLeasesCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSubnet4LeasesCount not implemented")
}
func (*UnimplementedDHCPManagerServer) GetSubnet4Lease(context.Context, *GetSubnet4LeaseRequest) (*GetLease4Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSubnet4Lease not implemented")
}
func (*UnimplementedDHCPManagerServer) GetSubnet4LeasesWithIps(context.Context, *GetSubnet4LeasesWithIpsRequest) (*GetLeases4WithIpsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSubnet4LeasesWithIps not implemented")
}
func (*UnimplementedDHCPManagerServer) GetPool4Leases(context.Context, *GetPool4LeasesRequest) (*GetLeases4Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPool4Leases not implemented")
}
func (*UnimplementedDHCPManagerServer) GetPool4LeasesCount(context.Context, *GetPool4LeasesCountRequest) (*GetLeasesCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPool4LeasesCount not implemented")
}
func (*UnimplementedDHCPManagerServer) GetReservation4LeaseCount(context.Context, *GetReservation4LeaseCountRequest) (*GetLeasesCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReservation4LeaseCount not implemented")
}
func (*UnimplementedDHCPManagerServer) GetReservation4Lease(context.Context, *GetReservation4LeaseRequest) (*GetLease4Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReservation4Lease not implemented")
}
func (*UnimplementedDHCPManagerServer) DeleteLease4(context.Context, *DeleteLease4Request) (*DeleteLeaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteLease4 not implemented")
}
func (*UnimplementedDHCPManagerServer) GetSubnets6LeasesCount(context.Context, *GetSubnetsLeasesCountRequest) (*GetSubnetsLeasesCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSubnets6LeasesCount not implemented")
}
func (*UnimplementedDHCPManagerServer) GetSubnets6LeasesCountWithIds(context.Context, *GetSubnetsLeasesCountWithIdsRequest) (*GetSubnetsLeasesCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSubnets6LeasesCountWithIds not implemented")
}
func (*UnimplementedDHCPManagerServer) GetSubnet6Leases(context.Context, *GetSubnet6LeasesRequest) (*GetLeases6Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSubnet6Leases not implemented")
}
func (*UnimplementedDHCPManagerServer) GetSubnet6LeasesCount(context.Context, *GetSubnet6LeasesCountRequest) (*GetLeasesCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSubnet6LeasesCount not implemented")
}
func (*UnimplementedDHCPManagerServer) GetSubnet6Lease(context.Context, *GetSubnet6LeaseRequest) (*GetLease6Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSubnet6Lease not implemented")
}
func (*UnimplementedDHCPManagerServer) GetSubnet6LeasesWithIps(context.Context, *GetSubnet6LeasesWithIpsRequest) (*GetLeases6WithIpsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSubnet6LeasesWithIps not implemented")
}
func (*UnimplementedDHCPManagerServer) GetPool6Leases(context.Context, *GetPool6LeasesRequest) (*GetLeases6Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPool6Leases not implemented")
}
func (*UnimplementedDHCPManagerServer) GetPool6LeasesCount(context.Context, *GetPool6LeasesCountRequest) (*GetLeasesCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPool6LeasesCount not implemented")
}
func (*UnimplementedDHCPManagerServer) GetReservation6LeasesCount(context.Context, *GetReservation6LeasesCountRequest) (*GetLeasesCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReservation6LeasesCount not implemented")
}
func (*UnimplementedDHCPManagerServer) GetReservation6Leases(context.Context, *GetReservation6LeasesRequest) (*GetLeases6Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReservation6Leases not implemented")
}
func (*UnimplementedDHCPManagerServer) DeleteLease6(context.Context, *DeleteLease6Request) (*DeleteLeaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteLease6 not implemented")
}
func (*UnimplementedDHCPManagerServer) GetDHCPNodes(context.Context, *GetDHCPNodesRequest) (*GetDHCPNodesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDHCPNodes not implemented")
}

func RegisterDHCPManagerServer(s *grpc.Server, srv DHCPManagerServer) {
	s.RegisterService(&_DHCPManager_serviceDesc, srv)
}

func _DHCPManager_GetSubnets4LeasesCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSubnetsLeasesCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DHCPManagerServer).GetSubnets4LeasesCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.DHCPManager/GetSubnets4LeasesCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DHCPManagerServer).GetSubnets4LeasesCount(ctx, req.(*GetSubnetsLeasesCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DHCPManager_GetSubnets4LeasesCountWithIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSubnetsLeasesCountWithIdsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DHCPManagerServer).GetSubnets4LeasesCountWithIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.DHCPManager/GetSubnets4LeasesCountWithIds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DHCPManagerServer).GetSubnets4LeasesCountWithIds(ctx, req.(*GetSubnetsLeasesCountWithIdsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DHCPManager_GetSubnet4Leases_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSubnet4LeasesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DHCPManagerServer).GetSubnet4Leases(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.DHCPManager/GetSubnet4Leases",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DHCPManagerServer).GetSubnet4Leases(ctx, req.(*GetSubnet4LeasesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DHCPManager_GetSubnet4LeasesCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSubnet4LeasesCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DHCPManagerServer).GetSubnet4LeasesCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.DHCPManager/GetSubnet4LeasesCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DHCPManagerServer).GetSubnet4LeasesCount(ctx, req.(*GetSubnet4LeasesCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DHCPManager_GetSubnet4Lease_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSubnet4LeaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DHCPManagerServer).GetSubnet4Lease(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.DHCPManager/GetSubnet4Lease",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DHCPManagerServer).GetSubnet4Lease(ctx, req.(*GetSubnet4LeaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DHCPManager_GetSubnet4LeasesWithIps_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSubnet4LeasesWithIpsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DHCPManagerServer).GetSubnet4LeasesWithIps(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.DHCPManager/GetSubnet4LeasesWithIps",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DHCPManagerServer).GetSubnet4LeasesWithIps(ctx, req.(*GetSubnet4LeasesWithIpsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DHCPManager_GetPool4Leases_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPool4LeasesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DHCPManagerServer).GetPool4Leases(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.DHCPManager/GetPool4Leases",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DHCPManagerServer).GetPool4Leases(ctx, req.(*GetPool4LeasesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DHCPManager_GetPool4LeasesCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPool4LeasesCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DHCPManagerServer).GetPool4LeasesCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.DHCPManager/GetPool4LeasesCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DHCPManagerServer).GetPool4LeasesCount(ctx, req.(*GetPool4LeasesCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DHCPManager_GetReservation4LeaseCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReservation4LeaseCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DHCPManagerServer).GetReservation4LeaseCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.DHCPManager/GetReservation4LeaseCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DHCPManagerServer).GetReservation4LeaseCount(ctx, req.(*GetReservation4LeaseCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DHCPManager_GetReservation4Lease_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReservation4LeaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DHCPManagerServer).GetReservation4Lease(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.DHCPManager/GetReservation4Lease",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DHCPManagerServer).GetReservation4Lease(ctx, req.(*GetReservation4LeaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DHCPManager_DeleteLease4_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteLease4Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DHCPManagerServer).DeleteLease4(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.DHCPManager/DeleteLease4",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DHCPManagerServer).DeleteLease4(ctx, req.(*DeleteLease4Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _DHCPManager_GetSubnets6LeasesCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSubnetsLeasesCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DHCPManagerServer).GetSubnets6LeasesCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.DHCPManager/GetSubnets6LeasesCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DHCPManagerServer).GetSubnets6LeasesCount(ctx, req.(*GetSubnetsLeasesCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DHCPManager_GetSubnets6LeasesCountWithIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSubnetsLeasesCountWithIdsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DHCPManagerServer).GetSubnets6LeasesCountWithIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.DHCPManager/GetSubnets6LeasesCountWithIds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DHCPManagerServer).GetSubnets6LeasesCountWithIds(ctx, req.(*GetSubnetsLeasesCountWithIdsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DHCPManager_GetSubnet6Leases_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSubnet6LeasesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DHCPManagerServer).GetSubnet6Leases(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.DHCPManager/GetSubnet6Leases",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DHCPManagerServer).GetSubnet6Leases(ctx, req.(*GetSubnet6LeasesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DHCPManager_GetSubnet6LeasesCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSubnet6LeasesCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DHCPManagerServer).GetSubnet6LeasesCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.DHCPManager/GetSubnet6LeasesCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DHCPManagerServer).GetSubnet6LeasesCount(ctx, req.(*GetSubnet6LeasesCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DHCPManager_GetSubnet6Lease_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSubnet6LeaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DHCPManagerServer).GetSubnet6Lease(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.DHCPManager/GetSubnet6Lease",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DHCPManagerServer).GetSubnet6Lease(ctx, req.(*GetSubnet6LeaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DHCPManager_GetSubnet6LeasesWithIps_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSubnet6LeasesWithIpsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DHCPManagerServer).GetSubnet6LeasesWithIps(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.DHCPManager/GetSubnet6LeasesWithIps",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DHCPManagerServer).GetSubnet6LeasesWithIps(ctx, req.(*GetSubnet6LeasesWithIpsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DHCPManager_GetPool6Leases_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPool6LeasesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DHCPManagerServer).GetPool6Leases(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.DHCPManager/GetPool6Leases",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DHCPManagerServer).GetPool6Leases(ctx, req.(*GetPool6LeasesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DHCPManager_GetPool6LeasesCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPool6LeasesCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DHCPManagerServer).GetPool6LeasesCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.DHCPManager/GetPool6LeasesCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DHCPManagerServer).GetPool6LeasesCount(ctx, req.(*GetPool6LeasesCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DHCPManager_GetReservation6LeasesCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReservation6LeasesCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DHCPManagerServer).GetReservation6LeasesCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.DHCPManager/GetReservation6LeasesCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DHCPManagerServer).GetReservation6LeasesCount(ctx, req.(*GetReservation6LeasesCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DHCPManager_GetReservation6Leases_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReservation6LeasesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DHCPManagerServer).GetReservation6Leases(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.DHCPManager/GetReservation6Leases",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DHCPManagerServer).GetReservation6Leases(ctx, req.(*GetReservation6LeasesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DHCPManager_DeleteLease6_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteLease6Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DHCPManagerServer).DeleteLease6(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.DHCPManager/DeleteLease6",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DHCPManagerServer).DeleteLease6(ctx, req.(*DeleteLease6Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _DHCPManager_GetDHCPNodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDHCPNodesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DHCPManagerServer).GetDHCPNodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.DHCPManager/GetDHCPNodes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DHCPManagerServer).GetDHCPNodes(ctx, req.(*GetDHCPNodesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _DHCPManager_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.DHCPManager",
	HandlerType: (*DHCPManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSubnets4LeasesCount",
			Handler:    _DHCPManager_GetSubnets4LeasesCount_Handler,
		},
		{
			MethodName: "GetSubnets4LeasesCountWithIds",
			Handler:    _DHCPManager_GetSubnets4LeasesCountWithIds_Handler,
		},
		{
			MethodName: "GetSubnet4Leases",
			Handler:    _DHCPManager_GetSubnet4Leases_Handler,
		},
		{
			MethodName: "GetSubnet4LeasesCount",
			Handler:    _DHCPManager_GetSubnet4LeasesCount_Handler,
		},
		{
			MethodName: "GetSubnet4Lease",
			Handler:    _DHCPManager_GetSubnet4Lease_Handler,
		},
		{
			MethodName: "GetSubnet4LeasesWithIps",
			Handler:    _DHCPManager_GetSubnet4LeasesWithIps_Handler,
		},
		{
			MethodName: "GetPool4Leases",
			Handler:    _DHCPManager_GetPool4Leases_Handler,
		},
		{
			MethodName: "GetPool4LeasesCount",
			Handler:    _DHCPManager_GetPool4LeasesCount_Handler,
		},
		{
			MethodName: "GetReservation4LeaseCount",
			Handler:    _DHCPManager_GetReservation4LeaseCount_Handler,
		},
		{
			MethodName: "GetReservation4Lease",
			Handler:    _DHCPManager_GetReservation4Lease_Handler,
		},
		{
			MethodName: "DeleteLease4",
			Handler:    _DHCPManager_DeleteLease4_Handler,
		},
		{
			MethodName: "GetSubnets6LeasesCount",
			Handler:    _DHCPManager_GetSubnets6LeasesCount_Handler,
		},
		{
			MethodName: "GetSubnets6LeasesCountWithIds",
			Handler:    _DHCPManager_GetSubnets6LeasesCountWithIds_Handler,
		},
		{
			MethodName: "GetSubnet6Leases",
			Handler:    _DHCPManager_GetSubnet6Leases_Handler,
		},
		{
			MethodName: "GetSubnet6LeasesCount",
			Handler:    _DHCPManager_GetSubnet6LeasesCount_Handler,
		},
		{
			MethodName: "GetSubnet6Lease",
			Handler:    _DHCPManager_GetSubnet6Lease_Handler,
		},
		{
			MethodName: "GetSubnet6LeasesWithIps",
			Handler:    _DHCPManager_GetSubnet6LeasesWithIps_Handler,
		},
		{
			MethodName: "GetPool6Leases",
			Handler:    _DHCPManager_GetPool6Leases_Handler,
		},
		{
			MethodName: "GetPool6LeasesCount",
			Handler:    _DHCPManager_GetPool6LeasesCount_Handler,
		},
		{
			MethodName: "GetReservation6LeasesCount",
			Handler:    _DHCPManager_GetReservation6LeasesCount_Handler,
		},
		{
			MethodName: "GetReservation6Leases",
			Handler:    _DHCPManager_GetReservation6Leases_Handler,
		},
		{
			MethodName: "DeleteLease6",
			Handler:    _DHCPManager_DeleteLease6_Handler,
		},
		{
			MethodName: "GetDHCPNodes",
			Handler:    _DHCPManager_GetDHCPNodes_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dhcp_agent.proto",
}
