// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.21.0
// 	protoc        v3.6.1
// source: dhcp.proto

package dhcp

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type GetSubnet4WithIpRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ip string `protobuf:"bytes,1,opt,name=ip,proto3" json:"ip,omitempty"`
}

func (x *GetSubnet4WithIpRequest) Reset() {
	*x = GetSubnet4WithIpRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSubnet4WithIpRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSubnet4WithIpRequest) ProtoMessage() {}

func (x *GetSubnet4WithIpRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSubnet4WithIpRequest.ProtoReflect.Descriptor instead.
func (*GetSubnet4WithIpRequest) Descriptor() ([]byte, []int) {
	return file_dhcp_proto_rawDescGZIP(), []int{0}
}

func (x *GetSubnet4WithIpRequest) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

type Subnet4 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Subnet        string   `protobuf:"bytes,1,opt,name=subnet,proto3" json:"subnet,omitempty"`
	Capacity      uint64   `protobuf:"varint,2,opt,name=capacity,proto3" json:"capacity,omitempty"`
	UsedCount     uint64   `protobuf:"varint,3,opt,name=used_count,json=usedCount,proto3" json:"used_count,omitempty"`
	DomainServers []string `protobuf:"bytes,4,rep,name=domain_servers,json=domainServers,proto3" json:"domain_servers,omitempty"`
	Routers       []string `protobuf:"bytes,5,rep,name=routers,proto3" json:"routers,omitempty"`
	SubnetId      uint64   `protobuf:"varint,6,opt,name=subnet_id,json=subnetId,proto3" json:"subnet_id,omitempty"`
	Id            string   `protobuf:"bytes,7,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *Subnet4) Reset() {
	*x = Subnet4{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Subnet4) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Subnet4) ProtoMessage() {}

func (x *Subnet4) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Subnet4.ProtoReflect.Descriptor instead.
func (*Subnet4) Descriptor() ([]byte, []int) {
	return file_dhcp_proto_rawDescGZIP(), []int{1}
}

func (x *Subnet4) GetSubnet() string {
	if x != nil {
		return x.Subnet
	}
	return ""
}

func (x *Subnet4) GetCapacity() uint64 {
	if x != nil {
		return x.Capacity
	}
	return 0
}

func (x *Subnet4) GetUsedCount() uint64 {
	if x != nil {
		return x.UsedCount
	}
	return 0
}

func (x *Subnet4) GetDomainServers() []string {
	if x != nil {
		return x.DomainServers
	}
	return nil
}

func (x *Subnet4) GetRouters() []string {
	if x != nil {
		return x.Routers
	}
	return nil
}

func (x *Subnet4) GetSubnetId() uint64 {
	if x != nil {
		return x.SubnetId
	}
	return 0
}

func (x *Subnet4) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type GetSubnet4WithIpResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Succeed bool                `protobuf:"varint,1,opt,name=succeed,proto3" json:"succeed,omitempty"`
	Subnets map[string]*Subnet4 `protobuf:"bytes,2,rep,name=subnets,proto3" json:"subnets,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *GetSubnet4WithIpResponse) Reset() {
	*x = GetSubnet4WithIpResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSubnet4WithIpResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSubnet4WithIpResponse) ProtoMessage() {}

func (x *GetSubnet4WithIpResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSubnet4WithIpResponse.ProtoReflect.Descriptor instead.
func (*GetSubnet4WithIpResponse) Descriptor() ([]byte, []int) {
	return file_dhcp_proto_rawDescGZIP(), []int{2}
}

func (x *GetSubnet4WithIpResponse) GetSucceed() bool {
	if x != nil {
		return x.Succeed
	}
	return false
}

func (x *GetSubnet4WithIpResponse) GetSubnets() map[string]*Subnet4 {
	if x != nil {
		return x.Subnets
	}
	return nil
}

type GetSubnet6WithIpRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ip string `protobuf:"bytes,1,opt,name=ip,proto3" json:"ip,omitempty"`
}

func (x *GetSubnet6WithIpRequest) Reset() {
	*x = GetSubnet6WithIpRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSubnet6WithIpRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSubnet6WithIpRequest) ProtoMessage() {}

func (x *GetSubnet6WithIpRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSubnet6WithIpRequest.ProtoReflect.Descriptor instead.
func (*GetSubnet6WithIpRequest) Descriptor() ([]byte, []int) {
	return file_dhcp_proto_rawDescGZIP(), []int{3}
}

func (x *GetSubnet6WithIpRequest) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

type Subnet6 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Subnet        string   `protobuf:"bytes,1,opt,name=subnet,proto3" json:"subnet,omitempty"`
	Capacity      string   `protobuf:"bytes,2,opt,name=capacity,proto3" json:"capacity,omitempty"`
	UsedCount     uint64   `protobuf:"varint,3,opt,name=used_count,json=usedCount,proto3" json:"used_count,omitempty"`
	DomainServers []string `protobuf:"bytes,4,rep,name=domain_servers,json=domainServers,proto3" json:"domain_servers,omitempty"`
	UseEui64      bool     `protobuf:"varint,5,opt,name=use_eui64,json=useEui64,proto3" json:"use_eui64,omitempty"`
	SubnetId      uint64   `protobuf:"varint,6,opt,name=subnet_id,json=subnetId,proto3" json:"subnet_id,omitempty"`
	Id            string   `protobuf:"bytes,7,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *Subnet6) Reset() {
	*x = Subnet6{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Subnet6) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Subnet6) ProtoMessage() {}

func (x *Subnet6) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Subnet6.ProtoReflect.Descriptor instead.
func (*Subnet6) Descriptor() ([]byte, []int) {
	return file_dhcp_proto_rawDescGZIP(), []int{4}
}

func (x *Subnet6) GetSubnet() string {
	if x != nil {
		return x.Subnet
	}
	return ""
}

func (x *Subnet6) GetCapacity() string {
	if x != nil {
		return x.Capacity
	}
	return ""
}

func (x *Subnet6) GetUsedCount() uint64 {
	if x != nil {
		return x.UsedCount
	}
	return 0
}

func (x *Subnet6) GetDomainServers() []string {
	if x != nil {
		return x.DomainServers
	}
	return nil
}

func (x *Subnet6) GetUseEui64() bool {
	if x != nil {
		return x.UseEui64
	}
	return false
}

func (x *Subnet6) GetSubnetId() uint64 {
	if x != nil {
		return x.SubnetId
	}
	return 0
}

func (x *Subnet6) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type GetSubnet6WithIpResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Succeed bool                `protobuf:"varint,1,opt,name=succeed,proto3" json:"succeed,omitempty"`
	Subnets map[string]*Subnet6 `protobuf:"bytes,2,rep,name=subnets,proto3" json:"subnets,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *GetSubnet6WithIpResponse) Reset() {
	*x = GetSubnet6WithIpResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSubnet6WithIpResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSubnet6WithIpResponse) ProtoMessage() {}

func (x *GetSubnet6WithIpResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSubnet6WithIpResponse.ProtoReflect.Descriptor instead.
func (*GetSubnet6WithIpResponse) Descriptor() ([]byte, []int) {
	return file_dhcp_proto_rawDescGZIP(), []int{5}
}

func (x *GetSubnet6WithIpResponse) GetSucceed() bool {
	if x != nil {
		return x.Succeed
	}
	return false
}

func (x *GetSubnet6WithIpResponse) GetSubnets() map[string]*Subnet6 {
	if x != nil {
		return x.Subnets
	}
	return nil
}

type GetSubnets4WithIpsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ips []string `protobuf:"bytes,1,rep,name=ips,proto3" json:"ips,omitempty"`
}

func (x *GetSubnets4WithIpsRequest) Reset() {
	*x = GetSubnets4WithIpsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSubnets4WithIpsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSubnets4WithIpsRequest) ProtoMessage() {}

func (x *GetSubnets4WithIpsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSubnets4WithIpsRequest.ProtoReflect.Descriptor instead.
func (*GetSubnets4WithIpsRequest) Descriptor() ([]byte, []int) {
	return file_dhcp_proto_rawDescGZIP(), []int{6}
}

func (x *GetSubnets4WithIpsRequest) GetIps() []string {
	if x != nil {
		return x.Ips
	}
	return nil
}

type GetSubnets4WithIpsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Succeed bool                `protobuf:"varint,1,opt,name=succeed,proto3" json:"succeed,omitempty"`
	Subnets map[string]*Subnet4 `protobuf:"bytes,2,rep,name=subnets,proto3" json:"subnets,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *GetSubnets4WithIpsResponse) Reset() {
	*x = GetSubnets4WithIpsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSubnets4WithIpsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSubnets4WithIpsResponse) ProtoMessage() {}

func (x *GetSubnets4WithIpsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSubnets4WithIpsResponse.ProtoReflect.Descriptor instead.
func (*GetSubnets4WithIpsResponse) Descriptor() ([]byte, []int) {
	return file_dhcp_proto_rawDescGZIP(), []int{7}
}

func (x *GetSubnets4WithIpsResponse) GetSucceed() bool {
	if x != nil {
		return x.Succeed
	}
	return false
}

func (x *GetSubnets4WithIpsResponse) GetSubnets() map[string]*Subnet4 {
	if x != nil {
		return x.Subnets
	}
	return nil
}

type GetSubnets6WithIpsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ips []string `protobuf:"bytes,1,rep,name=ips,proto3" json:"ips,omitempty"`
}

func (x *GetSubnets6WithIpsRequest) Reset() {
	*x = GetSubnets6WithIpsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSubnets6WithIpsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSubnets6WithIpsRequest) ProtoMessage() {}

func (x *GetSubnets6WithIpsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSubnets6WithIpsRequest.ProtoReflect.Descriptor instead.
func (*GetSubnets6WithIpsRequest) Descriptor() ([]byte, []int) {
	return file_dhcp_proto_rawDescGZIP(), []int{8}
}

func (x *GetSubnets6WithIpsRequest) GetIps() []string {
	if x != nil {
		return x.Ips
	}
	return nil
}

type GetSubnets6WithIpsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Succeed bool                `protobuf:"varint,1,opt,name=succeed,proto3" json:"succeed,omitempty"`
	Subnets map[string]*Subnet6 `protobuf:"bytes,2,rep,name=subnets,proto3" json:"subnets,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *GetSubnets6WithIpsResponse) Reset() {
	*x = GetSubnets6WithIpsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSubnets6WithIpsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSubnets6WithIpsResponse) ProtoMessage() {}

func (x *GetSubnets6WithIpsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSubnets6WithIpsResponse.ProtoReflect.Descriptor instead.
func (*GetSubnets6WithIpsResponse) Descriptor() ([]byte, []int) {
	return file_dhcp_proto_rawDescGZIP(), []int{9}
}

func (x *GetSubnets6WithIpsResponse) GetSucceed() bool {
	if x != nil {
		return x.Succeed
	}
	return false
}

func (x *GetSubnets6WithIpsResponse) GetSubnets() map[string]*Subnet6 {
	if x != nil {
		return x.Subnets
	}
	return nil
}

type GetSubnet4AndLease4WithIpRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ip string `protobuf:"bytes,1,opt,name=ip,proto3" json:"ip,omitempty"`
}

func (x *GetSubnet4AndLease4WithIpRequest) Reset() {
	*x = GetSubnet4AndLease4WithIpRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSubnet4AndLease4WithIpRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSubnet4AndLease4WithIpRequest) ProtoMessage() {}

func (x *GetSubnet4AndLease4WithIpRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSubnet4AndLease4WithIpRequest.ProtoReflect.Descriptor instead.
func (*GetSubnet4AndLease4WithIpRequest) Descriptor() ([]byte, []int) {
	return file_dhcp_proto_rawDescGZIP(), []int{10}
}

func (x *GetSubnet4AndLease4WithIpRequest) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

type Lease4 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address               string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	HwAddress             string `protobuf:"bytes,2,opt,name=hw_address,json=hwAddress,proto3" json:"hw_address,omitempty"`
	HwAddressOrganization string `protobuf:"bytes,3,opt,name=hw_address_organization,json=hwAddressOrganization,proto3" json:"hw_address_organization,omitempty"`
	ClientId              string `protobuf:"bytes,4,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	ValidLifetime         uint32 `protobuf:"varint,5,opt,name=valid_lifetime,json=validLifetime,proto3" json:"valid_lifetime,omitempty"`
	Expire                string `protobuf:"bytes,6,opt,name=expire,proto3" json:"expire,omitempty"`
	Hostname              string `protobuf:"bytes,7,opt,name=hostname,proto3" json:"hostname,omitempty"`
	VendorId              string `protobuf:"bytes,8,opt,name=vendor_id,json=vendorId,proto3" json:"vendor_id,omitempty"`
	OperatingSystem       string `protobuf:"bytes,9,opt,name=operating_system,json=operatingSystem,proto3" json:"operating_system,omitempty"`
	ClientType            string `protobuf:"bytes,10,opt,name=client_type,json=clientType,proto3" json:"client_type,omitempty"`
	LeaseState            string `protobuf:"bytes,11,opt,name=lease_state,json=leaseState,proto3" json:"lease_state,omitempty"`
	SubnetId              uint64 `protobuf:"varint,12,opt,name=subnet_id,json=subnetId,proto3" json:"subnet_id,omitempty"`
	AddressType           string `protobuf:"bytes,13,opt,name=address_type,json=addressType,proto3" json:"address_type,omitempty"`
}

func (x *Lease4) Reset() {
	*x = Lease4{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Lease4) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Lease4) ProtoMessage() {}

func (x *Lease4) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Lease4.ProtoReflect.Descriptor instead.
func (*Lease4) Descriptor() ([]byte, []int) {
	return file_dhcp_proto_rawDescGZIP(), []int{11}
}

func (x *Lease4) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *Lease4) GetHwAddress() string {
	if x != nil {
		return x.HwAddress
	}
	return ""
}

func (x *Lease4) GetHwAddressOrganization() string {
	if x != nil {
		return x.HwAddressOrganization
	}
	return ""
}

func (x *Lease4) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *Lease4) GetValidLifetime() uint32 {
	if x != nil {
		return x.ValidLifetime
	}
	return 0
}

func (x *Lease4) GetExpire() string {
	if x != nil {
		return x.Expire
	}
	return ""
}

func (x *Lease4) GetHostname() string {
	if x != nil {
		return x.Hostname
	}
	return ""
}

func (x *Lease4) GetVendorId() string {
	if x != nil {
		return x.VendorId
	}
	return ""
}

func (x *Lease4) GetOperatingSystem() string {
	if x != nil {
		return x.OperatingSystem
	}
	return ""
}

func (x *Lease4) GetClientType() string {
	if x != nil {
		return x.ClientType
	}
	return ""
}

func (x *Lease4) GetLeaseState() string {
	if x != nil {
		return x.LeaseState
	}
	return ""
}

func (x *Lease4) GetSubnetId() uint64 {
	if x != nil {
		return x.SubnetId
	}
	return 0
}

func (x *Lease4) GetAddressType() string {
	if x != nil {
		return x.AddressType
	}
	return ""
}

type Ipv4Information struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address     string   `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	AddressType string   `protobuf:"bytes,2,opt,name=address_type,json=addressType,proto3" json:"address_type,omitempty"`
	Subnet      *Subnet4 `protobuf:"bytes,3,opt,name=subnet,proto3" json:"subnet,omitempty"`
	Lease       *Lease4  `protobuf:"bytes,4,opt,name=lease,proto3" json:"lease,omitempty"`
}

func (x *Ipv4Information) Reset() {
	*x = Ipv4Information{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ipv4Information) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ipv4Information) ProtoMessage() {}

func (x *Ipv4Information) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ipv4Information.ProtoReflect.Descriptor instead.
func (*Ipv4Information) Descriptor() ([]byte, []int) {
	return file_dhcp_proto_rawDescGZIP(), []int{12}
}

func (x *Ipv4Information) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *Ipv4Information) GetAddressType() string {
	if x != nil {
		return x.AddressType
	}
	return ""
}

func (x *Ipv4Information) GetSubnet() *Subnet4 {
	if x != nil {
		return x.Subnet
	}
	return nil
}

func (x *Ipv4Information) GetLease() *Lease4 {
	if x != nil {
		return x.Lease
	}
	return nil
}

type GetSubnet4AndLease4WithIpResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Succeed          bool                        `protobuf:"varint,1,opt,name=succeed,proto3" json:"succeed,omitempty"`
	Ipv4Informations map[string]*Ipv4Information `protobuf:"bytes,2,rep,name=ipv4_informations,json=ipv4Informations,proto3" json:"ipv4_informations,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *GetSubnet4AndLease4WithIpResponse) Reset() {
	*x = GetSubnet4AndLease4WithIpResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSubnet4AndLease4WithIpResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSubnet4AndLease4WithIpResponse) ProtoMessage() {}

func (x *GetSubnet4AndLease4WithIpResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSubnet4AndLease4WithIpResponse.ProtoReflect.Descriptor instead.
func (*GetSubnet4AndLease4WithIpResponse) Descriptor() ([]byte, []int) {
	return file_dhcp_proto_rawDescGZIP(), []int{13}
}

func (x *GetSubnet4AndLease4WithIpResponse) GetSucceed() bool {
	if x != nil {
		return x.Succeed
	}
	return false
}

func (x *GetSubnet4AndLease4WithIpResponse) GetIpv4Informations() map[string]*Ipv4Information {
	if x != nil {
		return x.Ipv4Informations
	}
	return nil
}

type GetSubnet6AndLease6WithIpRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ip string `protobuf:"bytes,1,opt,name=ip,proto3" json:"ip,omitempty"`
}

func (x *GetSubnet6AndLease6WithIpRequest) Reset() {
	*x = GetSubnet6AndLease6WithIpRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSubnet6AndLease6WithIpRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSubnet6AndLease6WithIpRequest) ProtoMessage() {}

func (x *GetSubnet6AndLease6WithIpRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSubnet6AndLease6WithIpRequest.ProtoReflect.Descriptor instead.
func (*GetSubnet6AndLease6WithIpRequest) Descriptor() ([]byte, []int) {
	return file_dhcp_proto_rawDescGZIP(), []int{14}
}

func (x *GetSubnet6AndLease6WithIpRequest) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

type Lease6 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address               string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	PrefixLen             uint32 `protobuf:"varint,2,opt,name=prefix_len,json=prefixLen,proto3" json:"prefix_len,omitempty"`
	Duid                  string `protobuf:"bytes,3,opt,name=duid,proto3" json:"duid,omitempty"`
	Iaid                  uint32 `protobuf:"varint,4,opt,name=iaid,proto3" json:"iaid,omitempty"`
	PreferredLifetime     uint32 `protobuf:"varint,5,opt,name=preferred_lifetime,json=preferredLifetime,proto3" json:"preferred_lifetime,omitempty"`
	ValidLifetime         uint32 `protobuf:"varint,6,opt,name=valid_lifetime,json=validLifetime,proto3" json:"valid_lifetime,omitempty"`
	Expire                string `protobuf:"bytes,7,opt,name=expire,proto3" json:"expire,omitempty"`
	HwAddress             string `protobuf:"bytes,8,opt,name=hw_address,json=hwAddress,proto3" json:"hw_address,omitempty"`
	HwAddressType         string `protobuf:"bytes,9,opt,name=hw_address_type,json=hwAddressType,proto3" json:"hw_address_type,omitempty"`
	HwAddressSource       string `protobuf:"bytes,10,opt,name=hw_address_source,json=hwAddressSource,proto3" json:"hw_address_source,omitempty"`
	HwAddressOrganization string `protobuf:"bytes,11,opt,name=hw_address_organization,json=hwAddressOrganization,proto3" json:"hw_address_organization,omitempty"`
	LeaseType             string `protobuf:"bytes,12,opt,name=lease_type,json=leaseType,proto3" json:"lease_type,omitempty"`
	Hostname              string `protobuf:"bytes,13,opt,name=hostname,proto3" json:"hostname,omitempty"`
	VendorId              string `protobuf:"bytes,14,opt,name=vendor_id,json=vendorId,proto3" json:"vendor_id,omitempty"`
	OperatingSystem       string `protobuf:"bytes,15,opt,name=operating_system,json=operatingSystem,proto3" json:"operating_system,omitempty"`
	ClientType            string `protobuf:"bytes,16,opt,name=client_type,json=clientType,proto3" json:"client_type,omitempty"`
	LeaseState            string `protobuf:"bytes,17,opt,name=lease_state,json=leaseState,proto3" json:"lease_state,omitempty"`
	SubnetId              uint64 `protobuf:"varint,18,opt,name=subnet_id,json=subnetId,proto3" json:"subnet_id,omitempty"`
	AddressType           string `protobuf:"bytes,19,opt,name=address_type,json=addressType,proto3" json:"address_type,omitempty"`
}

func (x *Lease6) Reset() {
	*x = Lease6{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Lease6) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Lease6) ProtoMessage() {}

func (x *Lease6) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Lease6.ProtoReflect.Descriptor instead.
func (*Lease6) Descriptor() ([]byte, []int) {
	return file_dhcp_proto_rawDescGZIP(), []int{15}
}

func (x *Lease6) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *Lease6) GetPrefixLen() uint32 {
	if x != nil {
		return x.PrefixLen
	}
	return 0
}

func (x *Lease6) GetDuid() string {
	if x != nil {
		return x.Duid
	}
	return ""
}

func (x *Lease6) GetIaid() uint32 {
	if x != nil {
		return x.Iaid
	}
	return 0
}

func (x *Lease6) GetPreferredLifetime() uint32 {
	if x != nil {
		return x.PreferredLifetime
	}
	return 0
}

func (x *Lease6) GetValidLifetime() uint32 {
	if x != nil {
		return x.ValidLifetime
	}
	return 0
}

func (x *Lease6) GetExpire() string {
	if x != nil {
		return x.Expire
	}
	return ""
}

func (x *Lease6) GetHwAddress() string {
	if x != nil {
		return x.HwAddress
	}
	return ""
}

func (x *Lease6) GetHwAddressType() string {
	if x != nil {
		return x.HwAddressType
	}
	return ""
}

func (x *Lease6) GetHwAddressSource() string {
	if x != nil {
		return x.HwAddressSource
	}
	return ""
}

func (x *Lease6) GetHwAddressOrganization() string {
	if x != nil {
		return x.HwAddressOrganization
	}
	return ""
}

func (x *Lease6) GetLeaseType() string {
	if x != nil {
		return x.LeaseType
	}
	return ""
}

func (x *Lease6) GetHostname() string {
	if x != nil {
		return x.Hostname
	}
	return ""
}

func (x *Lease6) GetVendorId() string {
	if x != nil {
		return x.VendorId
	}
	return ""
}

func (x *Lease6) GetOperatingSystem() string {
	if x != nil {
		return x.OperatingSystem
	}
	return ""
}

func (x *Lease6) GetClientType() string {
	if x != nil {
		return x.ClientType
	}
	return ""
}

func (x *Lease6) GetLeaseState() string {
	if x != nil {
		return x.LeaseState
	}
	return ""
}

func (x *Lease6) GetSubnetId() uint64 {
	if x != nil {
		return x.SubnetId
	}
	return 0
}

func (x *Lease6) GetAddressType() string {
	if x != nil {
		return x.AddressType
	}
	return ""
}

type Ipv6Information struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address     string   `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	AddressType string   `protobuf:"bytes,2,opt,name=address_type,json=addressType,proto3" json:"address_type,omitempty"`
	Subnet      *Subnet6 `protobuf:"bytes,3,opt,name=subnet,proto3" json:"subnet,omitempty"`
	Lease       *Lease6  `protobuf:"bytes,4,opt,name=lease,proto3" json:"lease,omitempty"`
}

func (x *Ipv6Information) Reset() {
	*x = Ipv6Information{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ipv6Information) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ipv6Information) ProtoMessage() {}

func (x *Ipv6Information) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ipv6Information.ProtoReflect.Descriptor instead.
func (*Ipv6Information) Descriptor() ([]byte, []int) {
	return file_dhcp_proto_rawDescGZIP(), []int{16}
}

func (x *Ipv6Information) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *Ipv6Information) GetAddressType() string {
	if x != nil {
		return x.AddressType
	}
	return ""
}

func (x *Ipv6Information) GetSubnet() *Subnet6 {
	if x != nil {
		return x.Subnet
	}
	return nil
}

func (x *Ipv6Information) GetLease() *Lease6 {
	if x != nil {
		return x.Lease
	}
	return nil
}

type GetSubnet6AndLease6WithIpResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Succeed          bool                        `protobuf:"varint,1,opt,name=succeed,proto3" json:"succeed,omitempty"`
	Ipv6Informations map[string]*Ipv6Information `protobuf:"bytes,2,rep,name=ipv6_informations,json=ipv6Informations,proto3" json:"ipv6_informations,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *GetSubnet6AndLease6WithIpResponse) Reset() {
	*x = GetSubnet6AndLease6WithIpResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSubnet6AndLease6WithIpResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSubnet6AndLease6WithIpResponse) ProtoMessage() {}

func (x *GetSubnet6AndLease6WithIpResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSubnet6AndLease6WithIpResponse.ProtoReflect.Descriptor instead.
func (*GetSubnet6AndLease6WithIpResponse) Descriptor() ([]byte, []int) {
	return file_dhcp_proto_rawDescGZIP(), []int{17}
}

func (x *GetSubnet6AndLease6WithIpResponse) GetSucceed() bool {
	if x != nil {
		return x.Succeed
	}
	return false
}

func (x *GetSubnet6AndLease6WithIpResponse) GetIpv6Informations() map[string]*Ipv6Information {
	if x != nil {
		return x.Ipv6Informations
	}
	return nil
}

type GetSubnets4AndLeases4WithIpsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ips []string `protobuf:"bytes,1,rep,name=ips,proto3" json:"ips,omitempty"`
}

func (x *GetSubnets4AndLeases4WithIpsRequest) Reset() {
	*x = GetSubnets4AndLeases4WithIpsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSubnets4AndLeases4WithIpsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSubnets4AndLeases4WithIpsRequest) ProtoMessage() {}

func (x *GetSubnets4AndLeases4WithIpsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSubnets4AndLeases4WithIpsRequest.ProtoReflect.Descriptor instead.
func (*GetSubnets4AndLeases4WithIpsRequest) Descriptor() ([]byte, []int) {
	return file_dhcp_proto_rawDescGZIP(), []int{18}
}

func (x *GetSubnets4AndLeases4WithIpsRequest) GetIps() []string {
	if x != nil {
		return x.Ips
	}
	return nil
}

type GetSubnets4AndLeases4WithIpsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Succeed          bool                        `protobuf:"varint,1,opt,name=succeed,proto3" json:"succeed,omitempty"`
	Ipv4Informations map[string]*Ipv4Information `protobuf:"bytes,2,rep,name=ipv4_informations,json=ipv4Informations,proto3" json:"ipv4_informations,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *GetSubnets4AndLeases4WithIpsResponse) Reset() {
	*x = GetSubnets4AndLeases4WithIpsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSubnets4AndLeases4WithIpsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSubnets4AndLeases4WithIpsResponse) ProtoMessage() {}

func (x *GetSubnets4AndLeases4WithIpsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSubnets4AndLeases4WithIpsResponse.ProtoReflect.Descriptor instead.
func (*GetSubnets4AndLeases4WithIpsResponse) Descriptor() ([]byte, []int) {
	return file_dhcp_proto_rawDescGZIP(), []int{19}
}

func (x *GetSubnets4AndLeases4WithIpsResponse) GetSucceed() bool {
	if x != nil {
		return x.Succeed
	}
	return false
}

func (x *GetSubnets4AndLeases4WithIpsResponse) GetIpv4Informations() map[string]*Ipv4Information {
	if x != nil {
		return x.Ipv4Informations
	}
	return nil
}

type GetSubnets6AndLeases6WithIpsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ips []string `protobuf:"bytes,1,rep,name=ips,proto3" json:"ips,omitempty"`
}

func (x *GetSubnets6AndLeases6WithIpsRequest) Reset() {
	*x = GetSubnets6AndLeases6WithIpsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSubnets6AndLeases6WithIpsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSubnets6AndLeases6WithIpsRequest) ProtoMessage() {}

func (x *GetSubnets6AndLeases6WithIpsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSubnets6AndLeases6WithIpsRequest.ProtoReflect.Descriptor instead.
func (*GetSubnets6AndLeases6WithIpsRequest) Descriptor() ([]byte, []int) {
	return file_dhcp_proto_rawDescGZIP(), []int{20}
}

func (x *GetSubnets6AndLeases6WithIpsRequest) GetIps() []string {
	if x != nil {
		return x.Ips
	}
	return nil
}

type GetSubnets6AndLeases6WithIpsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Succeed          bool                        `protobuf:"varint,1,opt,name=succeed,proto3" json:"succeed,omitempty"`
	Ipv6Informations map[string]*Ipv6Information `protobuf:"bytes,2,rep,name=ipv6_informations,json=ipv6Informations,proto3" json:"ipv6_informations,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *GetSubnets6AndLeases6WithIpsResponse) Reset() {
	*x = GetSubnets6AndLeases6WithIpsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSubnets6AndLeases6WithIpsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSubnets6AndLeases6WithIpsResponse) ProtoMessage() {}

func (x *GetSubnets6AndLeases6WithIpsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSubnets6AndLeases6WithIpsResponse.ProtoReflect.Descriptor instead.
func (*GetSubnets6AndLeases6WithIpsResponse) Descriptor() ([]byte, []int) {
	return file_dhcp_proto_rawDescGZIP(), []int{21}
}

func (x *GetSubnets6AndLeases6WithIpsResponse) GetSucceed() bool {
	if x != nil {
		return x.Succeed
	}
	return false
}

func (x *GetSubnets6AndLeases6WithIpsResponse) GetIpv6Informations() map[string]*Ipv6Information {
	if x != nil {
		return x.Ipv6Informations
	}
	return nil
}

type GetSubnetsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Prefixes []string `protobuf:"bytes,1,rep,name=prefixes,proto3" json:"prefixes,omitempty"`
}

func (x *GetSubnetsRequest) Reset() {
	*x = GetSubnetsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSubnetsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSubnetsRequest) ProtoMessage() {}

func (x *GetSubnetsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSubnetsRequest.ProtoReflect.Descriptor instead.
func (*GetSubnetsRequest) Descriptor() ([]byte, []int) {
	return file_dhcp_proto_rawDescGZIP(), []int{22}
}

func (x *GetSubnetsRequest) GetPrefixes() []string {
	if x != nil {
		return x.Prefixes
	}
	return nil
}

type GetSubnet4SResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Subnet4S []*Subnet4 `protobuf:"bytes,1,rep,name=subnet4s,proto3" json:"subnet4s,omitempty"`
}

func (x *GetSubnet4SResponse) Reset() {
	*x = GetSubnet4SResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSubnet4SResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSubnet4SResponse) ProtoMessage() {}

func (x *GetSubnet4SResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSubnet4SResponse.ProtoReflect.Descriptor instead.
func (*GetSubnet4SResponse) Descriptor() ([]byte, []int) {
	return file_dhcp_proto_rawDescGZIP(), []int{23}
}

func (x *GetSubnet4SResponse) GetSubnet4S() []*Subnet4 {
	if x != nil {
		return x.Subnet4S
	}
	return nil
}

type GetSubnetPoolsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Subnet string `protobuf:"bytes,1,opt,name=subnet,proto3" json:"subnet,omitempty"`
}

func (x *GetSubnetPoolsRequest) Reset() {
	*x = GetSubnetPoolsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSubnetPoolsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSubnetPoolsRequest) ProtoMessage() {}

func (x *GetSubnetPoolsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSubnetPoolsRequest.ProtoReflect.Descriptor instead.
func (*GetSubnetPoolsRequest) Descriptor() ([]byte, []int) {
	return file_dhcp_proto_rawDescGZIP(), []int{24}
}

func (x *GetSubnetPoolsRequest) GetSubnet() string {
	if x != nil {
		return x.Subnet
	}
	return ""
}

type GetPool4SResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pools []*Pool4 `protobuf:"bytes,1,rep,name=pools,proto3" json:"pools,omitempty"`
}

func (x *GetPool4SResponse) Reset() {
	*x = GetPool4SResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPool4SResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPool4SResponse) ProtoMessage() {}

func (x *GetPool4SResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPool4SResponse.ProtoReflect.Descriptor instead.
func (*GetPool4SResponse) Descriptor() ([]byte, []int) {
	return file_dhcp_proto_rawDescGZIP(), []int{25}
}

func (x *GetPool4SResponse) GetPools() []*Pool4 {
	if x != nil {
		return x.Pools
	}
	return nil
}

type GetReservedPool4SResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pools []*ReservedPool4 `protobuf:"bytes,1,rep,name=pools,proto3" json:"pools,omitempty"`
}

func (x *GetReservedPool4SResponse) Reset() {
	*x = GetReservedPool4SResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetReservedPool4SResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetReservedPool4SResponse) ProtoMessage() {}

func (x *GetReservedPool4SResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetReservedPool4SResponse.ProtoReflect.Descriptor instead.
func (*GetReservedPool4SResponse) Descriptor() ([]byte, []int) {
	return file_dhcp_proto_rawDescGZIP(), []int{26}
}

func (x *GetReservedPool4SResponse) GetPools() []*ReservedPool4 {
	if x != nil {
		return x.Pools
	}
	return nil
}

type GetReservationPool4SResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pools []*Reservation4 `protobuf:"bytes,1,rep,name=pools,proto3" json:"pools,omitempty"`
}

func (x *GetReservationPool4SResponse) Reset() {
	*x = GetReservationPool4SResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetReservationPool4SResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetReservationPool4SResponse) ProtoMessage() {}

func (x *GetReservationPool4SResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetReservationPool4SResponse.ProtoReflect.Descriptor instead.
func (*GetReservationPool4SResponse) Descriptor() ([]byte, []int) {
	return file_dhcp_proto_rawDescGZIP(), []int{27}
}

func (x *GetReservationPool4SResponse) GetPools() []*Reservation4 {
	if x != nil {
		return x.Pools
	}
	return nil
}

type Pool4 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BeginAddress string `protobuf:"bytes,1,opt,name=begin_address,json=beginAddress,proto3" json:"begin_address,omitempty"`
	EndAddress   string `protobuf:"bytes,2,opt,name=end_address,json=endAddress,proto3" json:"end_address,omitempty"`
	Capacity     uint64 `protobuf:"varint,3,opt,name=capacity,proto3" json:"capacity,omitempty"`
	UsedCount    uint64 `protobuf:"varint,4,opt,name=usedCount,proto3" json:"usedCount,omitempty"`
	Comment      string `protobuf:"bytes,5,opt,name=comment,proto3" json:"comment,omitempty"`
}

func (x *Pool4) Reset() {
	*x = Pool4{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Pool4) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Pool4) ProtoMessage() {}

func (x *Pool4) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Pool4.ProtoReflect.Descriptor instead.
func (*Pool4) Descriptor() ([]byte, []int) {
	return file_dhcp_proto_rawDescGZIP(), []int{28}
}

func (x *Pool4) GetBeginAddress() string {
	if x != nil {
		return x.BeginAddress
	}
	return ""
}

func (x *Pool4) GetEndAddress() string {
	if x != nil {
		return x.EndAddress
	}
	return ""
}

func (x *Pool4) GetCapacity() uint64 {
	if x != nil {
		return x.Capacity
	}
	return 0
}

func (x *Pool4) GetUsedCount() uint64 {
	if x != nil {
		return x.UsedCount
	}
	return 0
}

func (x *Pool4) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

type ReservedPool4 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BeginAddress string `protobuf:"bytes,1,opt,name=begin_address,json=beginAddress,proto3" json:"begin_address,omitempty"`
	EndAddress   string `protobuf:"bytes,2,opt,name=end_address,json=endAddress,proto3" json:"end_address,omitempty"`
	Capacity     uint64 `protobuf:"varint,3,opt,name=capacity,proto3" json:"capacity,omitempty"`
	UsedCount    uint64 `protobuf:"varint,4,opt,name=usedCount,proto3" json:"usedCount,omitempty"`
	Comment      string `protobuf:"bytes,5,opt,name=comment,proto3" json:"comment,omitempty"`
}

func (x *ReservedPool4) Reset() {
	*x = ReservedPool4{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReservedPool4) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReservedPool4) ProtoMessage() {}

func (x *ReservedPool4) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReservedPool4.ProtoReflect.Descriptor instead.
func (*ReservedPool4) Descriptor() ([]byte, []int) {
	return file_dhcp_proto_rawDescGZIP(), []int{29}
}

func (x *ReservedPool4) GetBeginAddress() string {
	if x != nil {
		return x.BeginAddress
	}
	return ""
}

func (x *ReservedPool4) GetEndAddress() string {
	if x != nil {
		return x.EndAddress
	}
	return ""
}

func (x *ReservedPool4) GetCapacity() uint64 {
	if x != nil {
		return x.Capacity
	}
	return 0
}

func (x *ReservedPool4) GetUsedCount() uint64 {
	if x != nil {
		return x.UsedCount
	}
	return 0
}

func (x *ReservedPool4) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

type Reservation4 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HwAddress string `protobuf:"bytes,1,opt,name=hw_address,json=hwAddress,proto3" json:"hw_address,omitempty"`
	IpAddress string `protobuf:"bytes,2,opt,name=ip_address,json=ipAddress,proto3" json:"ip_address,omitempty"`
	Capacity  uint64 `protobuf:"varint,3,opt,name=capacity,proto3" json:"capacity,omitempty"`
	UsedCount uint64 `protobuf:"varint,4,opt,name=usedCount,proto3" json:"usedCount,omitempty"`
	Comment   string `protobuf:"bytes,5,opt,name=comment,proto3" json:"comment,omitempty"`
}

func (x *Reservation4) Reset() {
	*x = Reservation4{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Reservation4) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Reservation4) ProtoMessage() {}

func (x *Reservation4) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Reservation4.ProtoReflect.Descriptor instead.
func (*Reservation4) Descriptor() ([]byte, []int) {
	return file_dhcp_proto_rawDescGZIP(), []int{30}
}

func (x *Reservation4) GetHwAddress() string {
	if x != nil {
		return x.HwAddress
	}
	return ""
}

func (x *Reservation4) GetIpAddress() string {
	if x != nil {
		return x.IpAddress
	}
	return ""
}

func (x *Reservation4) GetCapacity() uint64 {
	if x != nil {
		return x.Capacity
	}
	return 0
}

func (x *Reservation4) GetUsedCount() uint64 {
	if x != nil {
		return x.UsedCount
	}
	return 0
}

func (x *Reservation4) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

type GetLeasesBySubnetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Subnet string `protobuf:"bytes,1,opt,name=subnet,proto3" json:"subnet,omitempty"`
}

func (x *GetLeasesBySubnetRequest) Reset() {
	*x = GetLeasesBySubnetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLeasesBySubnetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLeasesBySubnetRequest) ProtoMessage() {}

func (x *GetLeasesBySubnetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLeasesBySubnetRequest.ProtoReflect.Descriptor instead.
func (*GetLeasesBySubnetRequest) Descriptor() ([]byte, []int) {
	return file_dhcp_proto_rawDescGZIP(), []int{31}
}

func (x *GetLeasesBySubnetRequest) GetSubnet() string {
	if x != nil {
		return x.Subnet
	}
	return ""
}

type GetLeaseByIpRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ip string `protobuf:"bytes,1,opt,name=ip,proto3" json:"ip,omitempty"`
}

func (x *GetLeaseByIpRequest) Reset() {
	*x = GetLeaseByIpRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLeaseByIpRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLeaseByIpRequest) ProtoMessage() {}

func (x *GetLeaseByIpRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLeaseByIpRequest.ProtoReflect.Descriptor instead.
func (*GetLeaseByIpRequest) Descriptor() ([]byte, []int) {
	return file_dhcp_proto_rawDescGZIP(), []int{32}
}

func (x *GetLeaseByIpRequest) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

type GetLease4ByIpResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool    `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Lease4  *Lease4 `protobuf:"bytes,2,opt,name=lease4,proto3" json:"lease4,omitempty"`
}

func (x *GetLease4ByIpResponse) Reset() {
	*x = GetLease4ByIpResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLease4ByIpResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLease4ByIpResponse) ProtoMessage() {}

func (x *GetLease4ByIpResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLease4ByIpResponse.ProtoReflect.Descriptor instead.
func (*GetLease4ByIpResponse) Descriptor() ([]byte, []int) {
	return file_dhcp_proto_rawDescGZIP(), []int{33}
}

func (x *GetLease4ByIpResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *GetLease4ByIpResponse) GetLease4() *Lease4 {
	if x != nil {
		return x.Lease4
	}
	return nil
}

type GetLease4SBySubnetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Lease4S []*Lease4 `protobuf:"bytes,1,rep,name=lease4s,proto3" json:"lease4s,omitempty"`
}

func (x *GetLease4SBySubnetResponse) Reset() {
	*x = GetLease4SBySubnetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLease4SBySubnetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLease4SBySubnetResponse) ProtoMessage() {}

func (x *GetLease4SBySubnetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLease4SBySubnetResponse.ProtoReflect.Descriptor instead.
func (*GetLease4SBySubnetResponse) Descriptor() ([]byte, []int) {
	return file_dhcp_proto_rawDescGZIP(), []int{34}
}

func (x *GetLease4SBySubnetResponse) GetLease4S() []*Lease4 {
	if x != nil {
		return x.Lease4S
	}
	return nil
}

type GetSubnet6SResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Subnet6S []*Subnet6 `protobuf:"bytes,1,rep,name=subnet6s,proto3" json:"subnet6s,omitempty"`
}

func (x *GetSubnet6SResponse) Reset() {
	*x = GetSubnet6SResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSubnet6SResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSubnet6SResponse) ProtoMessage() {}

func (x *GetSubnet6SResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSubnet6SResponse.ProtoReflect.Descriptor instead.
func (*GetSubnet6SResponse) Descriptor() ([]byte, []int) {
	return file_dhcp_proto_rawDescGZIP(), []int{35}
}

func (x *GetSubnet6SResponse) GetSubnet6S() []*Subnet6 {
	if x != nil {
		return x.Subnet6S
	}
	return nil
}

type GetPool6SResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pools []*Pool6 `protobuf:"bytes,1,rep,name=pools,proto3" json:"pools,omitempty"`
}

func (x *GetPool6SResponse) Reset() {
	*x = GetPool6SResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPool6SResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPool6SResponse) ProtoMessage() {}

func (x *GetPool6SResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPool6SResponse.ProtoReflect.Descriptor instead.
func (*GetPool6SResponse) Descriptor() ([]byte, []int) {
	return file_dhcp_proto_rawDescGZIP(), []int{36}
}

func (x *GetPool6SResponse) GetPools() []*Pool6 {
	if x != nil {
		return x.Pools
	}
	return nil
}

type GetReservedPool6SResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pools []*ReservedPool6 `protobuf:"bytes,1,rep,name=pools,proto3" json:"pools,omitempty"`
}

func (x *GetReservedPool6SResponse) Reset() {
	*x = GetReservedPool6SResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetReservedPool6SResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetReservedPool6SResponse) ProtoMessage() {}

func (x *GetReservedPool6SResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetReservedPool6SResponse.ProtoReflect.Descriptor instead.
func (*GetReservedPool6SResponse) Descriptor() ([]byte, []int) {
	return file_dhcp_proto_rawDescGZIP(), []int{37}
}

func (x *GetReservedPool6SResponse) GetPools() []*ReservedPool6 {
	if x != nil {
		return x.Pools
	}
	return nil
}

type GetReservationPool6SResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pools []*Reservation6 `protobuf:"bytes,1,rep,name=pools,proto3" json:"pools,omitempty"`
}

func (x *GetReservationPool6SResponse) Reset() {
	*x = GetReservationPool6SResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetReservationPool6SResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetReservationPool6SResponse) ProtoMessage() {}

func (x *GetReservationPool6SResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetReservationPool6SResponse.ProtoReflect.Descriptor instead.
func (*GetReservationPool6SResponse) Descriptor() ([]byte, []int) {
	return file_dhcp_proto_rawDescGZIP(), []int{38}
}

func (x *GetReservationPool6SResponse) GetPools() []*Reservation6 {
	if x != nil {
		return x.Pools
	}
	return nil
}

type GetLease6ByIpResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool    `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Lease6  *Lease6 `protobuf:"bytes,2,opt,name=lease6,proto3" json:"lease6,omitempty"`
}

func (x *GetLease6ByIpResponse) Reset() {
	*x = GetLease6ByIpResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLease6ByIpResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLease6ByIpResponse) ProtoMessage() {}

func (x *GetLease6ByIpResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLease6ByIpResponse.ProtoReflect.Descriptor instead.
func (*GetLease6ByIpResponse) Descriptor() ([]byte, []int) {
	return file_dhcp_proto_rawDescGZIP(), []int{39}
}

func (x *GetLease6ByIpResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *GetLease6ByIpResponse) GetLease6() *Lease6 {
	if x != nil {
		return x.Lease6
	}
	return nil
}

type GetLease6SBySubnetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Lease6S []*Lease6 `protobuf:"bytes,1,rep,name=lease6s,proto3" json:"lease6s,omitempty"`
}

func (x *GetLease6SBySubnetResponse) Reset() {
	*x = GetLease6SBySubnetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLease6SBySubnetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLease6SBySubnetResponse) ProtoMessage() {}

func (x *GetLease6SBySubnetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLease6SBySubnetResponse.ProtoReflect.Descriptor instead.
func (*GetLease6SBySubnetResponse) Descriptor() ([]byte, []int) {
	return file_dhcp_proto_rawDescGZIP(), []int{40}
}

func (x *GetLease6SBySubnetResponse) GetLease6S() []*Lease6 {
	if x != nil {
		return x.Lease6S
	}
	return nil
}

type GetPdPoolsBySubnetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PdPool6S []*PdPool6 `protobuf:"bytes,1,rep,name=pd_pool6s,json=pdPool6s,proto3" json:"pd_pool6s,omitempty"`
}

func (x *GetPdPoolsBySubnetResponse) Reset() {
	*x = GetPdPoolsBySubnetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPdPoolsBySubnetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPdPoolsBySubnetResponse) ProtoMessage() {}

func (x *GetPdPoolsBySubnetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPdPoolsBySubnetResponse.ProtoReflect.Descriptor instead.
func (*GetPdPoolsBySubnetResponse) Descriptor() ([]byte, []int) {
	return file_dhcp_proto_rawDescGZIP(), []int{41}
}

func (x *GetPdPoolsBySubnetResponse) GetPdPool6S() []*PdPool6 {
	if x != nil {
		return x.PdPool6S
	}
	return nil
}

type Pool6 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BeginAddress string `protobuf:"bytes,1,opt,name=begin_address,json=beginAddress,proto3" json:"begin_address,omitempty"`
	EndAddress   string `protobuf:"bytes,2,opt,name=end_address,json=endAddress,proto3" json:"end_address,omitempty"`
	Capacity     string `protobuf:"bytes,3,opt,name=capacity,proto3" json:"capacity,omitempty"`
	UsedCount    uint64 `protobuf:"varint,4,opt,name=usedCount,proto3" json:"usedCount,omitempty"`
	Comment      string `protobuf:"bytes,5,opt,name=comment,proto3" json:"comment,omitempty"`
}

func (x *Pool6) Reset() {
	*x = Pool6{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Pool6) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Pool6) ProtoMessage() {}

func (x *Pool6) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Pool6.ProtoReflect.Descriptor instead.
func (*Pool6) Descriptor() ([]byte, []int) {
	return file_dhcp_proto_rawDescGZIP(), []int{42}
}

func (x *Pool6) GetBeginAddress() string {
	if x != nil {
		return x.BeginAddress
	}
	return ""
}

func (x *Pool6) GetEndAddress() string {
	if x != nil {
		return x.EndAddress
	}
	return ""
}

func (x *Pool6) GetCapacity() string {
	if x != nil {
		return x.Capacity
	}
	return ""
}

func (x *Pool6) GetUsedCount() uint64 {
	if x != nil {
		return x.UsedCount
	}
	return 0
}

func (x *Pool6) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

type ReservedPool6 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BeginAddress string `protobuf:"bytes,1,opt,name=begin_address,json=beginAddress,proto3" json:"begin_address,omitempty"`
	EndAddress   string `protobuf:"bytes,2,opt,name=end_address,json=endAddress,proto3" json:"end_address,omitempty"`
	Capacity     string `protobuf:"bytes,3,opt,name=capacity,proto3" json:"capacity,omitempty"`
	UsedCount    uint64 `protobuf:"varint,4,opt,name=usedCount,proto3" json:"usedCount,omitempty"`
	Comment      string `protobuf:"bytes,5,opt,name=comment,proto3" json:"comment,omitempty"`
}

func (x *ReservedPool6) Reset() {
	*x = ReservedPool6{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReservedPool6) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReservedPool6) ProtoMessage() {}

func (x *ReservedPool6) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReservedPool6.ProtoReflect.Descriptor instead.
func (*ReservedPool6) Descriptor() ([]byte, []int) {
	return file_dhcp_proto_rawDescGZIP(), []int{43}
}

func (x *ReservedPool6) GetBeginAddress() string {
	if x != nil {
		return x.BeginAddress
	}
	return ""
}

func (x *ReservedPool6) GetEndAddress() string {
	if x != nil {
		return x.EndAddress
	}
	return ""
}

func (x *ReservedPool6) GetCapacity() string {
	if x != nil {
		return x.Capacity
	}
	return ""
}

func (x *ReservedPool6) GetUsedCount() uint64 {
	if x != nil {
		return x.UsedCount
	}
	return 0
}

func (x *ReservedPool6) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

type Reservation6 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Duid        string   `protobuf:"bytes,1,opt,name=duid,proto3" json:"duid,omitempty"`
	HwAddress   string   `protobuf:"bytes,2,opt,name=hw_address,json=hwAddress,proto3" json:"hw_address,omitempty"`
	IpAddresses []string `protobuf:"bytes,3,rep,name=ip_addresses,json=ipAddresses,proto3" json:"ip_addresses,omitempty"`
	Capacity    string   `protobuf:"bytes,4,opt,name=capacity,proto3" json:"capacity,omitempty"`
	UsedCount   uint64   `protobuf:"varint,5,opt,name=usedCount,proto3" json:"usedCount,omitempty"`
	Comment     string   `protobuf:"bytes,6,opt,name=comment,proto3" json:"comment,omitempty"`
}

func (x *Reservation6) Reset() {
	*x = Reservation6{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Reservation6) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Reservation6) ProtoMessage() {}

func (x *Reservation6) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Reservation6.ProtoReflect.Descriptor instead.
func (*Reservation6) Descriptor() ([]byte, []int) {
	return file_dhcp_proto_rawDescGZIP(), []int{44}
}

func (x *Reservation6) GetDuid() string {
	if x != nil {
		return x.Duid
	}
	return ""
}

func (x *Reservation6) GetHwAddress() string {
	if x != nil {
		return x.HwAddress
	}
	return ""
}

func (x *Reservation6) GetIpAddresses() []string {
	if x != nil {
		return x.IpAddresses
	}
	return nil
}

func (x *Reservation6) GetCapacity() string {
	if x != nil {
		return x.Capacity
	}
	return ""
}

func (x *Reservation6) GetUsedCount() uint64 {
	if x != nil {
		return x.UsedCount
	}
	return 0
}

func (x *Reservation6) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

type PdPool6 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Prefix       string `protobuf:"bytes,1,opt,name=prefix,proto3" json:"prefix,omitempty"`
	PrefixLen    uint32 `protobuf:"varint,2,opt,name=prefix_len,json=prefixLen,proto3" json:"prefix_len,omitempty"`
	PrefixIpnet  string `protobuf:"bytes,3,opt,name=prefix_ipnet,json=prefixIpnet,proto3" json:"prefix_ipnet,omitempty"`
	DelegatedLen uint32 `protobuf:"varint,4,opt,name=delegated_len,json=delegatedLen,proto3" json:"delegated_len,omitempty"`
	Capacity     string `protobuf:"bytes,5,opt,name=capacity,proto3" json:"capacity,omitempty"`
	Comment      string `protobuf:"bytes,6,opt,name=comment,proto3" json:"comment,omitempty"`
}

func (x *PdPool6) Reset() {
	*x = PdPool6{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PdPool6) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PdPool6) ProtoMessage() {}

func (x *PdPool6) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PdPool6.ProtoReflect.Descriptor instead.
func (*PdPool6) Descriptor() ([]byte, []int) {
	return file_dhcp_proto_rawDescGZIP(), []int{45}
}

func (x *PdPool6) GetPrefix() string {
	if x != nil {
		return x.Prefix
	}
	return ""
}

func (x *PdPool6) GetPrefixLen() uint32 {
	if x != nil {
		return x.PrefixLen
	}
	return 0
}

func (x *PdPool6) GetPrefixIpnet() string {
	if x != nil {
		return x.PrefixIpnet
	}
	return ""
}

func (x *PdPool6) GetDelegatedLen() uint32 {
	if x != nil {
		return x.DelegatedLen
	}
	return 0
}

func (x *PdPool6) GetCapacity() string {
	if x != nil {
		return x.Capacity
	}
	return ""
}

func (x *PdPool6) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

type CreateReservation4SRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Subnet        string          `protobuf:"bytes,1,opt,name=subnet,proto3" json:"subnet,omitempty"`
	Reservation4S []*Reservation4 `protobuf:"bytes,2,rep,name=reservation4s,proto3" json:"reservation4s,omitempty"`
}

func (x *CreateReservation4SRequest) Reset() {
	*x = CreateReservation4SRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateReservation4SRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateReservation4SRequest) ProtoMessage() {}

func (x *CreateReservation4SRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateReservation4SRequest.ProtoReflect.Descriptor instead.
func (*CreateReservation4SRequest) Descriptor() ([]byte, []int) {
	return file_dhcp_proto_rawDescGZIP(), []int{46}
}

func (x *CreateReservation4SRequest) GetSubnet() string {
	if x != nil {
		return x.Subnet
	}
	return ""
}

func (x *CreateReservation4SRequest) GetReservation4S() []*Reservation4 {
	if x != nil {
		return x.Reservation4S
	}
	return nil
}

type CreateReservation4SResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Succeed bool `protobuf:"varint,1,opt,name=succeed,proto3" json:"succeed,omitempty"`
}

func (x *CreateReservation4SResponse) Reset() {
	*x = CreateReservation4SResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateReservation4SResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateReservation4SResponse) ProtoMessage() {}

func (x *CreateReservation4SResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateReservation4SResponse.ProtoReflect.Descriptor instead.
func (*CreateReservation4SResponse) Descriptor() ([]byte, []int) {
	return file_dhcp_proto_rawDescGZIP(), []int{47}
}

func (x *CreateReservation4SResponse) GetSucceed() bool {
	if x != nil {
		return x.Succeed
	}
	return false
}

type CreateReservedPool4SRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Subnet         string           `protobuf:"bytes,1,opt,name=subnet,proto3" json:"subnet,omitempty"`
	ReservedPool4S []*ReservedPool4 `protobuf:"bytes,2,rep,name=reservedPool4s,proto3" json:"reservedPool4s,omitempty"`
}

func (x *CreateReservedPool4SRequest) Reset() {
	*x = CreateReservedPool4SRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateReservedPool4SRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateReservedPool4SRequest) ProtoMessage() {}

func (x *CreateReservedPool4SRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateReservedPool4SRequest.ProtoReflect.Descriptor instead.
func (*CreateReservedPool4SRequest) Descriptor() ([]byte, []int) {
	return file_dhcp_proto_rawDescGZIP(), []int{48}
}

func (x *CreateReservedPool4SRequest) GetSubnet() string {
	if x != nil {
		return x.Subnet
	}
	return ""
}

func (x *CreateReservedPool4SRequest) GetReservedPool4S() []*ReservedPool4 {
	if x != nil {
		return x.ReservedPool4S
	}
	return nil
}

type CreateReservedPool4SResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Succeed bool `protobuf:"varint,1,opt,name=succeed,proto3" json:"succeed,omitempty"`
}

func (x *CreateReservedPool4SResponse) Reset() {
	*x = CreateReservedPool4SResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateReservedPool4SResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateReservedPool4SResponse) ProtoMessage() {}

func (x *CreateReservedPool4SResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateReservedPool4SResponse.ProtoReflect.Descriptor instead.
func (*CreateReservedPool4SResponse) Descriptor() ([]byte, []int) {
	return file_dhcp_proto_rawDescGZIP(), []int{49}
}

func (x *CreateReservedPool4SResponse) GetSucceed() bool {
	if x != nil {
		return x.Succeed
	}
	return false
}

type CreateReservation6SRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Subnet        string          `protobuf:"bytes,1,opt,name=subnet,proto3" json:"subnet,omitempty"`
	Reservation6S []*Reservation6 `protobuf:"bytes,2,rep,name=reservation6s,proto3" json:"reservation6s,omitempty"`
}

func (x *CreateReservation6SRequest) Reset() {
	*x = CreateReservation6SRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateReservation6SRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateReservation6SRequest) ProtoMessage() {}

func (x *CreateReservation6SRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateReservation6SRequest.ProtoReflect.Descriptor instead.
func (*CreateReservation6SRequest) Descriptor() ([]byte, []int) {
	return file_dhcp_proto_rawDescGZIP(), []int{50}
}

func (x *CreateReservation6SRequest) GetSubnet() string {
	if x != nil {
		return x.Subnet
	}
	return ""
}

func (x *CreateReservation6SRequest) GetReservation6S() []*Reservation6 {
	if x != nil {
		return x.Reservation6S
	}
	return nil
}

type CreateReservation6SResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Succeed bool `protobuf:"varint,1,opt,name=succeed,proto3" json:"succeed,omitempty"`
}

func (x *CreateReservation6SResponse) Reset() {
	*x = CreateReservation6SResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateReservation6SResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateReservation6SResponse) ProtoMessage() {}

func (x *CreateReservation6SResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateReservation6SResponse.ProtoReflect.Descriptor instead.
func (*CreateReservation6SResponse) Descriptor() ([]byte, []int) {
	return file_dhcp_proto_rawDescGZIP(), []int{51}
}

func (x *CreateReservation6SResponse) GetSucceed() bool {
	if x != nil {
		return x.Succeed
	}
	return false
}

type CreateReservedPool6SRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Subnet         string           `protobuf:"bytes,1,opt,name=subnet,proto3" json:"subnet,omitempty"`
	ReservedPool6S []*ReservedPool6 `protobuf:"bytes,2,rep,name=reservedPool6s,proto3" json:"reservedPool6s,omitempty"`
}

func (x *CreateReservedPool6SRequest) Reset() {
	*x = CreateReservedPool6SRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateReservedPool6SRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateReservedPool6SRequest) ProtoMessage() {}

func (x *CreateReservedPool6SRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateReservedPool6SRequest.ProtoReflect.Descriptor instead.
func (*CreateReservedPool6SRequest) Descriptor() ([]byte, []int) {
	return file_dhcp_proto_rawDescGZIP(), []int{52}
}

func (x *CreateReservedPool6SRequest) GetSubnet() string {
	if x != nil {
		return x.Subnet
	}
	return ""
}

func (x *CreateReservedPool6SRequest) GetReservedPool6S() []*ReservedPool6 {
	if x != nil {
		return x.ReservedPool6S
	}
	return nil
}

type CreateReservedPool6SResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Succeed bool `protobuf:"varint,1,opt,name=succeed,proto3" json:"succeed,omitempty"`
}

func (x *CreateReservedPool6SResponse) Reset() {
	*x = CreateReservedPool6SResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateReservedPool6SResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateReservedPool6SResponse) ProtoMessage() {}

func (x *CreateReservedPool6SResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateReservedPool6SResponse.ProtoReflect.Descriptor instead.
func (*CreateReservedPool6SResponse) Descriptor() ([]byte, []int) {
	return file_dhcp_proto_rawDescGZIP(), []int{53}
}

func (x *CreateReservedPool6SResponse) GetSucceed() bool {
	if x != nil {
		return x.Succeed
	}
	return false
}

var File_dhcp_proto protoreflect.FileDescriptor

var file_dhcp_proto_rawDesc = []byte{
	0x0a, 0x0a, 0x64, 0x68, 0x63, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x29, 0x0a, 0x17,
	0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x34, 0x57, 0x69, 0x74, 0x68, 0x49, 0x70,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x70, 0x22, 0xca, 0x01, 0x0a, 0x07, 0x53, 0x75, 0x62, 0x6e,
	0x65, 0x74, 0x34, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x63,
	0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x63,
	0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x64, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x75, 0x73, 0x65,
	0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d,
	0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x12, 0x18, 0x0a,
	0x07, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x75, 0x62, 0x6e, 0x65,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x73, 0x75, 0x62, 0x6e,
	0x65, 0x74, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x22, 0xbc, 0x01, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x6e,
	0x65, 0x74, 0x34, 0x57, 0x69, 0x74, 0x68, 0x49, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x65, 0x64, 0x12, 0x40, 0x0a, 0x07, 0x73,
	0x75, 0x62, 0x6e, 0x65, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x47,
	0x65, 0x74, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x34, 0x57, 0x69, 0x74, 0x68, 0x49, 0x70, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x73, 0x1a, 0x44, 0x0a,
	0x0c, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x1e, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08,
	0x2e, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x34, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0x29, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74,
	0x36, 0x57, 0x69, 0x74, 0x68, 0x49, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x70, 0x22, 0xcd,
	0x01, 0x0a, 0x07, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x36, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x75,
	0x62, 0x6e, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x75, 0x62, 0x6e,
	0x65, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x12, 0x1d,
	0x0a, 0x0a, 0x75, 0x73, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x09, 0x75, 0x73, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x25, 0x0a,
	0x0e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x5f, 0x65, 0x75, 0x69, 0x36,
	0x34, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x75, 0x73, 0x65, 0x45, 0x75, 0x69, 0x36,
	0x34, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x49, 0x64, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0xbc,
	0x01, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x36, 0x57, 0x69, 0x74,
	0x68, 0x49, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73,
	0x75, 0x63, 0x63, 0x65, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75,
	0x63, 0x63, 0x65, 0x65, 0x64, 0x12, 0x40, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x6e,
	0x65, 0x74, 0x36, 0x57, 0x69, 0x74, 0x68, 0x49, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x2e, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07,
	0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x73, 0x1a, 0x44, 0x0a, 0x0c, 0x53, 0x75, 0x62, 0x6e, 0x65,
	0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x1e, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x53, 0x75, 0x62, 0x6e, 0x65,
	0x74, 0x36, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x2d, 0x0a,
	0x19, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x73, 0x34, 0x57, 0x69, 0x74, 0x68,
	0x49, 0x70, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x70,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x03, 0x69, 0x70, 0x73, 0x22, 0xc0, 0x01, 0x0a,
	0x1a, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x73, 0x34, 0x57, 0x69, 0x74, 0x68,
	0x49, 0x70, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73,
	0x75, 0x63, 0x63, 0x65, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75,
	0x63, 0x63, 0x65, 0x65, 0x64, 0x12, 0x42, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x6e,
	0x65, 0x74, 0x73, 0x34, 0x57, 0x69, 0x74, 0x68, 0x49, 0x70, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x2e, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x07, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x73, 0x1a, 0x44, 0x0a, 0x0c, 0x53, 0x75, 0x62,
	0x6e, 0x65, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x1e, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x53, 0x75, 0x62,
	0x6e, 0x65, 0x74, 0x34, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0x2d, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x73, 0x36, 0x57, 0x69,
	0x74, 0x68, 0x49, 0x70, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03,
	0x69, 0x70, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x03, 0x69, 0x70, 0x73, 0x22, 0xc0,
	0x01, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x73, 0x36, 0x57, 0x69,
	0x74, 0x68, 0x49, 0x70, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x73, 0x75, 0x63, 0x63, 0x65, 0x65, 0x64, 0x12, 0x42, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x6e, 0x65,
	0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x75,
	0x62, 0x6e, 0x65, 0x74, 0x73, 0x36, 0x57, 0x69, 0x74, 0x68, 0x49, 0x70, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x07, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x73, 0x1a, 0x44, 0x0a, 0x0c, 0x53,
	0x75, 0x62, 0x6e, 0x65, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x1e, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x53,
	0x75, 0x62, 0x6e, 0x65, 0x74, 0x36, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0x32, 0x0a, 0x20, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x34, 0x41,
	0x6e, 0x64, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x34, 0x57, 0x69, 0x74, 0x68, 0x49, 0x70, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x70, 0x22, 0xbb, 0x03, 0x0a, 0x06, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x34,
	0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x68, 0x77,
	0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x68, 0x77, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x36, 0x0a, 0x17, 0x68, 0x77, 0x5f,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x68, 0x77, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x25,
	0x0a, 0x0e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x6c, 0x69, 0x66, 0x65, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x4c, 0x69, 0x66,
	0x65, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x76, 0x65, 0x6e,
	0x64, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x76, 0x65,
	0x6e, 0x64, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6e, 0x67, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x49, 0x64,
	0x12, 0x21, 0x0a, 0x0c, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x54,
	0x79, 0x70, 0x65, 0x22, 0x8f, 0x01, 0x0a, 0x0f, 0x49, 0x70, 0x76, 0x34, 0x49, 0x6e, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x06, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x34, 0x52, 0x06,
	0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x12, 0x1d, 0x0a, 0x05, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x07, 0x2e, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x34, 0x52, 0x05,
	0x6c, 0x65, 0x61, 0x73, 0x65, 0x22, 0xfb, 0x01, 0x0a, 0x21, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62,
	0x6e, 0x65, 0x74, 0x34, 0x41, 0x6e, 0x64, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x34, 0x57, 0x69, 0x74,
	0x68, 0x49, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73,
	0x75, 0x63, 0x63, 0x65, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75,
	0x63, 0x63, 0x65, 0x65, 0x64, 0x12, 0x65, 0x0a, 0x11, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x38, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x34, 0x41, 0x6e, 0x64,
	0x4c, 0x65, 0x61, 0x73, 0x65, 0x34, 0x57, 0x69, 0x74, 0x68, 0x49, 0x70, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x49, 0x70, 0x76, 0x34, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x10, 0x69, 0x70, 0x76, 0x34,
	0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x55, 0x0a, 0x15,
	0x49, 0x70, 0x76, 0x34, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x26, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x49, 0x70, 0x76, 0x34, 0x49, 0x6e, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0x32, 0x0a, 0x20, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74,
	0x36, 0x41, 0x6e, 0x64, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x36, 0x57, 0x69, 0x74, 0x68, 0x49, 0x70,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x70, 0x22, 0x87, 0x05, 0x0a, 0x06, 0x4c, 0x65, 0x61, 0x73,
	0x65, 0x36, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1d, 0x0a, 0x0a,
	0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x6c, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x09, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4c, 0x65, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x64,
	0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x75, 0x69, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x69, 0x61, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x69,
	0x61, 0x69, 0x64, 0x12, 0x2d, 0x0a, 0x12, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64,
	0x5f, 0x6c, 0x69, 0x66, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x11, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x4c, 0x69, 0x66, 0x65, 0x74, 0x69,
	0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x6c, 0x69, 0x66, 0x65,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x4c, 0x69, 0x66, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x78, 0x70,
	0x69, 0x72, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x65, 0x78, 0x70, 0x69, 0x72,
	0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x68, 0x77, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x68, 0x77, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x26, 0x0a, 0x0f, 0x68, 0x77, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x68, 0x77, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x68, 0x77, 0x5f, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x68, 0x77, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x12, 0x36, 0x0a, 0x17, 0x68, 0x77, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x5f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x68, 0x77, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a,
	0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x68,
	0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68,
	0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x76, 0x65, 0x6e, 0x64, 0x6f,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x76, 0x65, 0x6e, 0x64,
	0x6f, 0x72, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6e,
	0x67, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x12,
	0x1f, 0x0a, 0x0b, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x12,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x49, 0x64, 0x12, 0x21,
	0x0a, 0x0c, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x13,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70,
	0x65, 0x22, 0x8f, 0x01, 0x0a, 0x0f, 0x49, 0x70, 0x76, 0x36, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x21, 0x0a, 0x0c, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x20, 0x0a, 0x06, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x08, 0x2e, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x36, 0x52, 0x06, 0x73, 0x75,
	0x62, 0x6e, 0x65, 0x74, 0x12, 0x1d, 0x0a, 0x05, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x07, 0x2e, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x36, 0x52, 0x05, 0x6c, 0x65,
	0x61, 0x73, 0x65, 0x22, 0xfb, 0x01, 0x0a, 0x21, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x6e, 0x65,
	0x74, 0x36, 0x41, 0x6e, 0x64, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x36, 0x57, 0x69, 0x74, 0x68, 0x49,
	0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63,
	0x63, 0x65, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63,
	0x65, 0x65, 0x64, 0x12, 0x65, 0x0a, 0x11, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x38,
	0x2e, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x36, 0x41, 0x6e, 0x64, 0x4c, 0x65,
	0x61, 0x73, 0x65, 0x36, 0x57, 0x69, 0x74, 0x68, 0x49, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x2e, 0x49, 0x70, 0x76, 0x36, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x10, 0x69, 0x70, 0x76, 0x36, 0x49, 0x6e,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x55, 0x0a, 0x15, 0x49, 0x70,
	0x76, 0x36, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x26, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x49, 0x70, 0x76, 0x36, 0x49, 0x6e, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0x37, 0x0a, 0x23, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x73, 0x34,
	0x41, 0x6e, 0x64, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x34, 0x57, 0x69, 0x74, 0x68, 0x49, 0x70,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x70, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x03, 0x69, 0x70, 0x73, 0x22, 0x81, 0x02, 0x0a, 0x24, 0x47,
	0x65, 0x74, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x73, 0x34, 0x41, 0x6e, 0x64, 0x4c, 0x65, 0x61,
	0x73, 0x65, 0x73, 0x34, 0x57, 0x69, 0x74, 0x68, 0x49, 0x70, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x65, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x65, 0x64, 0x12, 0x68, 0x0a,
	0x11, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x75,
	0x62, 0x6e, 0x65, 0x74, 0x73, 0x34, 0x41, 0x6e, 0x64, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x34,
	0x57, 0x69, 0x74, 0x68, 0x49, 0x70, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e,
	0x49, 0x70, 0x76, 0x34, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x10, 0x69, 0x70, 0x76, 0x34, 0x49, 0x6e, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x55, 0x0a, 0x15, 0x49, 0x70, 0x76, 0x34, 0x49,
	0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x26, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x10, 0x2e, 0x49, 0x70, 0x76, 0x34, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x37,
	0x0a, 0x23, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x73, 0x36, 0x41, 0x6e, 0x64,
	0x4c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x36, 0x57, 0x69, 0x74, 0x68, 0x49, 0x70, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x70, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x03, 0x69, 0x70, 0x73, 0x22, 0x81, 0x02, 0x0a, 0x24, 0x47, 0x65, 0x74, 0x53,
	0x75, 0x62, 0x6e, 0x65, 0x74, 0x73, 0x36, 0x41, 0x6e, 0x64, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x73,
	0x36, 0x57, 0x69, 0x74, 0x68, 0x49, 0x70, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x65, 0x64, 0x12, 0x68, 0x0a, 0x11, 0x69, 0x70,
	0x76, 0x36, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x6e, 0x65,
	0x74, 0x73, 0x36, 0x41, 0x6e, 0x64, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x36, 0x57, 0x69, 0x74,
	0x68, 0x49, 0x70, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x49, 0x70, 0x76,
	0x36, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x10, 0x69, 0x70, 0x76, 0x36, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x55, 0x0a, 0x15, 0x49, 0x70, 0x76, 0x36, 0x49, 0x6e, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x26, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10,
	0x2e, 0x49, 0x70, 0x76, 0x36, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x2f, 0x0a, 0x11, 0x47,
	0x65, 0x74, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x22, 0x3b, 0x0a, 0x13,
	0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x34, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x24, 0x0a, 0x08, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x34, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x34, 0x52,
	0x08, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x34, 0x73, 0x22, 0x2f, 0x0a, 0x15, 0x47, 0x65, 0x74,
	0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x50, 0x6f, 0x6f, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x22, 0x31, 0x0a, 0x11, 0x47, 0x65,
	0x74, 0x50, 0x6f, 0x6f, 0x6c, 0x34, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x1c, 0x0a, 0x05, 0x70, 0x6f, 0x6f, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x06,
	0x2e, 0x50, 0x6f, 0x6f, 0x6c, 0x34, 0x52, 0x05, 0x70, 0x6f, 0x6f, 0x6c, 0x73, 0x22, 0x41, 0x0a,
	0x19, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x50, 0x6f, 0x6f, 0x6c,
	0x34, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x24, 0x0a, 0x05, 0x70, 0x6f,
	0x6f, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x52, 0x65, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x64, 0x50, 0x6f, 0x6f, 0x6c, 0x34, 0x52, 0x05, 0x70, 0x6f, 0x6f, 0x6c, 0x73,
	0x22, 0x43, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x50, 0x6f, 0x6f, 0x6c, 0x34, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x23, 0x0a, 0x05, 0x70, 0x6f, 0x6f, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0d, 0x2e, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x34, 0x52, 0x05,
	0x70, 0x6f, 0x6f, 0x6c, 0x73, 0x22, 0xa1, 0x01, 0x0a, 0x05, 0x50, 0x6f, 0x6f, 0x6c, 0x34, 0x12,
	0x23, 0x0a, 0x0d, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x6e, 0x64, 0x5f, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x6e, 0x64, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74,
	0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74,
	0x79, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x75, 0x73, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0xa9, 0x01, 0x0a, 0x0d, 0x52, 0x65,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x50, 0x6f, 0x6f, 0x6c, 0x34, 0x12, 0x23, 0x0a, 0x0d, 0x62,
	0x65, 0x67, 0x69, 0x6e, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x6e, 0x64, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x6e, 0x64, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x08, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x12, 0x1c, 0x0a,
	0x09, 0x75, 0x73, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x09, 0x75, 0x73, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x63,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0xa0, 0x01, 0x0a, 0x0c, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x34, 0x12, 0x1d, 0x0a, 0x0a, 0x68, 0x77, 0x5f, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x68, 0x77, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x70, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79,
	0x12, 0x1c, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x09, 0x75, 0x73, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x18,
	0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x32, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x4c,
	0x65, 0x61, 0x73, 0x65, 0x73, 0x42, 0x79, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x22, 0x25, 0x0a, 0x13,
	0x47, 0x65, 0x74, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x42, 0x79, 0x49, 0x70, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x70, 0x22, 0x52, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x34,
	0x42, 0x79, 0x49, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x1f, 0x0a, 0x06, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x34,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x07, 0x2e, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x34, 0x52,
	0x06, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x34, 0x22, 0x3f, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x4c, 0x65,
	0x61, 0x73, 0x65, 0x34, 0x73, 0x42, 0x79, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x21, 0x0a, 0x07, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x34, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x07, 0x2e, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x34, 0x52,
	0x07, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x34, 0x73, 0x22, 0x3b, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x53,
	0x75, 0x62, 0x6e, 0x65, 0x74, 0x36, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x24, 0x0a, 0x08, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x36, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x08, 0x2e, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x36, 0x52, 0x08, 0x73, 0x75, 0x62,
	0x6e, 0x65, 0x74, 0x36, 0x73, 0x22, 0x31, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x6f, 0x6c,
	0x36, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1c, 0x0a, 0x05, 0x70, 0x6f,
	0x6f, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x06, 0x2e, 0x50, 0x6f, 0x6f, 0x6c,
	0x36, 0x52, 0x05, 0x70, 0x6f, 0x6f, 0x6c, 0x73, 0x22, 0x41, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x52,
	0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x50, 0x6f, 0x6f, 0x6c, 0x36, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x24, 0x0a, 0x05, 0x70, 0x6f, 0x6f, 0x6c, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x50,
	0x6f, 0x6f, 0x6c, 0x36, 0x52, 0x05, 0x70, 0x6f, 0x6f, 0x6c, 0x73, 0x22, 0x43, 0x0a, 0x1c, 0x47,
	0x65, 0x74, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6f,
	0x6c, 0x36, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x23, 0x0a, 0x05, 0x70,
	0x6f, 0x6f, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x52, 0x65, 0x73,
	0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x36, 0x52, 0x05, 0x70, 0x6f, 0x6f, 0x6c, 0x73,
	0x22, 0x52, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x36, 0x42, 0x79, 0x49,
	0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x12, 0x1f, 0x0a, 0x06, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x36, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x07, 0x2e, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x36, 0x52, 0x06, 0x6c, 0x65,
	0x61, 0x73, 0x65, 0x36, 0x22, 0x3f, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x4c, 0x65, 0x61, 0x73, 0x65,
	0x36, 0x73, 0x42, 0x79, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x21, 0x0a, 0x07, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x36, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x07, 0x2e, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x36, 0x52, 0x07, 0x6c, 0x65,
	0x61, 0x73, 0x65, 0x36, 0x73, 0x22, 0x43, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x50, 0x64, 0x50, 0x6f,
	0x6f, 0x6c, 0x73, 0x42, 0x79, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x25, 0x0a, 0x09, 0x70, 0x64, 0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x36, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x50, 0x64, 0x50, 0x6f, 0x6f, 0x6c, 0x36,
	0x52, 0x08, 0x70, 0x64, 0x50, 0x6f, 0x6f, 0x6c, 0x36, 0x73, 0x22, 0xa1, 0x01, 0x0a, 0x05, 0x50,
	0x6f, 0x6f, 0x6c, 0x36, 0x12, 0x23, 0x0a, 0x0d, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x5f, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x62, 0x65, 0x67,
	0x69, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x6e, 0x64,
	0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x65, 0x6e, 0x64, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61,
	0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x61,
	0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x64, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x75, 0x73, 0x65, 0x64, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0xa9,
	0x01, 0x0a, 0x0d, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x50, 0x6f, 0x6f, 0x6c, 0x36,
	0x12, 0x23, 0x0a, 0x0d, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x6e, 0x64, 0x5f, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x6e, 0x64, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69,
	0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69,
	0x74, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x75, 0x73, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0xb8, 0x01, 0x0a, 0x0c, 0x52,
	0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x36, 0x12, 0x12, 0x0a, 0x04, 0x64,
	0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x75, 0x69, 0x64, 0x12,
	0x1d, 0x0a, 0x0a, 0x68, 0x77, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x68, 0x77, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x21,
	0x0a, 0x0c, 0x69, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65,
	0x73, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x12, 0x1c, 0x0a,
	0x09, 0x75, 0x73, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x09, 0x75, 0x73, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x63,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0xbe, 0x01, 0x0a, 0x07, 0x50, 0x64, 0x50, 0x6f, 0x6f, 0x6c,
	0x36, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x65,
	0x66, 0x69, 0x78, 0x5f, 0x6c, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x70,
	0x72, 0x65, 0x66, 0x69, 0x78, 0x4c, 0x65, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72, 0x65, 0x66,
	0x69, 0x78, 0x5f, 0x69, 0x70, 0x6e, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x49, 0x70, 0x6e, 0x65, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x64,
	0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x6c, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0c, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x64, 0x4c, 0x65, 0x6e,
	0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x12, 0x18, 0x0a, 0x07,
	0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x69, 0x0a, 0x1a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x34, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x12, 0x33, 0x0a, 0x0d,
	0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x34, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x34, 0x52, 0x0d, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x34,
	0x73, 0x22, 0x37, 0x0a, 0x1b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x65, 0x72,
	0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x34, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x65, 0x64, 0x22, 0x6d, 0x0a, 0x1b, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x50, 0x6f, 0x6f, 0x6c,
	0x34, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x75, 0x62,
	0x6e, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x75, 0x62, 0x6e, 0x65,
	0x74, 0x12, 0x36, 0x0a, 0x0e, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x50, 0x6f, 0x6f,
	0x6c, 0x34, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x52, 0x65, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x64, 0x50, 0x6f, 0x6f, 0x6c, 0x34, 0x52, 0x0e, 0x72, 0x65, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x64, 0x50, 0x6f, 0x6f, 0x6c, 0x34, 0x73, 0x22, 0x38, 0x0a, 0x1c, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x50, 0x6f, 0x6f, 0x6c, 0x34,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63,
	0x63, 0x65, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63,
	0x65, 0x65, 0x64, 0x22, 0x69, 0x0a, 0x1a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73,
	0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x36, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x12, 0x33, 0x0a, 0x0d, 0x72, 0x65, 0x73,
	0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x36, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0d, 0x2e, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x36, 0x52,
	0x0d, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x36, 0x73, 0x22, 0x37,
	0x0a, 0x1b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x36, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x73, 0x75, 0x63, 0x63, 0x65, 0x65, 0x64, 0x22, 0x6d, 0x0a, 0x1b, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x50, 0x6f, 0x6f, 0x6c, 0x36, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x12, 0x36,
	0x0a, 0x0e, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x50, 0x6f, 0x6f, 0x6c, 0x36, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x64, 0x50, 0x6f, 0x6f, 0x6c, 0x36, 0x52, 0x0e, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64,
	0x50, 0x6f, 0x6f, 0x6c, 0x36, 0x73, 0x22, 0x38, 0x0a, 0x1c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x50, 0x6f, 0x6f, 0x6c, 0x36, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x65,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x65, 0x64,
	0x32, 0xdc, 0x10, 0x0a, 0x0b, 0x44, 0x68, 0x63, 0x70, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x12, 0x47, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x34, 0x57, 0x69,
	0x74, 0x68, 0x49, 0x70, 0x12, 0x18, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74,
	0x34, 0x57, 0x69, 0x74, 0x68, 0x49, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19,
	0x2e, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x34, 0x57, 0x69, 0x74, 0x68, 0x49,
	0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x47, 0x0a, 0x10, 0x47, 0x65, 0x74,
	0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x36, 0x57, 0x69, 0x74, 0x68, 0x49, 0x70, 0x12, 0x18, 0x2e,
	0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x36, 0x57, 0x69, 0x74, 0x68, 0x49, 0x70,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62,
	0x6e, 0x65, 0x74, 0x36, 0x57, 0x69, 0x74, 0x68, 0x49, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x4d, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x73,
	0x34, 0x57, 0x69, 0x74, 0x68, 0x49, 0x70, 0x73, 0x12, 0x1a, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x75,
	0x62, 0x6e, 0x65, 0x74, 0x73, 0x34, 0x57, 0x69, 0x74, 0x68, 0x49, 0x70, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74,
	0x73, 0x34, 0x57, 0x69, 0x74, 0x68, 0x49, 0x70, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x4d, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x73, 0x36,
	0x57, 0x69, 0x74, 0x68, 0x49, 0x70, 0x73, 0x12, 0x1a, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62,
	0x6e, 0x65, 0x74, 0x73, 0x36, 0x57, 0x69, 0x74, 0x68, 0x49, 0x70, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x73,
	0x36, 0x57, 0x69, 0x74, 0x68, 0x49, 0x70, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x62, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x34, 0x41, 0x6e,
	0x64, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x34, 0x57, 0x69, 0x74, 0x68, 0x49, 0x70, 0x12, 0x21, 0x2e,
	0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x34, 0x41, 0x6e, 0x64, 0x4c, 0x65, 0x61,
	0x73, 0x65, 0x34, 0x57, 0x69, 0x74, 0x68, 0x49, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x22, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x34, 0x41, 0x6e, 0x64,
	0x4c, 0x65, 0x61, 0x73, 0x65, 0x34, 0x57, 0x69, 0x74, 0x68, 0x49, 0x70, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x62, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x6e, 0x65,
	0x74, 0x36, 0x41, 0x6e, 0x64, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x36, 0x57, 0x69, 0x74, 0x68, 0x49,
	0x70, 0x12, 0x21, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x36, 0x41, 0x6e,
	0x64, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x36, 0x57, 0x69, 0x74, 0x68, 0x49, 0x70, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74,
	0x36, 0x41, 0x6e, 0x64, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x36, 0x57, 0x69, 0x74, 0x68, 0x49, 0x70,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6b, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x53,
	0x75, 0x62, 0x6e, 0x65, 0x74, 0x73, 0x34, 0x41, 0x6e, 0x64, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x73,
	0x34, 0x57, 0x69, 0x74, 0x68, 0x49, 0x70, 0x73, 0x12, 0x24, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x75,
	0x62, 0x6e, 0x65, 0x74, 0x73, 0x34, 0x41, 0x6e, 0x64, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x34,
	0x57, 0x69, 0x74, 0x68, 0x49, 0x70, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25,
	0x2e, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x73, 0x34, 0x41, 0x6e, 0x64, 0x4c,
	0x65, 0x61, 0x73, 0x65, 0x73, 0x34, 0x57, 0x69, 0x74, 0x68, 0x49, 0x70, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6b, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x6e,
	0x65, 0x74, 0x73, 0x36, 0x41, 0x6e, 0x64, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x36, 0x57, 0x69,
	0x74, 0x68, 0x49, 0x70, 0x73, 0x12, 0x24, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x6e, 0x65,
	0x74, 0x73, 0x36, 0x41, 0x6e, 0x64, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x36, 0x57, 0x69, 0x74,
	0x68, 0x49, 0x70, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x47, 0x65,
	0x74, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x73, 0x36, 0x41, 0x6e, 0x64, 0x4c, 0x65, 0x61, 0x73,
	0x65, 0x73, 0x36, 0x57, 0x69, 0x74, 0x68, 0x49, 0x70, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x3a, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x53, 0x75, 0x62, 0x6e,
	0x65, 0x74, 0x34, 0x73, 0x12, 0x12, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x75,
	0x62, 0x6e, 0x65, 0x74, 0x34, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3a,
	0x0a, 0x0e, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x36, 0x73,
	0x12, 0x12, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74,
	0x36, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x41, 0x0a, 0x15, 0x47, 0x65,
	0x74, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x34, 0x73, 0x42, 0x79, 0x50, 0x72, 0x65, 0x66, 0x69,
	0x78, 0x65, 0x73, 0x12, 0x12, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62,
	0x6e, 0x65, 0x74, 0x34, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x41, 0x0a,
	0x15, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x36, 0x73, 0x42, 0x79, 0x50, 0x72,
	0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x12, 0x12, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x6e,
	0x65, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x47, 0x65, 0x74,
	0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x36, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x3f, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x6f, 0x6c, 0x34, 0x73, 0x42, 0x79, 0x53,
	0x75, 0x62, 0x6e, 0x65, 0x74, 0x12, 0x16, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x6e, 0x65,
	0x74, 0x50, 0x6f, 0x6f, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e,
	0x47, 0x65, 0x74, 0x50, 0x6f, 0x6f, 0x6c, 0x34, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x3f, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x6f, 0x6c, 0x36, 0x73, 0x42, 0x79,
	0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x12, 0x16, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x6e,
	0x65, 0x74, 0x50, 0x6f, 0x6f, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x12,
	0x2e, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x6f, 0x6c, 0x36, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x4f, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x64, 0x50, 0x6f, 0x6f, 0x6c, 0x34, 0x73, 0x42, 0x79, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x12,
	0x16, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x50, 0x6f, 0x6f, 0x6c, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x64, 0x50, 0x6f, 0x6f, 0x6c, 0x34, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x4f, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x64, 0x50, 0x6f, 0x6f, 0x6c, 0x36, 0x73, 0x42, 0x79, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74,
	0x12, 0x16, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x50, 0x6f, 0x6f, 0x6c,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x50, 0x6f, 0x6f, 0x6c, 0x36, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x51, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x65, 0x72,
	0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x34, 0x73, 0x42, 0x79, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74,
	0x12, 0x16, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x50, 0x6f, 0x6f, 0x6c,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65,
	0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6f, 0x6c, 0x34, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x51, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x52, 0x65,
	0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x36, 0x73, 0x42, 0x79, 0x53, 0x75, 0x62,
	0x6e, 0x65, 0x74, 0x12, 0x16, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x50,
	0x6f, 0x6f, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x47, 0x65,
	0x74, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6f, 0x6c,
	0x36, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4c, 0x0a, 0x12, 0x47, 0x65,
	0x74, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x34, 0x73, 0x42, 0x79, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74,
	0x12, 0x19, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x42, 0x79, 0x53, 0x75,
	0x62, 0x6e, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x47, 0x65,
	0x74, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x34, 0x73, 0x42, 0x79, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4c, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x4c,
	0x65, 0x61, 0x73, 0x65, 0x36, 0x73, 0x42, 0x79, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x12, 0x19,
	0x2e, 0x47, 0x65, 0x74, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x42, 0x79, 0x53, 0x75, 0x62, 0x6e,
	0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x47, 0x65, 0x74, 0x4c,
	0x65, 0x61, 0x73, 0x65, 0x36, 0x73, 0x42, 0x79, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4b, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x50, 0x64, 0x50,
	0x6f, 0x6f, 0x6c, 0x73, 0x36, 0x73, 0x42, 0x79, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x12, 0x16,
	0x2e, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x50, 0x6f, 0x6f, 0x6c, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x64, 0x50, 0x6f,
	0x6f, 0x6c, 0x73, 0x42, 0x79, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x3d, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x34,
	0x42, 0x79, 0x49, 0x70, 0x12, 0x14, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x42,
	0x79, 0x49, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x47, 0x65, 0x74,
	0x4c, 0x65, 0x61, 0x73, 0x65, 0x34, 0x42, 0x79, 0x49, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x3d, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x36, 0x42,
	0x79, 0x49, 0x70, 0x12, 0x14, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x42, 0x79,
	0x49, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x47, 0x65, 0x74, 0x4c,
	0x65, 0x61, 0x73, 0x65, 0x36, 0x42, 0x79, 0x49, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x50, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x65, 0x72,
	0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x34, 0x73, 0x12, 0x1b, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x34, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x34, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x53, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x64, 0x50, 0x6f, 0x6f, 0x6c, 0x34, 0x73, 0x12, 0x1c, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x50, 0x6f, 0x6f, 0x6c,
	0x34, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x50, 0x6f, 0x6f, 0x6c, 0x34, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x50, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x36, 0x73, 0x12,
	0x1b, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x36, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x36, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x53, 0x0a, 0x14, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x50, 0x6f, 0x6f, 0x6c,
	0x36, 0x73, 0x12, 0x1c, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x64, 0x50, 0x6f, 0x6f, 0x6c, 0x36, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1d, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x64, 0x50, 0x6f, 0x6f, 0x6c, 0x36, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42,
	0x09, 0x5a, 0x07, 0x2e, 0x2e, 0x2f, 0x64, 0x68, 0x63, 0x70, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_dhcp_proto_rawDescOnce sync.Once
	file_dhcp_proto_rawDescData = file_dhcp_proto_rawDesc
)

func file_dhcp_proto_rawDescGZIP() []byte {
	file_dhcp_proto_rawDescOnce.Do(func() {
		file_dhcp_proto_rawDescData = protoimpl.X.CompressGZIP(file_dhcp_proto_rawDescData)
	})
	return file_dhcp_proto_rawDescData
}

var file_dhcp_proto_msgTypes = make([]protoimpl.MessageInfo, 62)
var file_dhcp_proto_goTypes = []interface{}{
	(*GetSubnet4WithIpRequest)(nil),              // 0: GetSubnet4WithIpRequest
	(*Subnet4)(nil),                              // 1: Subnet4
	(*GetSubnet4WithIpResponse)(nil),             // 2: GetSubnet4WithIpResponse
	(*GetSubnet6WithIpRequest)(nil),              // 3: GetSubnet6WithIpRequest
	(*Subnet6)(nil),                              // 4: Subnet6
	(*GetSubnet6WithIpResponse)(nil),             // 5: GetSubnet6WithIpResponse
	(*GetSubnets4WithIpsRequest)(nil),            // 6: GetSubnets4WithIpsRequest
	(*GetSubnets4WithIpsResponse)(nil),           // 7: GetSubnets4WithIpsResponse
	(*GetSubnets6WithIpsRequest)(nil),            // 8: GetSubnets6WithIpsRequest
	(*GetSubnets6WithIpsResponse)(nil),           // 9: GetSubnets6WithIpsResponse
	(*GetSubnet4AndLease4WithIpRequest)(nil),     // 10: GetSubnet4AndLease4WithIpRequest
	(*Lease4)(nil),                               // 11: Lease4
	(*Ipv4Information)(nil),                      // 12: Ipv4Information
	(*GetSubnet4AndLease4WithIpResponse)(nil),    // 13: GetSubnet4AndLease4WithIpResponse
	(*GetSubnet6AndLease6WithIpRequest)(nil),     // 14: GetSubnet6AndLease6WithIpRequest
	(*Lease6)(nil),                               // 15: Lease6
	(*Ipv6Information)(nil),                      // 16: Ipv6Information
	(*GetSubnet6AndLease6WithIpResponse)(nil),    // 17: GetSubnet6AndLease6WithIpResponse
	(*GetSubnets4AndLeases4WithIpsRequest)(nil),  // 18: GetSubnets4AndLeases4WithIpsRequest
	(*GetSubnets4AndLeases4WithIpsResponse)(nil), // 19: GetSubnets4AndLeases4WithIpsResponse
	(*GetSubnets6AndLeases6WithIpsRequest)(nil),  // 20: GetSubnets6AndLeases6WithIpsRequest
	(*GetSubnets6AndLeases6WithIpsResponse)(nil), // 21: GetSubnets6AndLeases6WithIpsResponse
	(*GetSubnetsRequest)(nil),                    // 22: GetSubnetsRequest
	(*GetSubnet4SResponse)(nil),                  // 23: GetSubnet4sResponse
	(*GetSubnetPoolsRequest)(nil),                // 24: GetSubnetPoolsRequest
	(*GetPool4SResponse)(nil),                    // 25: GetPool4sResponse
	(*GetReservedPool4SResponse)(nil),            // 26: GetReservedPool4sResponse
	(*GetReservationPool4SResponse)(nil),         // 27: GetReservationPool4sResponse
	(*Pool4)(nil),                                // 28: Pool4
	(*ReservedPool4)(nil),                        // 29: ReservedPool4
	(*Reservation4)(nil),                         // 30: Reservation4
	(*GetLeasesBySubnetRequest)(nil),             // 31: GetLeasesBySubnetRequest
	(*GetLeaseByIpRequest)(nil),                  // 32: GetLeaseByIpRequest
	(*GetLease4ByIpResponse)(nil),                // 33: GetLease4ByIpResponse
	(*GetLease4SBySubnetResponse)(nil),           // 34: GetLease4sBySubnetResponse
	(*GetSubnet6SResponse)(nil),                  // 35: GetSubnet6sResponse
	(*GetPool6SResponse)(nil),                    // 36: GetPool6sResponse
	(*GetReservedPool6SResponse)(nil),            // 37: GetReservedPool6sResponse
	(*GetReservationPool6SResponse)(nil),         // 38: GetReservationPool6sResponse
	(*GetLease6ByIpResponse)(nil),                // 39: GetLease6ByIpResponse
	(*GetLease6SBySubnetResponse)(nil),           // 40: GetLease6sBySubnetResponse
	(*GetPdPoolsBySubnetResponse)(nil),           // 41: GetPdPoolsBySubnetResponse
	(*Pool6)(nil),                                // 42: Pool6
	(*ReservedPool6)(nil),                        // 43: ReservedPool6
	(*Reservation6)(nil),                         // 44: Reservation6
	(*PdPool6)(nil),                              // 45: PdPool6
	(*CreateReservation4SRequest)(nil),           // 46: CreateReservation4sRequest
	(*CreateReservation4SResponse)(nil),          // 47: CreateReservation4sResponse
	(*CreateReservedPool4SRequest)(nil),          // 48: CreateReservedPool4sRequest
	(*CreateReservedPool4SResponse)(nil),         // 49: CreateReservedPool4sResponse
	(*CreateReservation6SRequest)(nil),           // 50: CreateReservation6sRequest
	(*CreateReservation6SResponse)(nil),          // 51: CreateReservation6sResponse
	(*CreateReservedPool6SRequest)(nil),          // 52: CreateReservedPool6sRequest
	(*CreateReservedPool6SResponse)(nil),         // 53: CreateReservedPool6sResponse
	nil,                                          // 54: GetSubnet4WithIpResponse.SubnetsEntry
	nil,                                          // 55: GetSubnet6WithIpResponse.SubnetsEntry
	nil,                                          // 56: GetSubnets4WithIpsResponse.SubnetsEntry
	nil,                                          // 57: GetSubnets6WithIpsResponse.SubnetsEntry
	nil,                                          // 58: GetSubnet4AndLease4WithIpResponse.Ipv4InformationsEntry
	nil,                                          // 59: GetSubnet6AndLease6WithIpResponse.Ipv6InformationsEntry
	nil,                                          // 60: GetSubnets4AndLeases4WithIpsResponse.Ipv4InformationsEntry
	nil,                                          // 61: GetSubnets6AndLeases6WithIpsResponse.Ipv6InformationsEntry
}
var file_dhcp_proto_depIdxs = []int32{
	54, // 0: GetSubnet4WithIpResponse.subnets:type_name -> GetSubnet4WithIpResponse.SubnetsEntry
	55, // 1: GetSubnet6WithIpResponse.subnets:type_name -> GetSubnet6WithIpResponse.SubnetsEntry
	56, // 2: GetSubnets4WithIpsResponse.subnets:type_name -> GetSubnets4WithIpsResponse.SubnetsEntry
	57, // 3: GetSubnets6WithIpsResponse.subnets:type_name -> GetSubnets6WithIpsResponse.SubnetsEntry
	1,  // 4: Ipv4Information.subnet:type_name -> Subnet4
	11, // 5: Ipv4Information.lease:type_name -> Lease4
	58, // 6: GetSubnet4AndLease4WithIpResponse.ipv4_informations:type_name -> GetSubnet4AndLease4WithIpResponse.Ipv4InformationsEntry
	4,  // 7: Ipv6Information.subnet:type_name -> Subnet6
	15, // 8: Ipv6Information.lease:type_name -> Lease6
	59, // 9: GetSubnet6AndLease6WithIpResponse.ipv6_informations:type_name -> GetSubnet6AndLease6WithIpResponse.Ipv6InformationsEntry
	60, // 10: GetSubnets4AndLeases4WithIpsResponse.ipv4_informations:type_name -> GetSubnets4AndLeases4WithIpsResponse.Ipv4InformationsEntry
	61, // 11: GetSubnets6AndLeases6WithIpsResponse.ipv6_informations:type_name -> GetSubnets6AndLeases6WithIpsResponse.Ipv6InformationsEntry
	1,  // 12: GetSubnet4sResponse.subnet4s:type_name -> Subnet4
	28, // 13: GetPool4sResponse.pools:type_name -> Pool4
	29, // 14: GetReservedPool4sResponse.pools:type_name -> ReservedPool4
	30, // 15: GetReservationPool4sResponse.pools:type_name -> Reservation4
	11, // 16: GetLease4ByIpResponse.lease4:type_name -> Lease4
	11, // 17: GetLease4sBySubnetResponse.lease4s:type_name -> Lease4
	4,  // 18: GetSubnet6sResponse.subnet6s:type_name -> Subnet6
	42, // 19: GetPool6sResponse.pools:type_name -> Pool6
	43, // 20: GetReservedPool6sResponse.pools:type_name -> ReservedPool6
	44, // 21: GetReservationPool6sResponse.pools:type_name -> Reservation6
	15, // 22: GetLease6ByIpResponse.lease6:type_name -> Lease6
	15, // 23: GetLease6sBySubnetResponse.lease6s:type_name -> Lease6
	45, // 24: GetPdPoolsBySubnetResponse.pd_pool6s:type_name -> PdPool6
	30, // 25: CreateReservation4sRequest.reservation4s:type_name -> Reservation4
	29, // 26: CreateReservedPool4sRequest.reservedPool4s:type_name -> ReservedPool4
	44, // 27: CreateReservation6sRequest.reservation6s:type_name -> Reservation6
	43, // 28: CreateReservedPool6sRequest.reservedPool6s:type_name -> ReservedPool6
	1,  // 29: GetSubnet4WithIpResponse.SubnetsEntry.value:type_name -> Subnet4
	4,  // 30: GetSubnet6WithIpResponse.SubnetsEntry.value:type_name -> Subnet6
	1,  // 31: GetSubnets4WithIpsResponse.SubnetsEntry.value:type_name -> Subnet4
	4,  // 32: GetSubnets6WithIpsResponse.SubnetsEntry.value:type_name -> Subnet6
	12, // 33: GetSubnet4AndLease4WithIpResponse.Ipv4InformationsEntry.value:type_name -> Ipv4Information
	16, // 34: GetSubnet6AndLease6WithIpResponse.Ipv6InformationsEntry.value:type_name -> Ipv6Information
	12, // 35: GetSubnets4AndLeases4WithIpsResponse.Ipv4InformationsEntry.value:type_name -> Ipv4Information
	16, // 36: GetSubnets6AndLeases6WithIpsResponse.Ipv6InformationsEntry.value:type_name -> Ipv6Information
	0,  // 37: DhcpService.GetSubnet4WithIp:input_type -> GetSubnet4WithIpRequest
	3,  // 38: DhcpService.GetSubnet6WithIp:input_type -> GetSubnet6WithIpRequest
	6,  // 39: DhcpService.GetSubnets4WithIps:input_type -> GetSubnets4WithIpsRequest
	8,  // 40: DhcpService.GetSubnets6WithIps:input_type -> GetSubnets6WithIpsRequest
	10, // 41: DhcpService.GetSubnet4AndLease4WithIp:input_type -> GetSubnet4AndLease4WithIpRequest
	14, // 42: DhcpService.GetSubnet6AndLease6WithIp:input_type -> GetSubnet6AndLease6WithIpRequest
	18, // 43: DhcpService.GetSubnets4AndLeases4WithIps:input_type -> GetSubnets4AndLeases4WithIpsRequest
	20, // 44: DhcpService.GetSubnets6AndLeases6WithIps:input_type -> GetSubnets6AndLeases6WithIpsRequest
	22, // 45: DhcpService.GetAllSubnet4s:input_type -> GetSubnetsRequest
	22, // 46: DhcpService.GetAllSubnet6s:input_type -> GetSubnetsRequest
	22, // 47: DhcpService.GetSubnet4sByPrefixes:input_type -> GetSubnetsRequest
	22, // 48: DhcpService.GetSubnet6sByPrefixes:input_type -> GetSubnetsRequest
	24, // 49: DhcpService.GetPool4sBySubnet:input_type -> GetSubnetPoolsRequest
	24, // 50: DhcpService.GetPool6sBySubnet:input_type -> GetSubnetPoolsRequest
	24, // 51: DhcpService.GetReservedPool4sBySubnet:input_type -> GetSubnetPoolsRequest
	24, // 52: DhcpService.GetReservedPool6sBySubnet:input_type -> GetSubnetPoolsRequest
	24, // 53: DhcpService.GetReservation4sBySubnet:input_type -> GetSubnetPoolsRequest
	24, // 54: DhcpService.GetReservation6sBySubnet:input_type -> GetSubnetPoolsRequest
	31, // 55: DhcpService.GetLease4sBySubnet:input_type -> GetLeasesBySubnetRequest
	31, // 56: DhcpService.GetLease6sBySubnet:input_type -> GetLeasesBySubnetRequest
	24, // 57: DhcpService.GetPdPools6sBySubnet:input_type -> GetSubnetPoolsRequest
	32, // 58: DhcpService.GetLease4ByIp:input_type -> GetLeaseByIpRequest
	32, // 59: DhcpService.GetLease6ByIp:input_type -> GetLeaseByIpRequest
	46, // 60: DhcpService.CreateReservation4s:input_type -> CreateReservation4sRequest
	48, // 61: DhcpService.CreateReservedPool4s:input_type -> CreateReservedPool4sRequest
	50, // 62: DhcpService.CreateReservation6s:input_type -> CreateReservation6sRequest
	52, // 63: DhcpService.CreateReservedPool6s:input_type -> CreateReservedPool6sRequest
	2,  // 64: DhcpService.GetSubnet4WithIp:output_type -> GetSubnet4WithIpResponse
	5,  // 65: DhcpService.GetSubnet6WithIp:output_type -> GetSubnet6WithIpResponse
	7,  // 66: DhcpService.GetSubnets4WithIps:output_type -> GetSubnets4WithIpsResponse
	9,  // 67: DhcpService.GetSubnets6WithIps:output_type -> GetSubnets6WithIpsResponse
	13, // 68: DhcpService.GetSubnet4AndLease4WithIp:output_type -> GetSubnet4AndLease4WithIpResponse
	17, // 69: DhcpService.GetSubnet6AndLease6WithIp:output_type -> GetSubnet6AndLease6WithIpResponse
	19, // 70: DhcpService.GetSubnets4AndLeases4WithIps:output_type -> GetSubnets4AndLeases4WithIpsResponse
	21, // 71: DhcpService.GetSubnets6AndLeases6WithIps:output_type -> GetSubnets6AndLeases6WithIpsResponse
	23, // 72: DhcpService.GetAllSubnet4s:output_type -> GetSubnet4sResponse
	35, // 73: DhcpService.GetAllSubnet6s:output_type -> GetSubnet6sResponse
	23, // 74: DhcpService.GetSubnet4sByPrefixes:output_type -> GetSubnet4sResponse
	35, // 75: DhcpService.GetSubnet6sByPrefixes:output_type -> GetSubnet6sResponse
	25, // 76: DhcpService.GetPool4sBySubnet:output_type -> GetPool4sResponse
	36, // 77: DhcpService.GetPool6sBySubnet:output_type -> GetPool6sResponse
	26, // 78: DhcpService.GetReservedPool4sBySubnet:output_type -> GetReservedPool4sResponse
	37, // 79: DhcpService.GetReservedPool6sBySubnet:output_type -> GetReservedPool6sResponse
	27, // 80: DhcpService.GetReservation4sBySubnet:output_type -> GetReservationPool4sResponse
	38, // 81: DhcpService.GetReservation6sBySubnet:output_type -> GetReservationPool6sResponse
	34, // 82: DhcpService.GetLease4sBySubnet:output_type -> GetLease4sBySubnetResponse
	40, // 83: DhcpService.GetLease6sBySubnet:output_type -> GetLease6sBySubnetResponse
	41, // 84: DhcpService.GetPdPools6sBySubnet:output_type -> GetPdPoolsBySubnetResponse
	33, // 85: DhcpService.GetLease4ByIp:output_type -> GetLease4ByIpResponse
	39, // 86: DhcpService.GetLease6ByIp:output_type -> GetLease6ByIpResponse
	47, // 87: DhcpService.CreateReservation4s:output_type -> CreateReservation4sResponse
	49, // 88: DhcpService.CreateReservedPool4s:output_type -> CreateReservedPool4sResponse
	51, // 89: DhcpService.CreateReservation6s:output_type -> CreateReservation6sResponse
	53, // 90: DhcpService.CreateReservedPool6s:output_type -> CreateReservedPool6sResponse
	64, // [64:91] is the sub-list for method output_type
	37, // [37:64] is the sub-list for method input_type
	37, // [37:37] is the sub-list for extension type_name
	37, // [37:37] is the sub-list for extension extendee
	0,  // [0:37] is the sub-list for field type_name
}

func init() { file_dhcp_proto_init() }
func file_dhcp_proto_init() {
	if File_dhcp_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_dhcp_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSubnet4WithIpRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Subnet4); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSubnet4WithIpResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSubnet6WithIpRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Subnet6); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSubnet6WithIpResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSubnets4WithIpsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSubnets4WithIpsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSubnets6WithIpsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSubnets6WithIpsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSubnet4AndLease4WithIpRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Lease4); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ipv4Information); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSubnet4AndLease4WithIpResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSubnet6AndLease6WithIpRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Lease6); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ipv6Information); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSubnet6AndLease6WithIpResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSubnets4AndLeases4WithIpsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSubnets4AndLeases4WithIpsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSubnets6AndLeases6WithIpsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSubnets6AndLeases6WithIpsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSubnetsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSubnet4SResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSubnetPoolsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPool4SResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetReservedPool4SResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetReservationPool4SResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Pool4); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReservedPool4); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Reservation4); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLeasesBySubnetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLeaseByIpRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLease4ByIpResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLease4SBySubnetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSubnet6SResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPool6SResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetReservedPool6SResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetReservationPool6SResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLease6ByIpResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLease6SBySubnetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPdPoolsBySubnetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Pool6); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReservedPool6); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Reservation6); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PdPool6); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateReservation4SRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateReservation4SResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateReservedPool4SRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateReservedPool4SResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateReservation6SRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateReservation6SResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateReservedPool6SRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateReservedPool6SResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_dhcp_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   62,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_dhcp_proto_goTypes,
		DependencyIndexes: file_dhcp_proto_depIdxs,
		MessageInfos:      file_dhcp_proto_msgTypes,
	}.Build()
	File_dhcp_proto = out.File
	file_dhcp_proto_rawDesc = nil
	file_dhcp_proto_goTypes = nil
	file_dhcp_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// DhcpServiceClient is the client API for DhcpService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DhcpServiceClient interface {
	GetSubnet4WithIp(ctx context.Context, in *GetSubnet4WithIpRequest, opts ...grpc.CallOption) (*GetSubnet4WithIpResponse, error)
	GetSubnet6WithIp(ctx context.Context, in *GetSubnet6WithIpRequest, opts ...grpc.CallOption) (*GetSubnet6WithIpResponse, error)
	GetSubnets4WithIps(ctx context.Context, in *GetSubnets4WithIpsRequest, opts ...grpc.CallOption) (*GetSubnets4WithIpsResponse, error)
	GetSubnets6WithIps(ctx context.Context, in *GetSubnets6WithIpsRequest, opts ...grpc.CallOption) (*GetSubnets6WithIpsResponse, error)
	GetSubnet4AndLease4WithIp(ctx context.Context, in *GetSubnet4AndLease4WithIpRequest, opts ...grpc.CallOption) (*GetSubnet4AndLease4WithIpResponse, error)
	GetSubnet6AndLease6WithIp(ctx context.Context, in *GetSubnet6AndLease6WithIpRequest, opts ...grpc.CallOption) (*GetSubnet6AndLease6WithIpResponse, error)
	GetSubnets4AndLeases4WithIps(ctx context.Context, in *GetSubnets4AndLeases4WithIpsRequest, opts ...grpc.CallOption) (*GetSubnets4AndLeases4WithIpsResponse, error)
	GetSubnets6AndLeases6WithIps(ctx context.Context, in *GetSubnets6AndLeases6WithIpsRequest, opts ...grpc.CallOption) (*GetSubnets6AndLeases6WithIpsResponse, error)
	GetAllSubnet4S(ctx context.Context, in *GetSubnetsRequest, opts ...grpc.CallOption) (*GetSubnet4SResponse, error)
	GetAllSubnet6S(ctx context.Context, in *GetSubnetsRequest, opts ...grpc.CallOption) (*GetSubnet6SResponse, error)
	GetSubnet4SByPrefixes(ctx context.Context, in *GetSubnetsRequest, opts ...grpc.CallOption) (*GetSubnet4SResponse, error)
	GetSubnet6SByPrefixes(ctx context.Context, in *GetSubnetsRequest, opts ...grpc.CallOption) (*GetSubnet6SResponse, error)
	GetPool4SBySubnet(ctx context.Context, in *GetSubnetPoolsRequest, opts ...grpc.CallOption) (*GetPool4SResponse, error)
	GetPool6SBySubnet(ctx context.Context, in *GetSubnetPoolsRequest, opts ...grpc.CallOption) (*GetPool6SResponse, error)
	GetReservedPool4SBySubnet(ctx context.Context, in *GetSubnetPoolsRequest, opts ...grpc.CallOption) (*GetReservedPool4SResponse, error)
	GetReservedPool6SBySubnet(ctx context.Context, in *GetSubnetPoolsRequest, opts ...grpc.CallOption) (*GetReservedPool6SResponse, error)
	GetReservation4SBySubnet(ctx context.Context, in *GetSubnetPoolsRequest, opts ...grpc.CallOption) (*GetReservationPool4SResponse, error)
	GetReservation6SBySubnet(ctx context.Context, in *GetSubnetPoolsRequest, opts ...grpc.CallOption) (*GetReservationPool6SResponse, error)
	GetLease4SBySubnet(ctx context.Context, in *GetLeasesBySubnetRequest, opts ...grpc.CallOption) (*GetLease4SBySubnetResponse, error)
	GetLease6SBySubnet(ctx context.Context, in *GetLeasesBySubnetRequest, opts ...grpc.CallOption) (*GetLease6SBySubnetResponse, error)
	GetPdPools6SBySubnet(ctx context.Context, in *GetSubnetPoolsRequest, opts ...grpc.CallOption) (*GetPdPoolsBySubnetResponse, error)
	GetLease4ByIp(ctx context.Context, in *GetLeaseByIpRequest, opts ...grpc.CallOption) (*GetLease4ByIpResponse, error)
	GetLease6ByIp(ctx context.Context, in *GetLeaseByIpRequest, opts ...grpc.CallOption) (*GetLease6ByIpResponse, error)
	CreateReservation4S(ctx context.Context, in *CreateReservation4SRequest, opts ...grpc.CallOption) (*CreateReservation4SResponse, error)
	CreateReservedPool4S(ctx context.Context, in *CreateReservedPool4SRequest, opts ...grpc.CallOption) (*CreateReservedPool4SResponse, error)
	CreateReservation6S(ctx context.Context, in *CreateReservation6SRequest, opts ...grpc.CallOption) (*CreateReservation6SResponse, error)
	CreateReservedPool6S(ctx context.Context, in *CreateReservedPool6SRequest, opts ...grpc.CallOption) (*CreateReservedPool6SResponse, error)
}

type dhcpServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDhcpServiceClient(cc grpc.ClientConnInterface) DhcpServiceClient {
	return &dhcpServiceClient{cc}
}

func (c *dhcpServiceClient) GetSubnet4WithIp(ctx context.Context, in *GetSubnet4WithIpRequest, opts ...grpc.CallOption) (*GetSubnet4WithIpResponse, error) {
	out := new(GetSubnet4WithIpResponse)
	err := c.cc.Invoke(ctx, "/DhcpService/GetSubnet4WithIp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dhcpServiceClient) GetSubnet6WithIp(ctx context.Context, in *GetSubnet6WithIpRequest, opts ...grpc.CallOption) (*GetSubnet6WithIpResponse, error) {
	out := new(GetSubnet6WithIpResponse)
	err := c.cc.Invoke(ctx, "/DhcpService/GetSubnet6WithIp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dhcpServiceClient) GetSubnets4WithIps(ctx context.Context, in *GetSubnets4WithIpsRequest, opts ...grpc.CallOption) (*GetSubnets4WithIpsResponse, error) {
	out := new(GetSubnets4WithIpsResponse)
	err := c.cc.Invoke(ctx, "/DhcpService/GetSubnets4WithIps", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dhcpServiceClient) GetSubnets6WithIps(ctx context.Context, in *GetSubnets6WithIpsRequest, opts ...grpc.CallOption) (*GetSubnets6WithIpsResponse, error) {
	out := new(GetSubnets6WithIpsResponse)
	err := c.cc.Invoke(ctx, "/DhcpService/GetSubnets6WithIps", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dhcpServiceClient) GetSubnet4AndLease4WithIp(ctx context.Context, in *GetSubnet4AndLease4WithIpRequest, opts ...grpc.CallOption) (*GetSubnet4AndLease4WithIpResponse, error) {
	out := new(GetSubnet4AndLease4WithIpResponse)
	err := c.cc.Invoke(ctx, "/DhcpService/GetSubnet4AndLease4WithIp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dhcpServiceClient) GetSubnet6AndLease6WithIp(ctx context.Context, in *GetSubnet6AndLease6WithIpRequest, opts ...grpc.CallOption) (*GetSubnet6AndLease6WithIpResponse, error) {
	out := new(GetSubnet6AndLease6WithIpResponse)
	err := c.cc.Invoke(ctx, "/DhcpService/GetSubnet6AndLease6WithIp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dhcpServiceClient) GetSubnets4AndLeases4WithIps(ctx context.Context, in *GetSubnets4AndLeases4WithIpsRequest, opts ...grpc.CallOption) (*GetSubnets4AndLeases4WithIpsResponse, error) {
	out := new(GetSubnets4AndLeases4WithIpsResponse)
	err := c.cc.Invoke(ctx, "/DhcpService/GetSubnets4AndLeases4WithIps", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dhcpServiceClient) GetSubnets6AndLeases6WithIps(ctx context.Context, in *GetSubnets6AndLeases6WithIpsRequest, opts ...grpc.CallOption) (*GetSubnets6AndLeases6WithIpsResponse, error) {
	out := new(GetSubnets6AndLeases6WithIpsResponse)
	err := c.cc.Invoke(ctx, "/DhcpService/GetSubnets6AndLeases6WithIps", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dhcpServiceClient) GetAllSubnet4S(ctx context.Context, in *GetSubnetsRequest, opts ...grpc.CallOption) (*GetSubnet4SResponse, error) {
	out := new(GetSubnet4SResponse)
	err := c.cc.Invoke(ctx, "/DhcpService/GetAllSubnet4s", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dhcpServiceClient) GetAllSubnet6S(ctx context.Context, in *GetSubnetsRequest, opts ...grpc.CallOption) (*GetSubnet6SResponse, error) {
	out := new(GetSubnet6SResponse)
	err := c.cc.Invoke(ctx, "/DhcpService/GetAllSubnet6s", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dhcpServiceClient) GetSubnet4SByPrefixes(ctx context.Context, in *GetSubnetsRequest, opts ...grpc.CallOption) (*GetSubnet4SResponse, error) {
	out := new(GetSubnet4SResponse)
	err := c.cc.Invoke(ctx, "/DhcpService/GetSubnet4sByPrefixes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dhcpServiceClient) GetSubnet6SByPrefixes(ctx context.Context, in *GetSubnetsRequest, opts ...grpc.CallOption) (*GetSubnet6SResponse, error) {
	out := new(GetSubnet6SResponse)
	err := c.cc.Invoke(ctx, "/DhcpService/GetSubnet6sByPrefixes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dhcpServiceClient) GetPool4SBySubnet(ctx context.Context, in *GetSubnetPoolsRequest, opts ...grpc.CallOption) (*GetPool4SResponse, error) {
	out := new(GetPool4SResponse)
	err := c.cc.Invoke(ctx, "/DhcpService/GetPool4sBySubnet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dhcpServiceClient) GetPool6SBySubnet(ctx context.Context, in *GetSubnetPoolsRequest, opts ...grpc.CallOption) (*GetPool6SResponse, error) {
	out := new(GetPool6SResponse)
	err := c.cc.Invoke(ctx, "/DhcpService/GetPool6sBySubnet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dhcpServiceClient) GetReservedPool4SBySubnet(ctx context.Context, in *GetSubnetPoolsRequest, opts ...grpc.CallOption) (*GetReservedPool4SResponse, error) {
	out := new(GetReservedPool4SResponse)
	err := c.cc.Invoke(ctx, "/DhcpService/GetReservedPool4sBySubnet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dhcpServiceClient) GetReservedPool6SBySubnet(ctx context.Context, in *GetSubnetPoolsRequest, opts ...grpc.CallOption) (*GetReservedPool6SResponse, error) {
	out := new(GetReservedPool6SResponse)
	err := c.cc.Invoke(ctx, "/DhcpService/GetReservedPool6sBySubnet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dhcpServiceClient) GetReservation4SBySubnet(ctx context.Context, in *GetSubnetPoolsRequest, opts ...grpc.CallOption) (*GetReservationPool4SResponse, error) {
	out := new(GetReservationPool4SResponse)
	err := c.cc.Invoke(ctx, "/DhcpService/GetReservation4sBySubnet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dhcpServiceClient) GetReservation6SBySubnet(ctx context.Context, in *GetSubnetPoolsRequest, opts ...grpc.CallOption) (*GetReservationPool6SResponse, error) {
	out := new(GetReservationPool6SResponse)
	err := c.cc.Invoke(ctx, "/DhcpService/GetReservation6sBySubnet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dhcpServiceClient) GetLease4SBySubnet(ctx context.Context, in *GetLeasesBySubnetRequest, opts ...grpc.CallOption) (*GetLease4SBySubnetResponse, error) {
	out := new(GetLease4SBySubnetResponse)
	err := c.cc.Invoke(ctx, "/DhcpService/GetLease4sBySubnet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dhcpServiceClient) GetLease6SBySubnet(ctx context.Context, in *GetLeasesBySubnetRequest, opts ...grpc.CallOption) (*GetLease6SBySubnetResponse, error) {
	out := new(GetLease6SBySubnetResponse)
	err := c.cc.Invoke(ctx, "/DhcpService/GetLease6sBySubnet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dhcpServiceClient) GetPdPools6SBySubnet(ctx context.Context, in *GetSubnetPoolsRequest, opts ...grpc.CallOption) (*GetPdPoolsBySubnetResponse, error) {
	out := new(GetPdPoolsBySubnetResponse)
	err := c.cc.Invoke(ctx, "/DhcpService/GetPdPools6sBySubnet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dhcpServiceClient) GetLease4ByIp(ctx context.Context, in *GetLeaseByIpRequest, opts ...grpc.CallOption) (*GetLease4ByIpResponse, error) {
	out := new(GetLease4ByIpResponse)
	err := c.cc.Invoke(ctx, "/DhcpService/GetLease4ByIp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dhcpServiceClient) GetLease6ByIp(ctx context.Context, in *GetLeaseByIpRequest, opts ...grpc.CallOption) (*GetLease6ByIpResponse, error) {
	out := new(GetLease6ByIpResponse)
	err := c.cc.Invoke(ctx, "/DhcpService/GetLease6ByIp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dhcpServiceClient) CreateReservation4S(ctx context.Context, in *CreateReservation4SRequest, opts ...grpc.CallOption) (*CreateReservation4SResponse, error) {
	out := new(CreateReservation4SResponse)
	err := c.cc.Invoke(ctx, "/DhcpService/CreateReservation4s", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dhcpServiceClient) CreateReservedPool4S(ctx context.Context, in *CreateReservedPool4SRequest, opts ...grpc.CallOption) (*CreateReservedPool4SResponse, error) {
	out := new(CreateReservedPool4SResponse)
	err := c.cc.Invoke(ctx, "/DhcpService/CreateReservedPool4s", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dhcpServiceClient) CreateReservation6S(ctx context.Context, in *CreateReservation6SRequest, opts ...grpc.CallOption) (*CreateReservation6SResponse, error) {
	out := new(CreateReservation6SResponse)
	err := c.cc.Invoke(ctx, "/DhcpService/CreateReservation6s", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dhcpServiceClient) CreateReservedPool6S(ctx context.Context, in *CreateReservedPool6SRequest, opts ...grpc.CallOption) (*CreateReservedPool6SResponse, error) {
	out := new(CreateReservedPool6SResponse)
	err := c.cc.Invoke(ctx, "/DhcpService/CreateReservedPool6s", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DhcpServiceServer is the server API for DhcpService service.
type DhcpServiceServer interface {
	GetSubnet4WithIp(context.Context, *GetSubnet4WithIpRequest) (*GetSubnet4WithIpResponse, error)
	GetSubnet6WithIp(context.Context, *GetSubnet6WithIpRequest) (*GetSubnet6WithIpResponse, error)
	GetSubnets4WithIps(context.Context, *GetSubnets4WithIpsRequest) (*GetSubnets4WithIpsResponse, error)
	GetSubnets6WithIps(context.Context, *GetSubnets6WithIpsRequest) (*GetSubnets6WithIpsResponse, error)
	GetSubnet4AndLease4WithIp(context.Context, *GetSubnet4AndLease4WithIpRequest) (*GetSubnet4AndLease4WithIpResponse, error)
	GetSubnet6AndLease6WithIp(context.Context, *GetSubnet6AndLease6WithIpRequest) (*GetSubnet6AndLease6WithIpResponse, error)
	GetSubnets4AndLeases4WithIps(context.Context, *GetSubnets4AndLeases4WithIpsRequest) (*GetSubnets4AndLeases4WithIpsResponse, error)
	GetSubnets6AndLeases6WithIps(context.Context, *GetSubnets6AndLeases6WithIpsRequest) (*GetSubnets6AndLeases6WithIpsResponse, error)
	GetAllSubnet4S(context.Context, *GetSubnetsRequest) (*GetSubnet4SResponse, error)
	GetAllSubnet6S(context.Context, *GetSubnetsRequest) (*GetSubnet6SResponse, error)
	GetSubnet4SByPrefixes(context.Context, *GetSubnetsRequest) (*GetSubnet4SResponse, error)
	GetSubnet6SByPrefixes(context.Context, *GetSubnetsRequest) (*GetSubnet6SResponse, error)
	GetPool4SBySubnet(context.Context, *GetSubnetPoolsRequest) (*GetPool4SResponse, error)
	GetPool6SBySubnet(context.Context, *GetSubnetPoolsRequest) (*GetPool6SResponse, error)
	GetReservedPool4SBySubnet(context.Context, *GetSubnetPoolsRequest) (*GetReservedPool4SResponse, error)
	GetReservedPool6SBySubnet(context.Context, *GetSubnetPoolsRequest) (*GetReservedPool6SResponse, error)
	GetReservation4SBySubnet(context.Context, *GetSubnetPoolsRequest) (*GetReservationPool4SResponse, error)
	GetReservation6SBySubnet(context.Context, *GetSubnetPoolsRequest) (*GetReservationPool6SResponse, error)
	GetLease4SBySubnet(context.Context, *GetLeasesBySubnetRequest) (*GetLease4SBySubnetResponse, error)
	GetLease6SBySubnet(context.Context, *GetLeasesBySubnetRequest) (*GetLease6SBySubnetResponse, error)
	GetPdPools6SBySubnet(context.Context, *GetSubnetPoolsRequest) (*GetPdPoolsBySubnetResponse, error)
	GetLease4ByIp(context.Context, *GetLeaseByIpRequest) (*GetLease4ByIpResponse, error)
	GetLease6ByIp(context.Context, *GetLeaseByIpRequest) (*GetLease6ByIpResponse, error)
	CreateReservation4S(context.Context, *CreateReservation4SRequest) (*CreateReservation4SResponse, error)
	CreateReservedPool4S(context.Context, *CreateReservedPool4SRequest) (*CreateReservedPool4SResponse, error)
	CreateReservation6S(context.Context, *CreateReservation6SRequest) (*CreateReservation6SResponse, error)
	CreateReservedPool6S(context.Context, *CreateReservedPool6SRequest) (*CreateReservedPool6SResponse, error)
}

// UnimplementedDhcpServiceServer can be embedded to have forward compatible implementations.
type UnimplementedDhcpServiceServer struct {
}

func (*UnimplementedDhcpServiceServer) GetSubnet4WithIp(context.Context, *GetSubnet4WithIpRequest) (*GetSubnet4WithIpResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSubnet4WithIp not implemented")
}
func (*UnimplementedDhcpServiceServer) GetSubnet6WithIp(context.Context, *GetSubnet6WithIpRequest) (*GetSubnet6WithIpResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSubnet6WithIp not implemented")
}
func (*UnimplementedDhcpServiceServer) GetSubnets4WithIps(context.Context, *GetSubnets4WithIpsRequest) (*GetSubnets4WithIpsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSubnets4WithIps not implemented")
}
func (*UnimplementedDhcpServiceServer) GetSubnets6WithIps(context.Context, *GetSubnets6WithIpsRequest) (*GetSubnets6WithIpsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSubnets6WithIps not implemented")
}
func (*UnimplementedDhcpServiceServer) GetSubnet4AndLease4WithIp(context.Context, *GetSubnet4AndLease4WithIpRequest) (*GetSubnet4AndLease4WithIpResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSubnet4AndLease4WithIp not implemented")
}
func (*UnimplementedDhcpServiceServer) GetSubnet6AndLease6WithIp(context.Context, *GetSubnet6AndLease6WithIpRequest) (*GetSubnet6AndLease6WithIpResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSubnet6AndLease6WithIp not implemented")
}
func (*UnimplementedDhcpServiceServer) GetSubnets4AndLeases4WithIps(context.Context, *GetSubnets4AndLeases4WithIpsRequest) (*GetSubnets4AndLeases4WithIpsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSubnets4AndLeases4WithIps not implemented")
}
func (*UnimplementedDhcpServiceServer) GetSubnets6AndLeases6WithIps(context.Context, *GetSubnets6AndLeases6WithIpsRequest) (*GetSubnets6AndLeases6WithIpsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSubnets6AndLeases6WithIps not implemented")
}
func (*UnimplementedDhcpServiceServer) GetAllSubnet4S(context.Context, *GetSubnetsRequest) (*GetSubnet4SResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllSubnet4S not implemented")
}
func (*UnimplementedDhcpServiceServer) GetAllSubnet6S(context.Context, *GetSubnetsRequest) (*GetSubnet6SResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllSubnet6S not implemented")
}
func (*UnimplementedDhcpServiceServer) GetSubnet4SByPrefixes(context.Context, *GetSubnetsRequest) (*GetSubnet4SResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSubnet4SByPrefixes not implemented")
}
func (*UnimplementedDhcpServiceServer) GetSubnet6SByPrefixes(context.Context, *GetSubnetsRequest) (*GetSubnet6SResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSubnet6SByPrefixes not implemented")
}
func (*UnimplementedDhcpServiceServer) GetPool4SBySubnet(context.Context, *GetSubnetPoolsRequest) (*GetPool4SResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPool4SBySubnet not implemented")
}
func (*UnimplementedDhcpServiceServer) GetPool6SBySubnet(context.Context, *GetSubnetPoolsRequest) (*GetPool6SResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPool6SBySubnet not implemented")
}
func (*UnimplementedDhcpServiceServer) GetReservedPool4SBySubnet(context.Context, *GetSubnetPoolsRequest) (*GetReservedPool4SResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReservedPool4SBySubnet not implemented")
}
func (*UnimplementedDhcpServiceServer) GetReservedPool6SBySubnet(context.Context, *GetSubnetPoolsRequest) (*GetReservedPool6SResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReservedPool6SBySubnet not implemented")
}
func (*UnimplementedDhcpServiceServer) GetReservation4SBySubnet(context.Context, *GetSubnetPoolsRequest) (*GetReservationPool4SResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReservation4SBySubnet not implemented")
}
func (*UnimplementedDhcpServiceServer) GetReservation6SBySubnet(context.Context, *GetSubnetPoolsRequest) (*GetReservationPool6SResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReservation6SBySubnet not implemented")
}
func (*UnimplementedDhcpServiceServer) GetLease4SBySubnet(context.Context, *GetLeasesBySubnetRequest) (*GetLease4SBySubnetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLease4SBySubnet not implemented")
}
func (*UnimplementedDhcpServiceServer) GetLease6SBySubnet(context.Context, *GetLeasesBySubnetRequest) (*GetLease6SBySubnetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLease6SBySubnet not implemented")
}
func (*UnimplementedDhcpServiceServer) GetPdPools6SBySubnet(context.Context, *GetSubnetPoolsRequest) (*GetPdPoolsBySubnetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPdPools6SBySubnet not implemented")
}
func (*UnimplementedDhcpServiceServer) GetLease4ByIp(context.Context, *GetLeaseByIpRequest) (*GetLease4ByIpResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLease4ByIp not implemented")
}
func (*UnimplementedDhcpServiceServer) GetLease6ByIp(context.Context, *GetLeaseByIpRequest) (*GetLease6ByIpResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLease6ByIp not implemented")
}
func (*UnimplementedDhcpServiceServer) CreateReservation4S(context.Context, *CreateReservation4SRequest) (*CreateReservation4SResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateReservation4S not implemented")
}
func (*UnimplementedDhcpServiceServer) CreateReservedPool4S(context.Context, *CreateReservedPool4SRequest) (*CreateReservedPool4SResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateReservedPool4S not implemented")
}
func (*UnimplementedDhcpServiceServer) CreateReservation6S(context.Context, *CreateReservation6SRequest) (*CreateReservation6SResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateReservation6S not implemented")
}
func (*UnimplementedDhcpServiceServer) CreateReservedPool6S(context.Context, *CreateReservedPool6SRequest) (*CreateReservedPool6SResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateReservedPool6S not implemented")
}

func RegisterDhcpServiceServer(s *grpc.Server, srv DhcpServiceServer) {
	s.RegisterService(&_DhcpService_serviceDesc, srv)
}

func _DhcpService_GetSubnet4WithIp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSubnet4WithIpRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DhcpServiceServer).GetSubnet4WithIp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DhcpService/GetSubnet4WithIp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DhcpServiceServer).GetSubnet4WithIp(ctx, req.(*GetSubnet4WithIpRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DhcpService_GetSubnet6WithIp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSubnet6WithIpRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DhcpServiceServer).GetSubnet6WithIp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DhcpService/GetSubnet6WithIp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DhcpServiceServer).GetSubnet6WithIp(ctx, req.(*GetSubnet6WithIpRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DhcpService_GetSubnets4WithIps_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSubnets4WithIpsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DhcpServiceServer).GetSubnets4WithIps(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DhcpService/GetSubnets4WithIps",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DhcpServiceServer).GetSubnets4WithIps(ctx, req.(*GetSubnets4WithIpsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DhcpService_GetSubnets6WithIps_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSubnets6WithIpsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DhcpServiceServer).GetSubnets6WithIps(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DhcpService/GetSubnets6WithIps",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DhcpServiceServer).GetSubnets6WithIps(ctx, req.(*GetSubnets6WithIpsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DhcpService_GetSubnet4AndLease4WithIp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSubnet4AndLease4WithIpRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DhcpServiceServer).GetSubnet4AndLease4WithIp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DhcpService/GetSubnet4AndLease4WithIp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DhcpServiceServer).GetSubnet4AndLease4WithIp(ctx, req.(*GetSubnet4AndLease4WithIpRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DhcpService_GetSubnet6AndLease6WithIp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSubnet6AndLease6WithIpRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DhcpServiceServer).GetSubnet6AndLease6WithIp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DhcpService/GetSubnet6AndLease6WithIp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DhcpServiceServer).GetSubnet6AndLease6WithIp(ctx, req.(*GetSubnet6AndLease6WithIpRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DhcpService_GetSubnets4AndLeases4WithIps_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSubnets4AndLeases4WithIpsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DhcpServiceServer).GetSubnets4AndLeases4WithIps(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DhcpService/GetSubnets4AndLeases4WithIps",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DhcpServiceServer).GetSubnets4AndLeases4WithIps(ctx, req.(*GetSubnets4AndLeases4WithIpsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DhcpService_GetSubnets6AndLeases6WithIps_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSubnets6AndLeases6WithIpsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DhcpServiceServer).GetSubnets6AndLeases6WithIps(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DhcpService/GetSubnets6AndLeases6WithIps",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DhcpServiceServer).GetSubnets6AndLeases6WithIps(ctx, req.(*GetSubnets6AndLeases6WithIpsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DhcpService_GetAllSubnet4S_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSubnetsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DhcpServiceServer).GetAllSubnet4S(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DhcpService/GetAllSubnet4S",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DhcpServiceServer).GetAllSubnet4S(ctx, req.(*GetSubnetsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DhcpService_GetAllSubnet6S_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSubnetsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DhcpServiceServer).GetAllSubnet6S(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DhcpService/GetAllSubnet6S",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DhcpServiceServer).GetAllSubnet6S(ctx, req.(*GetSubnetsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DhcpService_GetSubnet4SByPrefixes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSubnetsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DhcpServiceServer).GetSubnet4SByPrefixes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DhcpService/GetSubnet4SByPrefixes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DhcpServiceServer).GetSubnet4SByPrefixes(ctx, req.(*GetSubnetsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DhcpService_GetSubnet6SByPrefixes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSubnetsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DhcpServiceServer).GetSubnet6SByPrefixes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DhcpService/GetSubnet6SByPrefixes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DhcpServiceServer).GetSubnet6SByPrefixes(ctx, req.(*GetSubnetsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DhcpService_GetPool4SBySubnet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSubnetPoolsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DhcpServiceServer).GetPool4SBySubnet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DhcpService/GetPool4SBySubnet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DhcpServiceServer).GetPool4SBySubnet(ctx, req.(*GetSubnetPoolsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DhcpService_GetPool6SBySubnet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSubnetPoolsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DhcpServiceServer).GetPool6SBySubnet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DhcpService/GetPool6SBySubnet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DhcpServiceServer).GetPool6SBySubnet(ctx, req.(*GetSubnetPoolsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DhcpService_GetReservedPool4SBySubnet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSubnetPoolsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DhcpServiceServer).GetReservedPool4SBySubnet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DhcpService/GetReservedPool4SBySubnet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DhcpServiceServer).GetReservedPool4SBySubnet(ctx, req.(*GetSubnetPoolsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DhcpService_GetReservedPool6SBySubnet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSubnetPoolsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DhcpServiceServer).GetReservedPool6SBySubnet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DhcpService/GetReservedPool6SBySubnet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DhcpServiceServer).GetReservedPool6SBySubnet(ctx, req.(*GetSubnetPoolsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DhcpService_GetReservation4SBySubnet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSubnetPoolsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DhcpServiceServer).GetReservation4SBySubnet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DhcpService/GetReservation4SBySubnet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DhcpServiceServer).GetReservation4SBySubnet(ctx, req.(*GetSubnetPoolsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DhcpService_GetReservation6SBySubnet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSubnetPoolsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DhcpServiceServer).GetReservation6SBySubnet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DhcpService/GetReservation6SBySubnet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DhcpServiceServer).GetReservation6SBySubnet(ctx, req.(*GetSubnetPoolsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DhcpService_GetLease4SBySubnet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLeasesBySubnetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DhcpServiceServer).GetLease4SBySubnet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DhcpService/GetLease4SBySubnet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DhcpServiceServer).GetLease4SBySubnet(ctx, req.(*GetLeasesBySubnetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DhcpService_GetLease6SBySubnet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLeasesBySubnetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DhcpServiceServer).GetLease6SBySubnet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DhcpService/GetLease6SBySubnet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DhcpServiceServer).GetLease6SBySubnet(ctx, req.(*GetLeasesBySubnetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DhcpService_GetPdPools6SBySubnet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSubnetPoolsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DhcpServiceServer).GetPdPools6SBySubnet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DhcpService/GetPdPools6SBySubnet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DhcpServiceServer).GetPdPools6SBySubnet(ctx, req.(*GetSubnetPoolsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DhcpService_GetLease4ByIp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLeaseByIpRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DhcpServiceServer).GetLease4ByIp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DhcpService/GetLease4ByIp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DhcpServiceServer).GetLease4ByIp(ctx, req.(*GetLeaseByIpRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DhcpService_GetLease6ByIp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLeaseByIpRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DhcpServiceServer).GetLease6ByIp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DhcpService/GetLease6ByIp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DhcpServiceServer).GetLease6ByIp(ctx, req.(*GetLeaseByIpRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DhcpService_CreateReservation4S_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateReservation4SRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DhcpServiceServer).CreateReservation4S(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DhcpService/CreateReservation4S",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DhcpServiceServer).CreateReservation4S(ctx, req.(*CreateReservation4SRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DhcpService_CreateReservedPool4S_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateReservedPool4SRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DhcpServiceServer).CreateReservedPool4S(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DhcpService/CreateReservedPool4S",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DhcpServiceServer).CreateReservedPool4S(ctx, req.(*CreateReservedPool4SRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DhcpService_CreateReservation6S_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateReservation6SRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DhcpServiceServer).CreateReservation6S(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DhcpService/CreateReservation6S",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DhcpServiceServer).CreateReservation6S(ctx, req.(*CreateReservation6SRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DhcpService_CreateReservedPool6S_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateReservedPool6SRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DhcpServiceServer).CreateReservedPool6S(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DhcpService/CreateReservedPool6S",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DhcpServiceServer).CreateReservedPool6S(ctx, req.(*CreateReservedPool6SRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _DhcpService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "DhcpService",
	HandlerType: (*DhcpServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSubnet4WithIp",
			Handler:    _DhcpService_GetSubnet4WithIp_Handler,
		},
		{
			MethodName: "GetSubnet6WithIp",
			Handler:    _DhcpService_GetSubnet6WithIp_Handler,
		},
		{
			MethodName: "GetSubnets4WithIps",
			Handler:    _DhcpService_GetSubnets4WithIps_Handler,
		},
		{
			MethodName: "GetSubnets6WithIps",
			Handler:    _DhcpService_GetSubnets6WithIps_Handler,
		},
		{
			MethodName: "GetSubnet4AndLease4WithIp",
			Handler:    _DhcpService_GetSubnet4AndLease4WithIp_Handler,
		},
		{
			MethodName: "GetSubnet6AndLease6WithIp",
			Handler:    _DhcpService_GetSubnet6AndLease6WithIp_Handler,
		},
		{
			MethodName: "GetSubnets4AndLeases4WithIps",
			Handler:    _DhcpService_GetSubnets4AndLeases4WithIps_Handler,
		},
		{
			MethodName: "GetSubnets6AndLeases6WithIps",
			Handler:    _DhcpService_GetSubnets6AndLeases6WithIps_Handler,
		},
		{
			MethodName: "GetAllSubnet4s",
			Handler:    _DhcpService_GetAllSubnet4S_Handler,
		},
		{
			MethodName: "GetAllSubnet6s",
			Handler:    _DhcpService_GetAllSubnet6S_Handler,
		},
		{
			MethodName: "GetSubnet4sByPrefixes",
			Handler:    _DhcpService_GetSubnet4SByPrefixes_Handler,
		},
		{
			MethodName: "GetSubnet6sByPrefixes",
			Handler:    _DhcpService_GetSubnet6SByPrefixes_Handler,
		},
		{
			MethodName: "GetPool4sBySubnet",
			Handler:    _DhcpService_GetPool4SBySubnet_Handler,
		},
		{
			MethodName: "GetPool6sBySubnet",
			Handler:    _DhcpService_GetPool6SBySubnet_Handler,
		},
		{
			MethodName: "GetReservedPool4sBySubnet",
			Handler:    _DhcpService_GetReservedPool4SBySubnet_Handler,
		},
		{
			MethodName: "GetReservedPool6sBySubnet",
			Handler:    _DhcpService_GetReservedPool6SBySubnet_Handler,
		},
		{
			MethodName: "GetReservation4sBySubnet",
			Handler:    _DhcpService_GetReservation4SBySubnet_Handler,
		},
		{
			MethodName: "GetReservation6sBySubnet",
			Handler:    _DhcpService_GetReservation6SBySubnet_Handler,
		},
		{
			MethodName: "GetLease4sBySubnet",
			Handler:    _DhcpService_GetLease4SBySubnet_Handler,
		},
		{
			MethodName: "GetLease6sBySubnet",
			Handler:    _DhcpService_GetLease6SBySubnet_Handler,
		},
		{
			MethodName: "GetPdPools6sBySubnet",
			Handler:    _DhcpService_GetPdPools6SBySubnet_Handler,
		},
		{
			MethodName: "GetLease4ByIp",
			Handler:    _DhcpService_GetLease4ByIp_Handler,
		},
		{
			MethodName: "GetLease6ByIp",
			Handler:    _DhcpService_GetLease6ByIp_Handler,
		},
		{
			MethodName: "CreateReservation4s",
			Handler:    _DhcpService_CreateReservation4S_Handler,
		},
		{
			MethodName: "CreateReservedPool4s",
			Handler:    _DhcpService_CreateReservedPool4S_Handler,
		},
		{
			MethodName: "CreateReservation6s",
			Handler:    _DhcpService_CreateReservation6S_Handler,
		},
		{
			MethodName: "CreateReservedPool6s",
			Handler:    _DhcpService_CreateReservedPool6S_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dhcp.proto",
}
