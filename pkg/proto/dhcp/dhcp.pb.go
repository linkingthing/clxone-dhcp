// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.21.0
// 	protoc        v3.18.2
// source: dhcp.proto

package dhcp

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type GetSubnet4WithIpRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ip string `protobuf:"bytes,1,opt,name=ip,proto3" json:"ip,omitempty"`
}

func (x *GetSubnet4WithIpRequest) Reset() {
	*x = GetSubnet4WithIpRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSubnet4WithIpRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSubnet4WithIpRequest) ProtoMessage() {}

func (x *GetSubnet4WithIpRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSubnet4WithIpRequest.ProtoReflect.Descriptor instead.
func (*GetSubnet4WithIpRequest) Descriptor() ([]byte, []int) {
	return file_dhcp_proto_rawDescGZIP(), []int{0}
}

func (x *GetSubnet4WithIpRequest) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

type Subnet4 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Subnet        string   `protobuf:"bytes,2,opt,name=subnet,proto3" json:"subnet,omitempty"`
	SubnetId      uint64   `protobuf:"varint,3,opt,name=subnet_id,json=subnetId,proto3" json:"subnet_id,omitempty"`
	Capacity      uint64   `protobuf:"varint,4,opt,name=capacity,proto3" json:"capacity,omitempty"`
	UsedCount     uint64   `protobuf:"varint,5,opt,name=used_count,json=usedCount,proto3" json:"used_count,omitempty"`
	DomainServers []string `protobuf:"bytes,6,rep,name=domain_servers,json=domainServers,proto3" json:"domain_servers,omitempty"`
	Routers       []string `protobuf:"bytes,7,rep,name=routers,proto3" json:"routers,omitempty"`
	IpNet         string   `protobuf:"bytes,8,opt,name=ip_net,json=ipNet,proto3" json:"ip_net,omitempty"`
}

func (x *Subnet4) Reset() {
	*x = Subnet4{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Subnet4) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Subnet4) ProtoMessage() {}

func (x *Subnet4) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Subnet4.ProtoReflect.Descriptor instead.
func (*Subnet4) Descriptor() ([]byte, []int) {
	return file_dhcp_proto_rawDescGZIP(), []int{1}
}

func (x *Subnet4) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Subnet4) GetSubnet() string {
	if x != nil {
		return x.Subnet
	}
	return ""
}

func (x *Subnet4) GetSubnetId() uint64 {
	if x != nil {
		return x.SubnetId
	}
	return 0
}

func (x *Subnet4) GetCapacity() uint64 {
	if x != nil {
		return x.Capacity
	}
	return 0
}

func (x *Subnet4) GetUsedCount() uint64 {
	if x != nil {
		return x.UsedCount
	}
	return 0
}

func (x *Subnet4) GetDomainServers() []string {
	if x != nil {
		return x.DomainServers
	}
	return nil
}

func (x *Subnet4) GetRouters() []string {
	if x != nil {
		return x.Routers
	}
	return nil
}

func (x *Subnet4) GetIpNet() string {
	if x != nil {
		return x.IpNet
	}
	return ""
}

type GetSubnet4WithIpResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Succeed bool                `protobuf:"varint,1,opt,name=succeed,proto3" json:"succeed,omitempty"`
	Subnets map[string]*Subnet4 `protobuf:"bytes,2,rep,name=subnets,proto3" json:"subnets,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *GetSubnet4WithIpResponse) Reset() {
	*x = GetSubnet4WithIpResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSubnet4WithIpResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSubnet4WithIpResponse) ProtoMessage() {}

func (x *GetSubnet4WithIpResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSubnet4WithIpResponse.ProtoReflect.Descriptor instead.
func (*GetSubnet4WithIpResponse) Descriptor() ([]byte, []int) {
	return file_dhcp_proto_rawDescGZIP(), []int{2}
}

func (x *GetSubnet4WithIpResponse) GetSucceed() bool {
	if x != nil {
		return x.Succeed
	}
	return false
}

func (x *GetSubnet4WithIpResponse) GetSubnets() map[string]*Subnet4 {
	if x != nil {
		return x.Subnets
	}
	return nil
}

type GetSubnet6WithIpRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ip string `protobuf:"bytes,1,opt,name=ip,proto3" json:"ip,omitempty"`
}

func (x *GetSubnet6WithIpRequest) Reset() {
	*x = GetSubnet6WithIpRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSubnet6WithIpRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSubnet6WithIpRequest) ProtoMessage() {}

func (x *GetSubnet6WithIpRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSubnet6WithIpRequest.ProtoReflect.Descriptor instead.
func (*GetSubnet6WithIpRequest) Descriptor() ([]byte, []int) {
	return file_dhcp_proto_rawDescGZIP(), []int{3}
}

func (x *GetSubnet6WithIpRequest) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

type Subnet6 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Subnet        string   `protobuf:"bytes,2,opt,name=subnet,proto3" json:"subnet,omitempty"`
	SubnetId      uint64   `protobuf:"varint,3,opt,name=subnet_id,json=subnetId,proto3" json:"subnet_id,omitempty"`
	Capacity      uint64   `protobuf:"varint,4,opt,name=capacity,proto3" json:"capacity,omitempty"`
	UsedCount     uint64   `protobuf:"varint,5,opt,name=used_count,json=usedCount,proto3" json:"used_count,omitempty"`
	DomainServers []string `protobuf:"bytes,6,rep,name=domain_servers,json=domainServers,proto3" json:"domain_servers,omitempty"`
	UseEui64      bool     `protobuf:"varint,7,opt,name=use_eui64,json=useEui64,proto3" json:"use_eui64,omitempty"`
	IpNet         string   `protobuf:"bytes,8,opt,name=ip_net,json=ipNet,proto3" json:"ip_net,omitempty"`
}

func (x *Subnet6) Reset() {
	*x = Subnet6{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Subnet6) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Subnet6) ProtoMessage() {}

func (x *Subnet6) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Subnet6.ProtoReflect.Descriptor instead.
func (*Subnet6) Descriptor() ([]byte, []int) {
	return file_dhcp_proto_rawDescGZIP(), []int{4}
}

func (x *Subnet6) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Subnet6) GetSubnet() string {
	if x != nil {
		return x.Subnet
	}
	return ""
}

func (x *Subnet6) GetSubnetId() uint64 {
	if x != nil {
		return x.SubnetId
	}
	return 0
}

func (x *Subnet6) GetCapacity() uint64 {
	if x != nil {
		return x.Capacity
	}
	return 0
}

func (x *Subnet6) GetUsedCount() uint64 {
	if x != nil {
		return x.UsedCount
	}
	return 0
}

func (x *Subnet6) GetDomainServers() []string {
	if x != nil {
		return x.DomainServers
	}
	return nil
}

func (x *Subnet6) GetUseEui64() bool {
	if x != nil {
		return x.UseEui64
	}
	return false
}

func (x *Subnet6) GetIpNet() string {
	if x != nil {
		return x.IpNet
	}
	return ""
}

type GetSubnet6WithIpResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Succeed bool                `protobuf:"varint,1,opt,name=succeed,proto3" json:"succeed,omitempty"`
	Subnets map[string]*Subnet6 `protobuf:"bytes,2,rep,name=subnets,proto3" json:"subnets,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *GetSubnet6WithIpResponse) Reset() {
	*x = GetSubnet6WithIpResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSubnet6WithIpResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSubnet6WithIpResponse) ProtoMessage() {}

func (x *GetSubnet6WithIpResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSubnet6WithIpResponse.ProtoReflect.Descriptor instead.
func (*GetSubnet6WithIpResponse) Descriptor() ([]byte, []int) {
	return file_dhcp_proto_rawDescGZIP(), []int{5}
}

func (x *GetSubnet6WithIpResponse) GetSucceed() bool {
	if x != nil {
		return x.Succeed
	}
	return false
}

func (x *GetSubnet6WithIpResponse) GetSubnets() map[string]*Subnet6 {
	if x != nil {
		return x.Subnets
	}
	return nil
}

type GetSubnets4WithIpsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ips []string `protobuf:"bytes,1,rep,name=ips,proto3" json:"ips,omitempty"`
}

func (x *GetSubnets4WithIpsRequest) Reset() {
	*x = GetSubnets4WithIpsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSubnets4WithIpsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSubnets4WithIpsRequest) ProtoMessage() {}

func (x *GetSubnets4WithIpsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSubnets4WithIpsRequest.ProtoReflect.Descriptor instead.
func (*GetSubnets4WithIpsRequest) Descriptor() ([]byte, []int) {
	return file_dhcp_proto_rawDescGZIP(), []int{6}
}

func (x *GetSubnets4WithIpsRequest) GetIps() []string {
	if x != nil {
		return x.Ips
	}
	return nil
}

type GetSubnets4WithIpsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Succeed bool                `protobuf:"varint,1,opt,name=succeed,proto3" json:"succeed,omitempty"`
	Subnets map[string]*Subnet4 `protobuf:"bytes,2,rep,name=subnets,proto3" json:"subnets,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *GetSubnets4WithIpsResponse) Reset() {
	*x = GetSubnets4WithIpsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSubnets4WithIpsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSubnets4WithIpsResponse) ProtoMessage() {}

func (x *GetSubnets4WithIpsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSubnets4WithIpsResponse.ProtoReflect.Descriptor instead.
func (*GetSubnets4WithIpsResponse) Descriptor() ([]byte, []int) {
	return file_dhcp_proto_rawDescGZIP(), []int{7}
}

func (x *GetSubnets4WithIpsResponse) GetSucceed() bool {
	if x != nil {
		return x.Succeed
	}
	return false
}

func (x *GetSubnets4WithIpsResponse) GetSubnets() map[string]*Subnet4 {
	if x != nil {
		return x.Subnets
	}
	return nil
}

type GetSubnets6WithIpsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ips []string `protobuf:"bytes,1,rep,name=ips,proto3" json:"ips,omitempty"`
}

func (x *GetSubnets6WithIpsRequest) Reset() {
	*x = GetSubnets6WithIpsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSubnets6WithIpsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSubnets6WithIpsRequest) ProtoMessage() {}

func (x *GetSubnets6WithIpsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSubnets6WithIpsRequest.ProtoReflect.Descriptor instead.
func (*GetSubnets6WithIpsRequest) Descriptor() ([]byte, []int) {
	return file_dhcp_proto_rawDescGZIP(), []int{8}
}

func (x *GetSubnets6WithIpsRequest) GetIps() []string {
	if x != nil {
		return x.Ips
	}
	return nil
}

type GetSubnets6WithIpsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Succeed bool                `protobuf:"varint,1,opt,name=succeed,proto3" json:"succeed,omitempty"`
	Subnets map[string]*Subnet6 `protobuf:"bytes,2,rep,name=subnets,proto3" json:"subnets,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *GetSubnets6WithIpsResponse) Reset() {
	*x = GetSubnets6WithIpsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSubnets6WithIpsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSubnets6WithIpsResponse) ProtoMessage() {}

func (x *GetSubnets6WithIpsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSubnets6WithIpsResponse.ProtoReflect.Descriptor instead.
func (*GetSubnets6WithIpsResponse) Descriptor() ([]byte, []int) {
	return file_dhcp_proto_rawDescGZIP(), []int{9}
}

func (x *GetSubnets6WithIpsResponse) GetSucceed() bool {
	if x != nil {
		return x.Succeed
	}
	return false
}

func (x *GetSubnets6WithIpsResponse) GetSubnets() map[string]*Subnet6 {
	if x != nil {
		return x.Subnets
	}
	return nil
}

type GetSubnet4AndLease4WithIpRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ip string `protobuf:"bytes,1,opt,name=ip,proto3" json:"ip,omitempty"`
}

func (x *GetSubnet4AndLease4WithIpRequest) Reset() {
	*x = GetSubnet4AndLease4WithIpRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSubnet4AndLease4WithIpRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSubnet4AndLease4WithIpRequest) ProtoMessage() {}

func (x *GetSubnet4AndLease4WithIpRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSubnet4AndLease4WithIpRequest.ProtoReflect.Descriptor instead.
func (*GetSubnet4AndLease4WithIpRequest) Descriptor() ([]byte, []int) {
	return file_dhcp_proto_rawDescGZIP(), []int{10}
}

func (x *GetSubnet4AndLease4WithIpRequest) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

type Lease4 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address               string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	HwAddress             string `protobuf:"bytes,2,opt,name=hw_address,json=hwAddress,proto3" json:"hw_address,omitempty"`
	HwAddressOrganization string `protobuf:"bytes,3,opt,name=hw_address_organization,json=hwAddressOrganization,proto3" json:"hw_address_organization,omitempty"`
	ClientId              string `protobuf:"bytes,4,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	ValidLifetime         uint32 `protobuf:"varint,5,opt,name=valid_lifetime,json=validLifetime,proto3" json:"valid_lifetime,omitempty"`
	Expire                string `protobuf:"bytes,6,opt,name=expire,proto3" json:"expire,omitempty"`
	Hostname              string `protobuf:"bytes,7,opt,name=hostname,proto3" json:"hostname,omitempty"`
	VendorId              string `protobuf:"bytes,8,opt,name=vendor_id,json=vendorId,proto3" json:"vendor_id,omitempty"`
	OperatingSystem       string `protobuf:"bytes,9,opt,name=operating_system,json=operatingSystem,proto3" json:"operating_system,omitempty"`
	ClientType            string `protobuf:"bytes,10,opt,name=client_type,json=clientType,proto3" json:"client_type,omitempty"`
	LeaseState            string `protobuf:"bytes,11,opt,name=lease_state,json=leaseState,proto3" json:"lease_state,omitempty"`
}

func (x *Lease4) Reset() {
	*x = Lease4{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Lease4) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Lease4) ProtoMessage() {}

func (x *Lease4) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Lease4.ProtoReflect.Descriptor instead.
func (*Lease4) Descriptor() ([]byte, []int) {
	return file_dhcp_proto_rawDescGZIP(), []int{11}
}

func (x *Lease4) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *Lease4) GetHwAddress() string {
	if x != nil {
		return x.HwAddress
	}
	return ""
}

func (x *Lease4) GetHwAddressOrganization() string {
	if x != nil {
		return x.HwAddressOrganization
	}
	return ""
}

func (x *Lease4) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *Lease4) GetValidLifetime() uint32 {
	if x != nil {
		return x.ValidLifetime
	}
	return 0
}

func (x *Lease4) GetExpire() string {
	if x != nil {
		return x.Expire
	}
	return ""
}

func (x *Lease4) GetHostname() string {
	if x != nil {
		return x.Hostname
	}
	return ""
}

func (x *Lease4) GetVendorId() string {
	if x != nil {
		return x.VendorId
	}
	return ""
}

func (x *Lease4) GetOperatingSystem() string {
	if x != nil {
		return x.OperatingSystem
	}
	return ""
}

func (x *Lease4) GetClientType() string {
	if x != nil {
		return x.ClientType
	}
	return ""
}

func (x *Lease4) GetLeaseState() string {
	if x != nil {
		return x.LeaseState
	}
	return ""
}

type Ipv4Information struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address     string   `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	AddressType string   `protobuf:"bytes,2,opt,name=address_type,json=addressType,proto3" json:"address_type,omitempty"`
	Subnet      *Subnet4 `protobuf:"bytes,3,opt,name=subnet,proto3" json:"subnet,omitempty"`
	Lease       *Lease4  `protobuf:"bytes,4,opt,name=lease,proto3" json:"lease,omitempty"`
}

func (x *Ipv4Information) Reset() {
	*x = Ipv4Information{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ipv4Information) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ipv4Information) ProtoMessage() {}

func (x *Ipv4Information) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ipv4Information.ProtoReflect.Descriptor instead.
func (*Ipv4Information) Descriptor() ([]byte, []int) {
	return file_dhcp_proto_rawDescGZIP(), []int{12}
}

func (x *Ipv4Information) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *Ipv4Information) GetAddressType() string {
	if x != nil {
		return x.AddressType
	}
	return ""
}

func (x *Ipv4Information) GetSubnet() *Subnet4 {
	if x != nil {
		return x.Subnet
	}
	return nil
}

func (x *Ipv4Information) GetLease() *Lease4 {
	if x != nil {
		return x.Lease
	}
	return nil
}

type GetSubnet4AndLease4WithIpResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Succeed          bool                        `protobuf:"varint,1,opt,name=succeed,proto3" json:"succeed,omitempty"`
	Ipv4Informations map[string]*Ipv4Information `protobuf:"bytes,2,rep,name=ipv4_informations,json=ipv4Informations,proto3" json:"ipv4_informations,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *GetSubnet4AndLease4WithIpResponse) Reset() {
	*x = GetSubnet4AndLease4WithIpResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSubnet4AndLease4WithIpResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSubnet4AndLease4WithIpResponse) ProtoMessage() {}

func (x *GetSubnet4AndLease4WithIpResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSubnet4AndLease4WithIpResponse.ProtoReflect.Descriptor instead.
func (*GetSubnet4AndLease4WithIpResponse) Descriptor() ([]byte, []int) {
	return file_dhcp_proto_rawDescGZIP(), []int{13}
}

func (x *GetSubnet4AndLease4WithIpResponse) GetSucceed() bool {
	if x != nil {
		return x.Succeed
	}
	return false
}

func (x *GetSubnet4AndLease4WithIpResponse) GetIpv4Informations() map[string]*Ipv4Information {
	if x != nil {
		return x.Ipv4Informations
	}
	return nil
}

type GetSubnet6AndLease6WithIpRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ip string `protobuf:"bytes,1,opt,name=ip,proto3" json:"ip,omitempty"`
}

func (x *GetSubnet6AndLease6WithIpRequest) Reset() {
	*x = GetSubnet6AndLease6WithIpRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSubnet6AndLease6WithIpRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSubnet6AndLease6WithIpRequest) ProtoMessage() {}

func (x *GetSubnet6AndLease6WithIpRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSubnet6AndLease6WithIpRequest.ProtoReflect.Descriptor instead.
func (*GetSubnet6AndLease6WithIpRequest) Descriptor() ([]byte, []int) {
	return file_dhcp_proto_rawDescGZIP(), []int{14}
}

func (x *GetSubnet6AndLease6WithIpRequest) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

type Lease6 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address               string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	PrefixLen             uint32 `protobuf:"varint,2,opt,name=prefix_len,json=prefixLen,proto3" json:"prefix_len,omitempty"`
	Duid                  string `protobuf:"bytes,3,opt,name=duid,proto3" json:"duid,omitempty"`
	Iaid                  uint32 `protobuf:"varint,4,opt,name=iaid,proto3" json:"iaid,omitempty"`
	PreferredLifetime     uint32 `protobuf:"varint,5,opt,name=preferred_lifetime,json=preferredLifetime,proto3" json:"preferred_lifetime,omitempty"`
	ValidLifetime         uint32 `protobuf:"varint,6,opt,name=valid_lifetime,json=validLifetime,proto3" json:"valid_lifetime,omitempty"`
	Expire                string `protobuf:"bytes,7,opt,name=expire,proto3" json:"expire,omitempty"`
	HwAddress             string `protobuf:"bytes,8,opt,name=hw_address,json=hwAddress,proto3" json:"hw_address,omitempty"`
	HwAddressType         string `protobuf:"bytes,9,opt,name=hw_address_type,json=hwAddressType,proto3" json:"hw_address_type,omitempty"`
	HwAddressSource       string `protobuf:"bytes,10,opt,name=hw_address_source,json=hwAddressSource,proto3" json:"hw_address_source,omitempty"`
	HwAddressOrganization string `protobuf:"bytes,11,opt,name=hw_address_organization,json=hwAddressOrganization,proto3" json:"hw_address_organization,omitempty"`
	LeaseType             string `protobuf:"bytes,12,opt,name=lease_type,json=leaseType,proto3" json:"lease_type,omitempty"`
	Hostname              string `protobuf:"bytes,13,opt,name=hostname,proto3" json:"hostname,omitempty"`
	VendorId              string `protobuf:"bytes,14,opt,name=vendor_id,json=vendorId,proto3" json:"vendor_id,omitempty"`
	OperatingSystem       string `protobuf:"bytes,15,opt,name=operating_system,json=operatingSystem,proto3" json:"operating_system,omitempty"`
	ClientType            string `protobuf:"bytes,16,opt,name=client_type,json=clientType,proto3" json:"client_type,omitempty"`
	LeaseState            string `protobuf:"bytes,17,opt,name=lease_state,json=leaseState,proto3" json:"lease_state,omitempty"`
}

func (x *Lease6) Reset() {
	*x = Lease6{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Lease6) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Lease6) ProtoMessage() {}

func (x *Lease6) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Lease6.ProtoReflect.Descriptor instead.
func (*Lease6) Descriptor() ([]byte, []int) {
	return file_dhcp_proto_rawDescGZIP(), []int{15}
}

func (x *Lease6) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *Lease6) GetPrefixLen() uint32 {
	if x != nil {
		return x.PrefixLen
	}
	return 0
}

func (x *Lease6) GetDuid() string {
	if x != nil {
		return x.Duid
	}
	return ""
}

func (x *Lease6) GetIaid() uint32 {
	if x != nil {
		return x.Iaid
	}
	return 0
}

func (x *Lease6) GetPreferredLifetime() uint32 {
	if x != nil {
		return x.PreferredLifetime
	}
	return 0
}

func (x *Lease6) GetValidLifetime() uint32 {
	if x != nil {
		return x.ValidLifetime
	}
	return 0
}

func (x *Lease6) GetExpire() string {
	if x != nil {
		return x.Expire
	}
	return ""
}

func (x *Lease6) GetHwAddress() string {
	if x != nil {
		return x.HwAddress
	}
	return ""
}

func (x *Lease6) GetHwAddressType() string {
	if x != nil {
		return x.HwAddressType
	}
	return ""
}

func (x *Lease6) GetHwAddressSource() string {
	if x != nil {
		return x.HwAddressSource
	}
	return ""
}

func (x *Lease6) GetHwAddressOrganization() string {
	if x != nil {
		return x.HwAddressOrganization
	}
	return ""
}

func (x *Lease6) GetLeaseType() string {
	if x != nil {
		return x.LeaseType
	}
	return ""
}

func (x *Lease6) GetHostname() string {
	if x != nil {
		return x.Hostname
	}
	return ""
}

func (x *Lease6) GetVendorId() string {
	if x != nil {
		return x.VendorId
	}
	return ""
}

func (x *Lease6) GetOperatingSystem() string {
	if x != nil {
		return x.OperatingSystem
	}
	return ""
}

func (x *Lease6) GetClientType() string {
	if x != nil {
		return x.ClientType
	}
	return ""
}

func (x *Lease6) GetLeaseState() string {
	if x != nil {
		return x.LeaseState
	}
	return ""
}

type Ipv6Information struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address     string   `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	AddressType string   `protobuf:"bytes,2,opt,name=address_type,json=addressType,proto3" json:"address_type,omitempty"`
	Subnet      *Subnet6 `protobuf:"bytes,3,opt,name=subnet,proto3" json:"subnet,omitempty"`
	Lease       *Lease6  `protobuf:"bytes,4,opt,name=lease,proto3" json:"lease,omitempty"`
}

func (x *Ipv6Information) Reset() {
	*x = Ipv6Information{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ipv6Information) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ipv6Information) ProtoMessage() {}

func (x *Ipv6Information) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ipv6Information.ProtoReflect.Descriptor instead.
func (*Ipv6Information) Descriptor() ([]byte, []int) {
	return file_dhcp_proto_rawDescGZIP(), []int{16}
}

func (x *Ipv6Information) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *Ipv6Information) GetAddressType() string {
	if x != nil {
		return x.AddressType
	}
	return ""
}

func (x *Ipv6Information) GetSubnet() *Subnet6 {
	if x != nil {
		return x.Subnet
	}
	return nil
}

func (x *Ipv6Information) GetLease() *Lease6 {
	if x != nil {
		return x.Lease
	}
	return nil
}

type GetSubnet6AndLease6WithIpResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Succeed          bool                        `protobuf:"varint,1,opt,name=succeed,proto3" json:"succeed,omitempty"`
	Ipv6Informations map[string]*Ipv6Information `protobuf:"bytes,2,rep,name=ipv6_informations,json=ipv6Informations,proto3" json:"ipv6_informations,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *GetSubnet6AndLease6WithIpResponse) Reset() {
	*x = GetSubnet6AndLease6WithIpResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSubnet6AndLease6WithIpResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSubnet6AndLease6WithIpResponse) ProtoMessage() {}

func (x *GetSubnet6AndLease6WithIpResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSubnet6AndLease6WithIpResponse.ProtoReflect.Descriptor instead.
func (*GetSubnet6AndLease6WithIpResponse) Descriptor() ([]byte, []int) {
	return file_dhcp_proto_rawDescGZIP(), []int{17}
}

func (x *GetSubnet6AndLease6WithIpResponse) GetSucceed() bool {
	if x != nil {
		return x.Succeed
	}
	return false
}

func (x *GetSubnet6AndLease6WithIpResponse) GetIpv6Informations() map[string]*Ipv6Information {
	if x != nil {
		return x.Ipv6Informations
	}
	return nil
}

type GetSubnets4AndLeases4WithIpsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ips []string `protobuf:"bytes,1,rep,name=ips,proto3" json:"ips,omitempty"`
}

func (x *GetSubnets4AndLeases4WithIpsRequest) Reset() {
	*x = GetSubnets4AndLeases4WithIpsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSubnets4AndLeases4WithIpsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSubnets4AndLeases4WithIpsRequest) ProtoMessage() {}

func (x *GetSubnets4AndLeases4WithIpsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSubnets4AndLeases4WithIpsRequest.ProtoReflect.Descriptor instead.
func (*GetSubnets4AndLeases4WithIpsRequest) Descriptor() ([]byte, []int) {
	return file_dhcp_proto_rawDescGZIP(), []int{18}
}

func (x *GetSubnets4AndLeases4WithIpsRequest) GetIps() []string {
	if x != nil {
		return x.Ips
	}
	return nil
}

type GetSubnets4AndLeases4WithIpsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Succeed          bool                        `protobuf:"varint,1,opt,name=succeed,proto3" json:"succeed,omitempty"`
	Ipv4Informations map[string]*Ipv4Information `protobuf:"bytes,2,rep,name=ipv4_informations,json=ipv4Informations,proto3" json:"ipv4_informations,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *GetSubnets4AndLeases4WithIpsResponse) Reset() {
	*x = GetSubnets4AndLeases4WithIpsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSubnets4AndLeases4WithIpsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSubnets4AndLeases4WithIpsResponse) ProtoMessage() {}

func (x *GetSubnets4AndLeases4WithIpsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSubnets4AndLeases4WithIpsResponse.ProtoReflect.Descriptor instead.
func (*GetSubnets4AndLeases4WithIpsResponse) Descriptor() ([]byte, []int) {
	return file_dhcp_proto_rawDescGZIP(), []int{19}
}

func (x *GetSubnets4AndLeases4WithIpsResponse) GetSucceed() bool {
	if x != nil {
		return x.Succeed
	}
	return false
}

func (x *GetSubnets4AndLeases4WithIpsResponse) GetIpv4Informations() map[string]*Ipv4Information {
	if x != nil {
		return x.Ipv4Informations
	}
	return nil
}

type GetSubnets6AndLeases6WithIpsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ips []string `protobuf:"bytes,1,rep,name=ips,proto3" json:"ips,omitempty"`
}

func (x *GetSubnets6AndLeases6WithIpsRequest) Reset() {
	*x = GetSubnets6AndLeases6WithIpsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSubnets6AndLeases6WithIpsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSubnets6AndLeases6WithIpsRequest) ProtoMessage() {}

func (x *GetSubnets6AndLeases6WithIpsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSubnets6AndLeases6WithIpsRequest.ProtoReflect.Descriptor instead.
func (*GetSubnets6AndLeases6WithIpsRequest) Descriptor() ([]byte, []int) {
	return file_dhcp_proto_rawDescGZIP(), []int{20}
}

func (x *GetSubnets6AndLeases6WithIpsRequest) GetIps() []string {
	if x != nil {
		return x.Ips
	}
	return nil
}

type GetSubnets6AndLeases6WithIpsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Succeed          bool                        `protobuf:"varint,1,opt,name=succeed,proto3" json:"succeed,omitempty"`
	Ipv6Informations map[string]*Ipv6Information `protobuf:"bytes,2,rep,name=ipv6_informations,json=ipv6Informations,proto3" json:"ipv6_informations,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *GetSubnets6AndLeases6WithIpsResponse) Reset() {
	*x = GetSubnets6AndLeases6WithIpsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSubnets6AndLeases6WithIpsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSubnets6AndLeases6WithIpsResponse) ProtoMessage() {}

func (x *GetSubnets6AndLeases6WithIpsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSubnets6AndLeases6WithIpsResponse.ProtoReflect.Descriptor instead.
func (*GetSubnets6AndLeases6WithIpsResponse) Descriptor() ([]byte, []int) {
	return file_dhcp_proto_rawDescGZIP(), []int{21}
}

func (x *GetSubnets6AndLeases6WithIpsResponse) GetSucceed() bool {
	if x != nil {
		return x.Succeed
	}
	return false
}

func (x *GetSubnets6AndLeases6WithIpsResponse) GetIpv6Informations() map[string]*Ipv6Information {
	if x != nil {
		return x.Ipv6Informations
	}
	return nil
}

type GetSubnet4Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Prefixes []string `protobuf:"bytes,1,rep,name=prefixes,proto3" json:"prefixes,omitempty"`
}

func (x *GetSubnet4Request) Reset() {
	*x = GetSubnet4Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSubnet4Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSubnet4Request) ProtoMessage() {}

func (x *GetSubnet4Request) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSubnet4Request.ProtoReflect.Descriptor instead.
func (*GetSubnet4Request) Descriptor() ([]byte, []int) {
	return file_dhcp_proto_rawDescGZIP(), []int{22}
}

func (x *GetSubnet4Request) GetPrefixes() []string {
	if x != nil {
		return x.Prefixes
	}
	return nil
}

type GetSubnet4Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Subnet4S []*DhcpSubnet4 `protobuf:"bytes,1,rep,name=subnet4s,proto3" json:"subnet4s,omitempty"`
}

func (x *GetSubnet4Response) Reset() {
	*x = GetSubnet4Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSubnet4Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSubnet4Response) ProtoMessage() {}

func (x *GetSubnet4Response) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSubnet4Response.ProtoReflect.Descriptor instead.
func (*GetSubnet4Response) Descriptor() ([]byte, []int) {
	return file_dhcp_proto_rawDescGZIP(), []int{23}
}

func (x *GetSubnet4Response) GetSubnet4S() []*DhcpSubnet4 {
	if x != nil {
		return x.Subnet4S
	}
	return nil
}

type DhcpSubnet4 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                  string            `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Type                string            `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	CreationTimestamp   string            `protobuf:"bytes,3,opt,name=creation_timestamp,json=creationTimestamp,proto3" json:"creation_timestamp,omitempty"`
	DeletionTimestamp   string            `protobuf:"bytes,4,opt,name=deletion_timestamp,json=deletionTimestamp,proto3" json:"deletion_timestamp,omitempty"`
	Links               map[string]string `protobuf:"bytes,5,rep,name=links,proto3" json:"links,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Subnet              string            `protobuf:"bytes,6,opt,name=subnet,proto3" json:"subnet,omitempty"`
	IpNet               string            `protobuf:"bytes,7,opt,name=ip_net,json=ipNet,proto3" json:"ip_net,omitempty"`
	SubnetId            uint64            `protobuf:"varint,8,opt,name=subnet_id,json=subnetId,proto3" json:"subnet_id,omitempty"`
	ValidLifetime       uint32            `protobuf:"varint,9,opt,name=valid_lifetime,json=validLifetime,proto3" json:"valid_lifetime,omitempty"`
	MaxValidLifetime    uint32            `protobuf:"varint,10,opt,name=max_valid_lifetime,json=maxValidLifetime,proto3" json:"max_valid_lifetime,omitempty"`
	MinValidLifetime    uint32            `protobuf:"varint,11,opt,name=min_valid_lifetime,json=minValidLifetime,proto3" json:"min_valid_lifetime,omitempty"`
	SubnetMask          string            `protobuf:"bytes,12,opt,name=subnet_mask,json=subnetMask,proto3" json:"subnet_mask,omitempty"`
	DomainServers       []string          `protobuf:"bytes,13,rep,name=domain_servers,json=domainServers,proto3" json:"domain_servers,omitempty"`
	Routers             []string          `protobuf:"bytes,14,rep,name=routers,proto3" json:"routers,omitempty"`
	ClientClass         string            `protobuf:"bytes,15,opt,name=client_class,json=clientClass,proto3" json:"client_class,omitempty"`
	TftpServer          string            `protobuf:"bytes,16,opt,name=tftp_server,json=tftpServer,proto3" json:"tftp_server,omitempty"`
	BootFile            string            `protobuf:"bytes,17,opt,name=boot_file,json=bootFile,proto3" json:"boot_file,omitempty"`
	RelayAgentAddresses []string          `protobuf:"bytes,18,rep,name=relay_agent_addresses,json=relayAgentAddresses,proto3" json:"relay_agent_addresses,omitempty"`
	IFaceName           string            `protobuf:"bytes,19,opt,name=i_face_name,json=iFaceName,proto3" json:"i_face_name,omitempty"`
	NextServer          string            `protobuf:"bytes,20,opt,name=next_server,json=nextServer,proto3" json:"next_server,omitempty"`
	Tags                string            `protobuf:"bytes,21,opt,name=tags,proto3" json:"tags,omitempty"`
	NodeNames           []string          `protobuf:"bytes,22,rep,name=node_names,json=nodeNames,proto3" json:"node_names,omitempty"`
	Nodes               []string          `protobuf:"bytes,23,rep,name=nodes,proto3" json:"nodes,omitempty"`
	Capacity            uint64            `protobuf:"varint,24,opt,name=capacity,proto3" json:"capacity,omitempty"`
	UsedRatio           string            `protobuf:"bytes,25,opt,name=used_ratio,json=usedRatio,proto3" json:"used_ratio,omitempty"`
	UseCount            uint64            `protobuf:"varint,26,opt,name=use_count,json=useCount,proto3" json:"use_count,omitempty"`
}

func (x *DhcpSubnet4) Reset() {
	*x = DhcpSubnet4{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DhcpSubnet4) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DhcpSubnet4) ProtoMessage() {}

func (x *DhcpSubnet4) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DhcpSubnet4.ProtoReflect.Descriptor instead.
func (*DhcpSubnet4) Descriptor() ([]byte, []int) {
	return file_dhcp_proto_rawDescGZIP(), []int{24}
}

func (x *DhcpSubnet4) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *DhcpSubnet4) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *DhcpSubnet4) GetCreationTimestamp() string {
	if x != nil {
		return x.CreationTimestamp
	}
	return ""
}

func (x *DhcpSubnet4) GetDeletionTimestamp() string {
	if x != nil {
		return x.DeletionTimestamp
	}
	return ""
}

func (x *DhcpSubnet4) GetLinks() map[string]string {
	if x != nil {
		return x.Links
	}
	return nil
}

func (x *DhcpSubnet4) GetSubnet() string {
	if x != nil {
		return x.Subnet
	}
	return ""
}

func (x *DhcpSubnet4) GetIpNet() string {
	if x != nil {
		return x.IpNet
	}
	return ""
}

func (x *DhcpSubnet4) GetSubnetId() uint64 {
	if x != nil {
		return x.SubnetId
	}
	return 0
}

func (x *DhcpSubnet4) GetValidLifetime() uint32 {
	if x != nil {
		return x.ValidLifetime
	}
	return 0
}

func (x *DhcpSubnet4) GetMaxValidLifetime() uint32 {
	if x != nil {
		return x.MaxValidLifetime
	}
	return 0
}

func (x *DhcpSubnet4) GetMinValidLifetime() uint32 {
	if x != nil {
		return x.MinValidLifetime
	}
	return 0
}

func (x *DhcpSubnet4) GetSubnetMask() string {
	if x != nil {
		return x.SubnetMask
	}
	return ""
}

func (x *DhcpSubnet4) GetDomainServers() []string {
	if x != nil {
		return x.DomainServers
	}
	return nil
}

func (x *DhcpSubnet4) GetRouters() []string {
	if x != nil {
		return x.Routers
	}
	return nil
}

func (x *DhcpSubnet4) GetClientClass() string {
	if x != nil {
		return x.ClientClass
	}
	return ""
}

func (x *DhcpSubnet4) GetTftpServer() string {
	if x != nil {
		return x.TftpServer
	}
	return ""
}

func (x *DhcpSubnet4) GetBootFile() string {
	if x != nil {
		return x.BootFile
	}
	return ""
}

func (x *DhcpSubnet4) GetRelayAgentAddresses() []string {
	if x != nil {
		return x.RelayAgentAddresses
	}
	return nil
}

func (x *DhcpSubnet4) GetIFaceName() string {
	if x != nil {
		return x.IFaceName
	}
	return ""
}

func (x *DhcpSubnet4) GetNextServer() string {
	if x != nil {
		return x.NextServer
	}
	return ""
}

func (x *DhcpSubnet4) GetTags() string {
	if x != nil {
		return x.Tags
	}
	return ""
}

func (x *DhcpSubnet4) GetNodeNames() []string {
	if x != nil {
		return x.NodeNames
	}
	return nil
}

func (x *DhcpSubnet4) GetNodes() []string {
	if x != nil {
		return x.Nodes
	}
	return nil
}

func (x *DhcpSubnet4) GetCapacity() uint64 {
	if x != nil {
		return x.Capacity
	}
	return 0
}

func (x *DhcpSubnet4) GetUsedRatio() string {
	if x != nil {
		return x.UsedRatio
	}
	return ""
}

func (x *DhcpSubnet4) GetUseCount() uint64 {
	if x != nil {
		return x.UseCount
	}
	return 0
}

type GetPool4BySubnet4Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Subnet *DhcpSubnet4 `protobuf:"bytes,1,opt,name=subnet,proto3" json:"subnet,omitempty"`
}

func (x *GetPool4BySubnet4Request) Reset() {
	*x = GetPool4BySubnet4Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPool4BySubnet4Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPool4BySubnet4Request) ProtoMessage() {}

func (x *GetPool4BySubnet4Request) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPool4BySubnet4Request.ProtoReflect.Descriptor instead.
func (*GetPool4BySubnet4Request) Descriptor() ([]byte, []int) {
	return file_dhcp_proto_rawDescGZIP(), []int{25}
}

func (x *GetPool4BySubnet4Request) GetSubnet() *DhcpSubnet4 {
	if x != nil {
		return x.Subnet
	}
	return nil
}

type GetPool4BySubnet4Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pool4S []*DhcpPool4 `protobuf:"bytes,2,rep,name=pool4s,proto3" json:"pool4s,omitempty"`
}

func (x *GetPool4BySubnet4Response) Reset() {
	*x = GetPool4BySubnet4Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPool4BySubnet4Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPool4BySubnet4Response) ProtoMessage() {}

func (x *GetPool4BySubnet4Response) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPool4BySubnet4Response.ProtoReflect.Descriptor instead.
func (*GetPool4BySubnet4Response) Descriptor() ([]byte, []int) {
	return file_dhcp_proto_rawDescGZIP(), []int{26}
}

func (x *GetPool4BySubnet4Response) GetPool4S() []*DhcpPool4 {
	if x != nil {
		return x.Pool4S
	}
	return nil
}

type DhcpPool4 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                string            `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Type              string            `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	CreationTimestamp string            `protobuf:"bytes,3,opt,name=creation_timestamp,json=creationTimestamp,proto3" json:"creation_timestamp,omitempty"`
	DeletionTimestamp string            `protobuf:"bytes,4,opt,name=deletion_timestamp,json=deletionTimestamp,proto3" json:"deletion_timestamp,omitempty"`
	Links             map[string]string `protobuf:"bytes,5,rep,name=links,proto3" json:"links,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Subnet4           string            `protobuf:"bytes,6,opt,name=subnet4,proto3" json:"subnet4,omitempty"`
	BeginAddress      string            `protobuf:"bytes,7,opt,name=begin_address,json=beginAddress,proto3" json:"begin_address,omitempty"`
	BeginIp           string            `protobuf:"bytes,8,opt,name=begin_ip,json=beginIp,proto3" json:"begin_ip,omitempty"`
	EndAddress        string            `protobuf:"bytes,9,opt,name=end_address,json=endAddress,proto3" json:"end_address,omitempty"`
	EndIp             string            `protobuf:"bytes,10,opt,name=end_ip,json=endIp,proto3" json:"end_ip,omitempty"`
	Capacity          uint64            `protobuf:"varint,11,opt,name=capacity,proto3" json:"capacity,omitempty"`
	UsedRatio         string            `protobuf:"bytes,12,opt,name=used_ratio,json=usedRatio,proto3" json:"used_ratio,omitempty"`
	UsedCount         uint64            `protobuf:"varint,13,opt,name=used_count,json=usedCount,proto3" json:"used_count,omitempty"`
	Template          string            `protobuf:"bytes,14,opt,name=template,proto3" json:"template,omitempty"`
	Comment           string            `protobuf:"bytes,15,opt,name=comment,proto3" json:"comment,omitempty"`
}

func (x *DhcpPool4) Reset() {
	*x = DhcpPool4{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DhcpPool4) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DhcpPool4) ProtoMessage() {}

func (x *DhcpPool4) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DhcpPool4.ProtoReflect.Descriptor instead.
func (*DhcpPool4) Descriptor() ([]byte, []int) {
	return file_dhcp_proto_rawDescGZIP(), []int{27}
}

func (x *DhcpPool4) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *DhcpPool4) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *DhcpPool4) GetCreationTimestamp() string {
	if x != nil {
		return x.CreationTimestamp
	}
	return ""
}

func (x *DhcpPool4) GetDeletionTimestamp() string {
	if x != nil {
		return x.DeletionTimestamp
	}
	return ""
}

func (x *DhcpPool4) GetLinks() map[string]string {
	if x != nil {
		return x.Links
	}
	return nil
}

func (x *DhcpPool4) GetSubnet4() string {
	if x != nil {
		return x.Subnet4
	}
	return ""
}

func (x *DhcpPool4) GetBeginAddress() string {
	if x != nil {
		return x.BeginAddress
	}
	return ""
}

func (x *DhcpPool4) GetBeginIp() string {
	if x != nil {
		return x.BeginIp
	}
	return ""
}

func (x *DhcpPool4) GetEndAddress() string {
	if x != nil {
		return x.EndAddress
	}
	return ""
}

func (x *DhcpPool4) GetEndIp() string {
	if x != nil {
		return x.EndIp
	}
	return ""
}

func (x *DhcpPool4) GetCapacity() uint64 {
	if x != nil {
		return x.Capacity
	}
	return 0
}

func (x *DhcpPool4) GetUsedRatio() string {
	if x != nil {
		return x.UsedRatio
	}
	return ""
}

func (x *DhcpPool4) GetUsedCount() uint64 {
	if x != nil {
		return x.UsedCount
	}
	return 0
}

func (x *DhcpPool4) GetTemplate() string {
	if x != nil {
		return x.Template
	}
	return ""
}

func (x *DhcpPool4) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

type GetReservedPool4BySubnet4IdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Subnet4Id string `protobuf:"bytes,1,opt,name=subnet4Id,proto3" json:"subnet4Id,omitempty"`
}

func (x *GetReservedPool4BySubnet4IdRequest) Reset() {
	*x = GetReservedPool4BySubnet4IdRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetReservedPool4BySubnet4IdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetReservedPool4BySubnet4IdRequest) ProtoMessage() {}

func (x *GetReservedPool4BySubnet4IdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetReservedPool4BySubnet4IdRequest.ProtoReflect.Descriptor instead.
func (*GetReservedPool4BySubnet4IdRequest) Descriptor() ([]byte, []int) {
	return file_dhcp_proto_rawDescGZIP(), []int{28}
}

func (x *GetReservedPool4BySubnet4IdRequest) GetSubnet4Id() string {
	if x != nil {
		return x.Subnet4Id
	}
	return ""
}

type GetReservedPool4BySubnet4IdResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReservedPool4S []*DhcpReservedPool4 `protobuf:"bytes,1,rep,name=reserved_pool4s,json=reservedPool4s,proto3" json:"reserved_pool4s,omitempty"`
}

func (x *GetReservedPool4BySubnet4IdResponse) Reset() {
	*x = GetReservedPool4BySubnet4IdResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetReservedPool4BySubnet4IdResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetReservedPool4BySubnet4IdResponse) ProtoMessage() {}

func (x *GetReservedPool4BySubnet4IdResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetReservedPool4BySubnet4IdResponse.ProtoReflect.Descriptor instead.
func (*GetReservedPool4BySubnet4IdResponse) Descriptor() ([]byte, []int) {
	return file_dhcp_proto_rawDescGZIP(), []int{29}
}

func (x *GetReservedPool4BySubnet4IdResponse) GetReservedPool4S() []*DhcpReservedPool4 {
	if x != nil {
		return x.ReservedPool4S
	}
	return nil
}

type DhcpReservedPool4 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                string            `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Type              string            `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	CreationTimestamp string            `protobuf:"bytes,3,opt,name=creation_timestamp,json=creationTimestamp,proto3" json:"creation_timestamp,omitempty"`
	DeletionTimestamp string            `protobuf:"bytes,4,opt,name=deletion_timestamp,json=deletionTimestamp,proto3" json:"deletion_timestamp,omitempty"`
	Links             map[string]string `protobuf:"bytes,5,rep,name=links,proto3" json:"links,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Subnet4           string            `protobuf:"bytes,6,opt,name=subnet4,proto3" json:"subnet4,omitempty"`
	BeginAddress      string            `protobuf:"bytes,7,opt,name=begin_address,json=beginAddress,proto3" json:"begin_address,omitempty"`
	BeginIp           string            `protobuf:"bytes,8,opt,name=begin_ip,json=beginIp,proto3" json:"begin_ip,omitempty"`
	EndAddress        string            `protobuf:"bytes,9,opt,name=end_address,json=endAddress,proto3" json:"end_address,omitempty"`
	EndIp             string            `protobuf:"bytes,10,opt,name=end_ip,json=endIp,proto3" json:"end_ip,omitempty"`
	Capacity          uint64            `protobuf:"varint,11,opt,name=capacity,proto3" json:"capacity,omitempty"`
	UsedRatio         string            `protobuf:"bytes,12,opt,name=used_ratio,json=usedRatio,proto3" json:"used_ratio,omitempty"`
	UsedCount         uint64            `protobuf:"varint,13,opt,name=used_count,json=usedCount,proto3" json:"used_count,omitempty"`
	Template          string            `protobuf:"bytes,14,opt,name=template,proto3" json:"template,omitempty"`
	Comment           string            `protobuf:"bytes,15,opt,name=comment,proto3" json:"comment,omitempty"`
}

func (x *DhcpReservedPool4) Reset() {
	*x = DhcpReservedPool4{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DhcpReservedPool4) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DhcpReservedPool4) ProtoMessage() {}

func (x *DhcpReservedPool4) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DhcpReservedPool4.ProtoReflect.Descriptor instead.
func (*DhcpReservedPool4) Descriptor() ([]byte, []int) {
	return file_dhcp_proto_rawDescGZIP(), []int{30}
}

func (x *DhcpReservedPool4) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *DhcpReservedPool4) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *DhcpReservedPool4) GetCreationTimestamp() string {
	if x != nil {
		return x.CreationTimestamp
	}
	return ""
}

func (x *DhcpReservedPool4) GetDeletionTimestamp() string {
	if x != nil {
		return x.DeletionTimestamp
	}
	return ""
}

func (x *DhcpReservedPool4) GetLinks() map[string]string {
	if x != nil {
		return x.Links
	}
	return nil
}

func (x *DhcpReservedPool4) GetSubnet4() string {
	if x != nil {
		return x.Subnet4
	}
	return ""
}

func (x *DhcpReservedPool4) GetBeginAddress() string {
	if x != nil {
		return x.BeginAddress
	}
	return ""
}

func (x *DhcpReservedPool4) GetBeginIp() string {
	if x != nil {
		return x.BeginIp
	}
	return ""
}

func (x *DhcpReservedPool4) GetEndAddress() string {
	if x != nil {
		return x.EndAddress
	}
	return ""
}

func (x *DhcpReservedPool4) GetEndIp() string {
	if x != nil {
		return x.EndIp
	}
	return ""
}

func (x *DhcpReservedPool4) GetCapacity() uint64 {
	if x != nil {
		return x.Capacity
	}
	return 0
}

func (x *DhcpReservedPool4) GetUsedRatio() string {
	if x != nil {
		return x.UsedRatio
	}
	return ""
}

func (x *DhcpReservedPool4) GetUsedCount() uint64 {
	if x != nil {
		return x.UsedCount
	}
	return 0
}

func (x *DhcpReservedPool4) GetTemplate() string {
	if x != nil {
		return x.Template
	}
	return ""
}

func (x *DhcpReservedPool4) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

type GetReservation4BySubnet4IdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Subnet4Id string `protobuf:"bytes,1,opt,name=subnet4Id,proto3" json:"subnet4Id,omitempty"`
}

func (x *GetReservation4BySubnet4IdRequest) Reset() {
	*x = GetReservation4BySubnet4IdRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetReservation4BySubnet4IdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetReservation4BySubnet4IdRequest) ProtoMessage() {}

func (x *GetReservation4BySubnet4IdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetReservation4BySubnet4IdRequest.ProtoReflect.Descriptor instead.
func (*GetReservation4BySubnet4IdRequest) Descriptor() ([]byte, []int) {
	return file_dhcp_proto_rawDescGZIP(), []int{31}
}

func (x *GetReservation4BySubnet4IdRequest) GetSubnet4Id() string {
	if x != nil {
		return x.Subnet4Id
	}
	return ""
}

type GetReservation4BySubnet4IdResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Reservation4S []*DhcpReservation4 `protobuf:"bytes,1,rep,name=reservation4s,proto3" json:"reservation4s,omitempty"`
}

func (x *GetReservation4BySubnet4IdResponse) Reset() {
	*x = GetReservation4BySubnet4IdResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetReservation4BySubnet4IdResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetReservation4BySubnet4IdResponse) ProtoMessage() {}

func (x *GetReservation4BySubnet4IdResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetReservation4BySubnet4IdResponse.ProtoReflect.Descriptor instead.
func (*GetReservation4BySubnet4IdResponse) Descriptor() ([]byte, []int) {
	return file_dhcp_proto_rawDescGZIP(), []int{32}
}

func (x *GetReservation4BySubnet4IdResponse) GetReservation4S() []*DhcpReservation4 {
	if x != nil {
		return x.Reservation4S
	}
	return nil
}

type DhcpReservation4 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                string            `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Type              string            `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	CreationTimestamp string            `protobuf:"bytes,3,opt,name=creation_timestamp,json=creationTimestamp,proto3" json:"creation_timestamp,omitempty"`
	DeletionTimestamp string            `protobuf:"bytes,4,opt,name=deletion_timestamp,json=deletionTimestamp,proto3" json:"deletion_timestamp,omitempty"`
	Links             map[string]string `protobuf:"bytes,5,rep,name=links,proto3" json:"links,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Subnet4           string            `protobuf:"bytes,6,opt,name=subnet4,proto3" json:"subnet4,omitempty"`
	HwAddress         string            `protobuf:"bytes,7,opt,name=hw_address,json=hwAddress,proto3" json:"hw_address,omitempty"`
	IpAddress         string            `protobuf:"bytes,8,opt,name=ip_address,json=ipAddress,proto3" json:"ip_address,omitempty"`
	Ip                string            `protobuf:"bytes,9,opt,name=ip,proto3" json:"ip,omitempty"`
	UsedRatio         string            `protobuf:"bytes,10,opt,name=used_ratio,json=usedRatio,proto3" json:"used_ratio,omitempty"`
	UsedCount         uint64            `protobuf:"varint,11,opt,name=used_count,json=usedCount,proto3" json:"used_count,omitempty"`
	Capacity          uint64            `protobuf:"varint,12,opt,name=capacity,proto3" json:"capacity,omitempty"`
	Comment           string            `protobuf:"bytes,13,opt,name=comment,proto3" json:"comment,omitempty"`
}

func (x *DhcpReservation4) Reset() {
	*x = DhcpReservation4{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DhcpReservation4) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DhcpReservation4) ProtoMessage() {}

func (x *DhcpReservation4) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DhcpReservation4.ProtoReflect.Descriptor instead.
func (*DhcpReservation4) Descriptor() ([]byte, []int) {
	return file_dhcp_proto_rawDescGZIP(), []int{33}
}

func (x *DhcpReservation4) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *DhcpReservation4) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *DhcpReservation4) GetCreationTimestamp() string {
	if x != nil {
		return x.CreationTimestamp
	}
	return ""
}

func (x *DhcpReservation4) GetDeletionTimestamp() string {
	if x != nil {
		return x.DeletionTimestamp
	}
	return ""
}

func (x *DhcpReservation4) GetLinks() map[string]string {
	if x != nil {
		return x.Links
	}
	return nil
}

func (x *DhcpReservation4) GetSubnet4() string {
	if x != nil {
		return x.Subnet4
	}
	return ""
}

func (x *DhcpReservation4) GetHwAddress() string {
	if x != nil {
		return x.HwAddress
	}
	return ""
}

func (x *DhcpReservation4) GetIpAddress() string {
	if x != nil {
		return x.IpAddress
	}
	return ""
}

func (x *DhcpReservation4) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *DhcpReservation4) GetUsedRatio() string {
	if x != nil {
		return x.UsedRatio
	}
	return ""
}

func (x *DhcpReservation4) GetUsedCount() uint64 {
	if x != nil {
		return x.UsedCount
	}
	return 0
}

func (x *DhcpReservation4) GetCapacity() uint64 {
	if x != nil {
		return x.Capacity
	}
	return 0
}

func (x *DhcpReservation4) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

type GetLease4BySubnet4IdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Subnet4Id string `protobuf:"bytes,1,opt,name=subnet4_id,json=subnet4Id,proto3" json:"subnet4_id,omitempty"`
}

func (x *GetLease4BySubnet4IdRequest) Reset() {
	*x = GetLease4BySubnet4IdRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLease4BySubnet4IdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLease4BySubnet4IdRequest) ProtoMessage() {}

func (x *GetLease4BySubnet4IdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLease4BySubnet4IdRequest.ProtoReflect.Descriptor instead.
func (*GetLease4BySubnet4IdRequest) Descriptor() ([]byte, []int) {
	return file_dhcp_proto_rawDescGZIP(), []int{34}
}

func (x *GetLease4BySubnet4IdRequest) GetSubnet4Id() string {
	if x != nil {
		return x.Subnet4Id
	}
	return ""
}

type GetLease4BySubnet4IdResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubnetLease4S []*DhcpSubnetLease4 `protobuf:"bytes,1,rep,name=subnet_lease4s,json=subnetLease4s,proto3" json:"subnet_lease4s,omitempty"`
}

func (x *GetLease4BySubnet4IdResponse) Reset() {
	*x = GetLease4BySubnet4IdResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLease4BySubnet4IdResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLease4BySubnet4IdResponse) ProtoMessage() {}

func (x *GetLease4BySubnet4IdResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLease4BySubnet4IdResponse.ProtoReflect.Descriptor instead.
func (*GetLease4BySubnet4IdResponse) Descriptor() ([]byte, []int) {
	return file_dhcp_proto_rawDescGZIP(), []int{35}
}

func (x *GetLease4BySubnet4IdResponse) GetSubnetLease4S() []*DhcpSubnetLease4 {
	if x != nil {
		return x.SubnetLease4S
	}
	return nil
}

type DhcpSubnetLease4 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                    string            `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Type                  string            `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	CreationTimestamp     string            `protobuf:"bytes,3,opt,name=creation_timestamp,json=creationTimestamp,proto3" json:"creation_timestamp,omitempty"`
	DeletionTimestamp     string            `protobuf:"bytes,4,opt,name=deletion_timestamp,json=deletionTimestamp,proto3" json:"deletion_timestamp,omitempty"`
	Links                 map[string]string `protobuf:"bytes,5,rep,name=links,proto3" json:"links,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Subnet4               string            `protobuf:"bytes,6,opt,name=subnet4,proto3" json:"subnet4,omitempty"`
	Address               string            `protobuf:"bytes,7,opt,name=address,proto3" json:"address,omitempty"`
	AddressType           string            `protobuf:"bytes,8,opt,name=address_type,json=addressType,proto3" json:"address_type,omitempty"`
	HwAddress             string            `protobuf:"bytes,9,opt,name=hw_address,json=hwAddress,proto3" json:"hw_address,omitempty"`
	HwAddressOrganization string            `protobuf:"bytes,10,opt,name=hw_address_organization,json=hwAddressOrganization,proto3" json:"hw_address_organization,omitempty"`
	ClientId              string            `protobuf:"bytes,11,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	ValidLifetime         uint32            `protobuf:"varint,12,opt,name=valid_lifetime,json=validLifetime,proto3" json:"valid_lifetime,omitempty"`
	Expire                string            `protobuf:"bytes,13,opt,name=expire,proto3" json:"expire,omitempty"`
	Hostname              string            `protobuf:"bytes,14,opt,name=hostname,proto3" json:"hostname,omitempty"`
	Fingerprint           string            `protobuf:"bytes,15,opt,name=fingerprint,proto3" json:"fingerprint,omitempty"`
	VendorId              string            `protobuf:"bytes,16,opt,name=vendor_id,json=vendorId,proto3" json:"vendor_id,omitempty"`
	OperatingSystem       string            `protobuf:"bytes,17,opt,name=operating_system,json=operatingSystem,proto3" json:"operating_system,omitempty"`
	ClientType            string            `protobuf:"bytes,18,opt,name=client_type,json=clientType,proto3" json:"client_type,omitempty"`
	LeaseState            string            `protobuf:"bytes,19,opt,name=lease_state,json=leaseState,proto3" json:"lease_state,omitempty"`
}

func (x *DhcpSubnetLease4) Reset() {
	*x = DhcpSubnetLease4{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DhcpSubnetLease4) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DhcpSubnetLease4) ProtoMessage() {}

func (x *DhcpSubnetLease4) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DhcpSubnetLease4.ProtoReflect.Descriptor instead.
func (*DhcpSubnetLease4) Descriptor() ([]byte, []int) {
	return file_dhcp_proto_rawDescGZIP(), []int{36}
}

func (x *DhcpSubnetLease4) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *DhcpSubnetLease4) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *DhcpSubnetLease4) GetCreationTimestamp() string {
	if x != nil {
		return x.CreationTimestamp
	}
	return ""
}

func (x *DhcpSubnetLease4) GetDeletionTimestamp() string {
	if x != nil {
		return x.DeletionTimestamp
	}
	return ""
}

func (x *DhcpSubnetLease4) GetLinks() map[string]string {
	if x != nil {
		return x.Links
	}
	return nil
}

func (x *DhcpSubnetLease4) GetSubnet4() string {
	if x != nil {
		return x.Subnet4
	}
	return ""
}

func (x *DhcpSubnetLease4) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *DhcpSubnetLease4) GetAddressType() string {
	if x != nil {
		return x.AddressType
	}
	return ""
}

func (x *DhcpSubnetLease4) GetHwAddress() string {
	if x != nil {
		return x.HwAddress
	}
	return ""
}

func (x *DhcpSubnetLease4) GetHwAddressOrganization() string {
	if x != nil {
		return x.HwAddressOrganization
	}
	return ""
}

func (x *DhcpSubnetLease4) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *DhcpSubnetLease4) GetValidLifetime() uint32 {
	if x != nil {
		return x.ValidLifetime
	}
	return 0
}

func (x *DhcpSubnetLease4) GetExpire() string {
	if x != nil {
		return x.Expire
	}
	return ""
}

func (x *DhcpSubnetLease4) GetHostname() string {
	if x != nil {
		return x.Hostname
	}
	return ""
}

func (x *DhcpSubnetLease4) GetFingerprint() string {
	if x != nil {
		return x.Fingerprint
	}
	return ""
}

func (x *DhcpSubnetLease4) GetVendorId() string {
	if x != nil {
		return x.VendorId
	}
	return ""
}

func (x *DhcpSubnetLease4) GetOperatingSystem() string {
	if x != nil {
		return x.OperatingSystem
	}
	return ""
}

func (x *DhcpSubnetLease4) GetClientType() string {
	if x != nil {
		return x.ClientType
	}
	return ""
}

func (x *DhcpSubnetLease4) GetLeaseState() string {
	if x != nil {
		return x.LeaseState
	}
	return ""
}

type GetLease4ByIpRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Subnet4Id string `protobuf:"bytes,1,opt,name=subnet4_id,json=subnet4Id,proto3" json:"subnet4_id,omitempty"`
	Ip        string `protobuf:"bytes,2,opt,name=ip,proto3" json:"ip,omitempty"`
}

func (x *GetLease4ByIpRequest) Reset() {
	*x = GetLease4ByIpRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLease4ByIpRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLease4ByIpRequest) ProtoMessage() {}

func (x *GetLease4ByIpRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLease4ByIpRequest.ProtoReflect.Descriptor instead.
func (*GetLease4ByIpRequest) Descriptor() ([]byte, []int) {
	return file_dhcp_proto_rawDescGZIP(), []int{37}
}

func (x *GetLease4ByIpRequest) GetSubnet4Id() string {
	if x != nil {
		return x.Subnet4Id
	}
	return ""
}

func (x *GetLease4ByIpRequest) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

type GetLease4ByIpResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubnetLease4S *DhcpSubnetLease4 `protobuf:"bytes,1,opt,name=subnet_lease4s,json=subnetLease4s,proto3" json:"subnet_lease4s,omitempty"`
}

func (x *GetLease4ByIpResponse) Reset() {
	*x = GetLease4ByIpResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLease4ByIpResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLease4ByIpResponse) ProtoMessage() {}

func (x *GetLease4ByIpResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLease4ByIpResponse.ProtoReflect.Descriptor instead.
func (*GetLease4ByIpResponse) Descriptor() ([]byte, []int) {
	return file_dhcp_proto_rawDescGZIP(), []int{38}
}

func (x *GetLease4ByIpResponse) GetSubnetLease4S() *DhcpSubnetLease4 {
	if x != nil {
		return x.SubnetLease4S
	}
	return nil
}

type GetSubnet6Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Prefixes []string `protobuf:"bytes,1,rep,name=prefixes,proto3" json:"prefixes,omitempty"`
}

func (x *GetSubnet6Request) Reset() {
	*x = GetSubnet6Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSubnet6Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSubnet6Request) ProtoMessage() {}

func (x *GetSubnet6Request) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSubnet6Request.ProtoReflect.Descriptor instead.
func (*GetSubnet6Request) Descriptor() ([]byte, []int) {
	return file_dhcp_proto_rawDescGZIP(), []int{39}
}

func (x *GetSubnet6Request) GetPrefixes() []string {
	if x != nil {
		return x.Prefixes
	}
	return nil
}

type GetSubnet6Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Subnet6S []*DhcpSubnet6 `protobuf:"bytes,1,rep,name=subnet6s,proto3" json:"subnet6s,omitempty"`
}

func (x *GetSubnet6Response) Reset() {
	*x = GetSubnet6Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSubnet6Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSubnet6Response) ProtoMessage() {}

func (x *GetSubnet6Response) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSubnet6Response.ProtoReflect.Descriptor instead.
func (*GetSubnet6Response) Descriptor() ([]byte, []int) {
	return file_dhcp_proto_rawDescGZIP(), []int{40}
}

func (x *GetSubnet6Response) GetSubnet6S() []*DhcpSubnet6 {
	if x != nil {
		return x.Subnet6S
	}
	return nil
}

type DhcpSubnet6 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                    string            `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Type                  string            `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	CreationTimestamp     string            `protobuf:"bytes,3,opt,name=creation_timestamp,json=creationTimestamp,proto3" json:"creation_timestamp,omitempty"`
	DeletionTimestamp     string            `protobuf:"bytes,4,opt,name=deletion_timestamp,json=deletionTimestamp,proto3" json:"deletion_timestamp,omitempty"`
	Links                 map[string]string `protobuf:"bytes,5,rep,name=links,proto3" json:"links,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Subnet                string            `protobuf:"bytes,6,opt,name=subnet,proto3" json:"subnet,omitempty"`
	IpNet                 string            `protobuf:"bytes,7,opt,name=ip_net,json=ipNet,proto3" json:"ip_net,omitempty"`
	SubnetId              uint64            `protobuf:"varint,8,opt,name=subnet_id,json=subnetId,proto3" json:"subnet_id,omitempty"`
	ValidLifetime         uint32            `protobuf:"varint,9,opt,name=valid_lifetime,json=validLifetime,proto3" json:"valid_lifetime,omitempty"`
	MaxValidLifetime      uint32            `protobuf:"varint,10,opt,name=max_valid_lifetime,json=maxValidLifetime,proto3" json:"max_valid_lifetime,omitempty"`
	MinValidLifetime      uint32            `protobuf:"varint,11,opt,name=min_valid_lifetime,json=minValidLifetime,proto3" json:"min_valid_lifetime,omitempty"`
	PreferredLifetime     uint32            `protobuf:"varint,12,opt,name=preferred_lifetime,json=preferredLifetime,proto3" json:"preferred_lifetime,omitempty"`
	DomainServers         []string          `protobuf:"bytes,13,rep,name=domain_servers,json=domainServers,proto3" json:"domain_servers,omitempty"`
	ClientClass           string            `protobuf:"bytes,14,opt,name=client_class,json=clientClass,proto3" json:"client_class,omitempty"`
	IFaceName             string            `protobuf:"bytes,15,opt,name=i_face_name,json=iFaceName,proto3" json:"i_face_name,omitempty"`
	RelayAgentAddresses   []string          `protobuf:"bytes,16,rep,name=relay_agent_addresses,json=relayAgentAddresses,proto3" json:"relay_agent_addresses,omitempty"`
	RelayAgentInterfaceId string            `protobuf:"bytes,17,opt,name=relay_agent_interface_id,json=relayAgentInterfaceId,proto3" json:"relay_agent_interface_id,omitempty"`
	Tags                  string            `protobuf:"bytes,18,opt,name=tags,proto3" json:"tags,omitempty"`
	NodeNames             []string          `protobuf:"bytes,19,rep,name=node_names,json=nodeNames,proto3" json:"node_names,omitempty"`
	Nodes                 []string          `protobuf:"bytes,20,rep,name=nodes,proto3" json:"nodes,omitempty"`
	RapidCommit           bool              `protobuf:"varint,21,opt,name=rapid_commit,json=rapidCommit,proto3" json:"rapid_commit,omitempty"`
	UseEui64              bool              `protobuf:"varint,22,opt,name=use_eui64,json=useEui64,proto3" json:"use_eui64,omitempty"`
	Capacity              uint64            `protobuf:"varint,23,opt,name=capacity,proto3" json:"capacity,omitempty"`
	UsedRatio             string            `protobuf:"bytes,24,opt,name=used_ratio,json=usedRatio,proto3" json:"used_ratio,omitempty"`
	UsedCount             uint64            `protobuf:"varint,25,opt,name=used_count,json=usedCount,proto3" json:"used_count,omitempty"`
}

func (x *DhcpSubnet6) Reset() {
	*x = DhcpSubnet6{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DhcpSubnet6) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DhcpSubnet6) ProtoMessage() {}

func (x *DhcpSubnet6) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DhcpSubnet6.ProtoReflect.Descriptor instead.
func (*DhcpSubnet6) Descriptor() ([]byte, []int) {
	return file_dhcp_proto_rawDescGZIP(), []int{41}
}

func (x *DhcpSubnet6) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *DhcpSubnet6) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *DhcpSubnet6) GetCreationTimestamp() string {
	if x != nil {
		return x.CreationTimestamp
	}
	return ""
}

func (x *DhcpSubnet6) GetDeletionTimestamp() string {
	if x != nil {
		return x.DeletionTimestamp
	}
	return ""
}

func (x *DhcpSubnet6) GetLinks() map[string]string {
	if x != nil {
		return x.Links
	}
	return nil
}

func (x *DhcpSubnet6) GetSubnet() string {
	if x != nil {
		return x.Subnet
	}
	return ""
}

func (x *DhcpSubnet6) GetIpNet() string {
	if x != nil {
		return x.IpNet
	}
	return ""
}

func (x *DhcpSubnet6) GetSubnetId() uint64 {
	if x != nil {
		return x.SubnetId
	}
	return 0
}

func (x *DhcpSubnet6) GetValidLifetime() uint32 {
	if x != nil {
		return x.ValidLifetime
	}
	return 0
}

func (x *DhcpSubnet6) GetMaxValidLifetime() uint32 {
	if x != nil {
		return x.MaxValidLifetime
	}
	return 0
}

func (x *DhcpSubnet6) GetMinValidLifetime() uint32 {
	if x != nil {
		return x.MinValidLifetime
	}
	return 0
}

func (x *DhcpSubnet6) GetPreferredLifetime() uint32 {
	if x != nil {
		return x.PreferredLifetime
	}
	return 0
}

func (x *DhcpSubnet6) GetDomainServers() []string {
	if x != nil {
		return x.DomainServers
	}
	return nil
}

func (x *DhcpSubnet6) GetClientClass() string {
	if x != nil {
		return x.ClientClass
	}
	return ""
}

func (x *DhcpSubnet6) GetIFaceName() string {
	if x != nil {
		return x.IFaceName
	}
	return ""
}

func (x *DhcpSubnet6) GetRelayAgentAddresses() []string {
	if x != nil {
		return x.RelayAgentAddresses
	}
	return nil
}

func (x *DhcpSubnet6) GetRelayAgentInterfaceId() string {
	if x != nil {
		return x.RelayAgentInterfaceId
	}
	return ""
}

func (x *DhcpSubnet6) GetTags() string {
	if x != nil {
		return x.Tags
	}
	return ""
}

func (x *DhcpSubnet6) GetNodeNames() []string {
	if x != nil {
		return x.NodeNames
	}
	return nil
}

func (x *DhcpSubnet6) GetNodes() []string {
	if x != nil {
		return x.Nodes
	}
	return nil
}

func (x *DhcpSubnet6) GetRapidCommit() bool {
	if x != nil {
		return x.RapidCommit
	}
	return false
}

func (x *DhcpSubnet6) GetUseEui64() bool {
	if x != nil {
		return x.UseEui64
	}
	return false
}

func (x *DhcpSubnet6) GetCapacity() uint64 {
	if x != nil {
		return x.Capacity
	}
	return 0
}

func (x *DhcpSubnet6) GetUsedRatio() string {
	if x != nil {
		return x.UsedRatio
	}
	return ""
}

func (x *DhcpSubnet6) GetUsedCount() uint64 {
	if x != nil {
		return x.UsedCount
	}
	return 0
}

type GetPool6BySubnet6IdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Subnet *DhcpSubnet6 `protobuf:"bytes,1,opt,name=subnet,proto3" json:"subnet,omitempty"`
}

func (x *GetPool6BySubnet6IdRequest) Reset() {
	*x = GetPool6BySubnet6IdRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPool6BySubnet6IdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPool6BySubnet6IdRequest) ProtoMessage() {}

func (x *GetPool6BySubnet6IdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPool6BySubnet6IdRequest.ProtoReflect.Descriptor instead.
func (*GetPool6BySubnet6IdRequest) Descriptor() ([]byte, []int) {
	return file_dhcp_proto_rawDescGZIP(), []int{42}
}

func (x *GetPool6BySubnet6IdRequest) GetSubnet() *DhcpSubnet6 {
	if x != nil {
		return x.Subnet
	}
	return nil
}

type GetPool6BySubnet6IdResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pool6S []*DhcpPool6 `protobuf:"bytes,1,rep,name=pool6s,proto3" json:"pool6s,omitempty"`
}

func (x *GetPool6BySubnet6IdResponse) Reset() {
	*x = GetPool6BySubnet6IdResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPool6BySubnet6IdResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPool6BySubnet6IdResponse) ProtoMessage() {}

func (x *GetPool6BySubnet6IdResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPool6BySubnet6IdResponse.ProtoReflect.Descriptor instead.
func (*GetPool6BySubnet6IdResponse) Descriptor() ([]byte, []int) {
	return file_dhcp_proto_rawDescGZIP(), []int{43}
}

func (x *GetPool6BySubnet6IdResponse) GetPool6S() []*DhcpPool6 {
	if x != nil {
		return x.Pool6S
	}
	return nil
}

type DhcpPool6 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                string            `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Type              string            `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	CreationTimestamp string            `protobuf:"bytes,3,opt,name=creation_timestamp,json=creationTimestamp,proto3" json:"creation_timestamp,omitempty"`
	DeletionTimestamp string            `protobuf:"bytes,4,opt,name=deletion_timestamp,json=deletionTimestamp,proto3" json:"deletion_timestamp,omitempty"`
	Links             map[string]string `protobuf:"bytes,5,rep,name=links,proto3" json:"links,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Subnet6           string            `protobuf:"bytes,6,opt,name=subnet6,proto3" json:"subnet6,omitempty"`
	BeginAddress      string            `protobuf:"bytes,7,opt,name=begin_address,json=beginAddress,proto3" json:"begin_address,omitempty"`
	BeginIp           string            `protobuf:"bytes,8,opt,name=begin_ip,json=beginIp,proto3" json:"begin_ip,omitempty"`
	EndAddress        string            `protobuf:"bytes,9,opt,name=end_address,json=endAddress,proto3" json:"end_address,omitempty"`
	EndIp             string            `protobuf:"bytes,10,opt,name=end_ip,json=endIp,proto3" json:"end_ip,omitempty"`
	Capacity          uint64            `protobuf:"varint,11,opt,name=capacity,proto3" json:"capacity,omitempty"`
	UsedRatio         string            `protobuf:"bytes,12,opt,name=used_ratio,json=usedRatio,proto3" json:"used_ratio,omitempty"`
	UsedCount         uint64            `protobuf:"varint,13,opt,name=used_count,json=usedCount,proto3" json:"used_count,omitempty"`
	Template          string            `protobuf:"bytes,14,opt,name=template,proto3" json:"template,omitempty"`
	Comment           string            `protobuf:"bytes,15,opt,name=comment,proto3" json:"comment,omitempty"`
}

func (x *DhcpPool6) Reset() {
	*x = DhcpPool6{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DhcpPool6) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DhcpPool6) ProtoMessage() {}

func (x *DhcpPool6) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DhcpPool6.ProtoReflect.Descriptor instead.
func (*DhcpPool6) Descriptor() ([]byte, []int) {
	return file_dhcp_proto_rawDescGZIP(), []int{44}
}

func (x *DhcpPool6) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *DhcpPool6) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *DhcpPool6) GetCreationTimestamp() string {
	if x != nil {
		return x.CreationTimestamp
	}
	return ""
}

func (x *DhcpPool6) GetDeletionTimestamp() string {
	if x != nil {
		return x.DeletionTimestamp
	}
	return ""
}

func (x *DhcpPool6) GetLinks() map[string]string {
	if x != nil {
		return x.Links
	}
	return nil
}

func (x *DhcpPool6) GetSubnet6() string {
	if x != nil {
		return x.Subnet6
	}
	return ""
}

func (x *DhcpPool6) GetBeginAddress() string {
	if x != nil {
		return x.BeginAddress
	}
	return ""
}

func (x *DhcpPool6) GetBeginIp() string {
	if x != nil {
		return x.BeginIp
	}
	return ""
}

func (x *DhcpPool6) GetEndAddress() string {
	if x != nil {
		return x.EndAddress
	}
	return ""
}

func (x *DhcpPool6) GetEndIp() string {
	if x != nil {
		return x.EndIp
	}
	return ""
}

func (x *DhcpPool6) GetCapacity() uint64 {
	if x != nil {
		return x.Capacity
	}
	return 0
}

func (x *DhcpPool6) GetUsedRatio() string {
	if x != nil {
		return x.UsedRatio
	}
	return ""
}

func (x *DhcpPool6) GetUsedCount() uint64 {
	if x != nil {
		return x.UsedCount
	}
	return 0
}

func (x *DhcpPool6) GetTemplate() string {
	if x != nil {
		return x.Template
	}
	return ""
}

func (x *DhcpPool6) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

type GetReservedPool6BySubnet6IdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Subnet *DhcpSubnet6 `protobuf:"bytes,1,opt,name=subnet,proto3" json:"subnet,omitempty"`
}

func (x *GetReservedPool6BySubnet6IdRequest) Reset() {
	*x = GetReservedPool6BySubnet6IdRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetReservedPool6BySubnet6IdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetReservedPool6BySubnet6IdRequest) ProtoMessage() {}

func (x *GetReservedPool6BySubnet6IdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetReservedPool6BySubnet6IdRequest.ProtoReflect.Descriptor instead.
func (*GetReservedPool6BySubnet6IdRequest) Descriptor() ([]byte, []int) {
	return file_dhcp_proto_rawDescGZIP(), []int{45}
}

func (x *GetReservedPool6BySubnet6IdRequest) GetSubnet() *DhcpSubnet6 {
	if x != nil {
		return x.Subnet
	}
	return nil
}

type GetReservedPool6BySubnet6IdResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReservedPool6S []*DhcpReservedPool6 `protobuf:"bytes,1,rep,name=reserved_pool6s,json=reservedPool6s,proto3" json:"reserved_pool6s,omitempty"`
}

func (x *GetReservedPool6BySubnet6IdResponse) Reset() {
	*x = GetReservedPool6BySubnet6IdResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetReservedPool6BySubnet6IdResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetReservedPool6BySubnet6IdResponse) ProtoMessage() {}

func (x *GetReservedPool6BySubnet6IdResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetReservedPool6BySubnet6IdResponse.ProtoReflect.Descriptor instead.
func (*GetReservedPool6BySubnet6IdResponse) Descriptor() ([]byte, []int) {
	return file_dhcp_proto_rawDescGZIP(), []int{46}
}

func (x *GetReservedPool6BySubnet6IdResponse) GetReservedPool6S() []*DhcpReservedPool6 {
	if x != nil {
		return x.ReservedPool6S
	}
	return nil
}

type DhcpReservedPool6 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                string            `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Type              string            `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	CreationTimestamp string            `protobuf:"bytes,3,opt,name=creation_timestamp,json=creationTimestamp,proto3" json:"creation_timestamp,omitempty"`
	DeletionTimestamp string            `protobuf:"bytes,4,opt,name=deletion_timestamp,json=deletionTimestamp,proto3" json:"deletion_timestamp,omitempty"`
	Links             map[string]string `protobuf:"bytes,5,rep,name=links,proto3" json:"links,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Subnet6           string            `protobuf:"bytes,6,opt,name=subnet6,proto3" json:"subnet6,omitempty"`
	BeginAddress      string            `protobuf:"bytes,7,opt,name=begin_address,json=beginAddress,proto3" json:"begin_address,omitempty"`
	BeginIp           string            `protobuf:"bytes,8,opt,name=begin_ip,json=beginIp,proto3" json:"begin_ip,omitempty"`
	EndAddress        string            `protobuf:"bytes,9,opt,name=end_address,json=endAddress,proto3" json:"end_address,omitempty"`
	EndIp             string            `protobuf:"bytes,10,opt,name=end_ip,json=endIp,proto3" json:"end_ip,omitempty"`
	Capacity          uint64            `protobuf:"varint,11,opt,name=capacity,proto3" json:"capacity,omitempty"`
	UsedRatio         string            `protobuf:"bytes,12,opt,name=used_ratio,json=usedRatio,proto3" json:"used_ratio,omitempty"`
	UsedCount         uint64            `protobuf:"varint,13,opt,name=used_count,json=usedCount,proto3" json:"used_count,omitempty"`
	Template          string            `protobuf:"bytes,14,opt,name=template,proto3" json:"template,omitempty"`
	Comment           string            `protobuf:"bytes,15,opt,name=comment,proto3" json:"comment,omitempty"`
}

func (x *DhcpReservedPool6) Reset() {
	*x = DhcpReservedPool6{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DhcpReservedPool6) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DhcpReservedPool6) ProtoMessage() {}

func (x *DhcpReservedPool6) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DhcpReservedPool6.ProtoReflect.Descriptor instead.
func (*DhcpReservedPool6) Descriptor() ([]byte, []int) {
	return file_dhcp_proto_rawDescGZIP(), []int{47}
}

func (x *DhcpReservedPool6) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *DhcpReservedPool6) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *DhcpReservedPool6) GetCreationTimestamp() string {
	if x != nil {
		return x.CreationTimestamp
	}
	return ""
}

func (x *DhcpReservedPool6) GetDeletionTimestamp() string {
	if x != nil {
		return x.DeletionTimestamp
	}
	return ""
}

func (x *DhcpReservedPool6) GetLinks() map[string]string {
	if x != nil {
		return x.Links
	}
	return nil
}

func (x *DhcpReservedPool6) GetSubnet6() string {
	if x != nil {
		return x.Subnet6
	}
	return ""
}

func (x *DhcpReservedPool6) GetBeginAddress() string {
	if x != nil {
		return x.BeginAddress
	}
	return ""
}

func (x *DhcpReservedPool6) GetBeginIp() string {
	if x != nil {
		return x.BeginIp
	}
	return ""
}

func (x *DhcpReservedPool6) GetEndAddress() string {
	if x != nil {
		return x.EndAddress
	}
	return ""
}

func (x *DhcpReservedPool6) GetEndIp() string {
	if x != nil {
		return x.EndIp
	}
	return ""
}

func (x *DhcpReservedPool6) GetCapacity() uint64 {
	if x != nil {
		return x.Capacity
	}
	return 0
}

func (x *DhcpReservedPool6) GetUsedRatio() string {
	if x != nil {
		return x.UsedRatio
	}
	return ""
}

func (x *DhcpReservedPool6) GetUsedCount() uint64 {
	if x != nil {
		return x.UsedCount
	}
	return 0
}

func (x *DhcpReservedPool6) GetTemplate() string {
	if x != nil {
		return x.Template
	}
	return ""
}

func (x *DhcpReservedPool6) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

type GetReservation6BySubnet6IdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Subnet6Id string `protobuf:"bytes,1,opt,name=subnet6_id,json=subnet6Id,proto3" json:"subnet6_id,omitempty"`
}

func (x *GetReservation6BySubnet6IdRequest) Reset() {
	*x = GetReservation6BySubnet6IdRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetReservation6BySubnet6IdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetReservation6BySubnet6IdRequest) ProtoMessage() {}

func (x *GetReservation6BySubnet6IdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetReservation6BySubnet6IdRequest.ProtoReflect.Descriptor instead.
func (*GetReservation6BySubnet6IdRequest) Descriptor() ([]byte, []int) {
	return file_dhcp_proto_rawDescGZIP(), []int{48}
}

func (x *GetReservation6BySubnet6IdRequest) GetSubnet6Id() string {
	if x != nil {
		return x.Subnet6Id
	}
	return ""
}

type GetReservation6BySubnet6IdResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Reservation6S []*DhcpReservation6 `protobuf:"bytes,1,rep,name=reservation6s,proto3" json:"reservation6s,omitempty"`
}

func (x *GetReservation6BySubnet6IdResponse) Reset() {
	*x = GetReservation6BySubnet6IdResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetReservation6BySubnet6IdResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetReservation6BySubnet6IdResponse) ProtoMessage() {}

func (x *GetReservation6BySubnet6IdResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetReservation6BySubnet6IdResponse.ProtoReflect.Descriptor instead.
func (*GetReservation6BySubnet6IdResponse) Descriptor() ([]byte, []int) {
	return file_dhcp_proto_rawDescGZIP(), []int{49}
}

func (x *GetReservation6BySubnet6IdResponse) GetReservation6S() []*DhcpReservation6 {
	if x != nil {
		return x.Reservation6S
	}
	return nil
}

type DhcpReservation6 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                string            `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Type              string            `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	CreationTimestamp string            `protobuf:"bytes,3,opt,name=creation_timestamp,json=creationTimestamp,proto3" json:"creation_timestamp,omitempty"`
	DeletionTimestamp string            `protobuf:"bytes,4,opt,name=deletion_timestamp,json=deletionTimestamp,proto3" json:"deletion_timestamp,omitempty"`
	Links             map[string]string `protobuf:"bytes,5,rep,name=links,proto3" json:"links,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Subnet6           string            `protobuf:"bytes,6,opt,name=subnet6,proto3" json:"subnet6,omitempty"`
	DUid              string            `protobuf:"bytes,7,opt,name=d_uid,json=dUid,proto3" json:"d_uid,omitempty"`
	HwAddress         string            `protobuf:"bytes,8,opt,name=hw_address,json=hwAddress,proto3" json:"hw_address,omitempty"`
	IpAddresses       []string          `protobuf:"bytes,9,rep,name=ip_addresses,json=ipAddresses,proto3" json:"ip_addresses,omitempty"`
	Ips               []string          `protobuf:"bytes,10,rep,name=ips,proto3" json:"ips,omitempty"`
	Prefixes          []string          `protobuf:"bytes,11,rep,name=prefixes,proto3" json:"prefixes,omitempty"`
	Capacity          uint64            `protobuf:"varint,12,opt,name=capacity,proto3" json:"capacity,omitempty"`
	UsedRatio         string            `protobuf:"bytes,13,opt,name=usedRatio,proto3" json:"usedRatio,omitempty"`
	UsedCount         uint64            `protobuf:"varint,14,opt,name=used_count,json=usedCount,proto3" json:"used_count,omitempty"`
	Comment           string            `protobuf:"bytes,15,opt,name=comment,proto3" json:"comment,omitempty"`
}

func (x *DhcpReservation6) Reset() {
	*x = DhcpReservation6{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DhcpReservation6) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DhcpReservation6) ProtoMessage() {}

func (x *DhcpReservation6) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DhcpReservation6.ProtoReflect.Descriptor instead.
func (*DhcpReservation6) Descriptor() ([]byte, []int) {
	return file_dhcp_proto_rawDescGZIP(), []int{50}
}

func (x *DhcpReservation6) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *DhcpReservation6) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *DhcpReservation6) GetCreationTimestamp() string {
	if x != nil {
		return x.CreationTimestamp
	}
	return ""
}

func (x *DhcpReservation6) GetDeletionTimestamp() string {
	if x != nil {
		return x.DeletionTimestamp
	}
	return ""
}

func (x *DhcpReservation6) GetLinks() map[string]string {
	if x != nil {
		return x.Links
	}
	return nil
}

func (x *DhcpReservation6) GetSubnet6() string {
	if x != nil {
		return x.Subnet6
	}
	return ""
}

func (x *DhcpReservation6) GetDUid() string {
	if x != nil {
		return x.DUid
	}
	return ""
}

func (x *DhcpReservation6) GetHwAddress() string {
	if x != nil {
		return x.HwAddress
	}
	return ""
}

func (x *DhcpReservation6) GetIpAddresses() []string {
	if x != nil {
		return x.IpAddresses
	}
	return nil
}

func (x *DhcpReservation6) GetIps() []string {
	if x != nil {
		return x.Ips
	}
	return nil
}

func (x *DhcpReservation6) GetPrefixes() []string {
	if x != nil {
		return x.Prefixes
	}
	return nil
}

func (x *DhcpReservation6) GetCapacity() uint64 {
	if x != nil {
		return x.Capacity
	}
	return 0
}

func (x *DhcpReservation6) GetUsedRatio() string {
	if x != nil {
		return x.UsedRatio
	}
	return ""
}

func (x *DhcpReservation6) GetUsedCount() uint64 {
	if x != nil {
		return x.UsedCount
	}
	return 0
}

func (x *DhcpReservation6) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

type GetLease6BySubnet6IdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Subnet6Id string `protobuf:"bytes,1,opt,name=subnet6_id,json=subnet6Id,proto3" json:"subnet6_id,omitempty"`
}

func (x *GetLease6BySubnet6IdRequest) Reset() {
	*x = GetLease6BySubnet6IdRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLease6BySubnet6IdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLease6BySubnet6IdRequest) ProtoMessage() {}

func (x *GetLease6BySubnet6IdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLease6BySubnet6IdRequest.ProtoReflect.Descriptor instead.
func (*GetLease6BySubnet6IdRequest) Descriptor() ([]byte, []int) {
	return file_dhcp_proto_rawDescGZIP(), []int{51}
}

func (x *GetLease6BySubnet6IdRequest) GetSubnet6Id() string {
	if x != nil {
		return x.Subnet6Id
	}
	return ""
}

type GetLease6BySubnet6IdResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubnetLease6 []*DhcpSubnetLease6 `protobuf:"bytes,1,rep,name=subnet_lease6,json=subnetLease6,proto3" json:"subnet_lease6,omitempty"`
}

func (x *GetLease6BySubnet6IdResponse) Reset() {
	*x = GetLease6BySubnet6IdResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLease6BySubnet6IdResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLease6BySubnet6IdResponse) ProtoMessage() {}

func (x *GetLease6BySubnet6IdResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLease6BySubnet6IdResponse.ProtoReflect.Descriptor instead.
func (*GetLease6BySubnet6IdResponse) Descriptor() ([]byte, []int) {
	return file_dhcp_proto_rawDescGZIP(), []int{52}
}

func (x *GetLease6BySubnet6IdResponse) GetSubnetLease6() []*DhcpSubnetLease6 {
	if x != nil {
		return x.SubnetLease6
	}
	return nil
}

type GetLease6ByIpRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Subnet6Id string `protobuf:"bytes,1,opt,name=subnet6_id,json=subnet6Id,proto3" json:"subnet6_id,omitempty"`
	Ip        string `protobuf:"bytes,2,opt,name=ip,proto3" json:"ip,omitempty"`
}

func (x *GetLease6ByIpRequest) Reset() {
	*x = GetLease6ByIpRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLease6ByIpRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLease6ByIpRequest) ProtoMessage() {}

func (x *GetLease6ByIpRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLease6ByIpRequest.ProtoReflect.Descriptor instead.
func (*GetLease6ByIpRequest) Descriptor() ([]byte, []int) {
	return file_dhcp_proto_rawDescGZIP(), []int{53}
}

func (x *GetLease6ByIpRequest) GetSubnet6Id() string {
	if x != nil {
		return x.Subnet6Id
	}
	return ""
}

func (x *GetLease6ByIpRequest) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

type GetLease6ByIpResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubnetLease6 *DhcpSubnetLease6 `protobuf:"bytes,2,opt,name=subnet_lease6,json=subnetLease6,proto3" json:"subnet_lease6,omitempty"`
}

func (x *GetLease6ByIpResponse) Reset() {
	*x = GetLease6ByIpResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLease6ByIpResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLease6ByIpResponse) ProtoMessage() {}

func (x *GetLease6ByIpResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLease6ByIpResponse.ProtoReflect.Descriptor instead.
func (*GetLease6ByIpResponse) Descriptor() ([]byte, []int) {
	return file_dhcp_proto_rawDescGZIP(), []int{54}
}

func (x *GetLease6ByIpResponse) GetSubnetLease6() *DhcpSubnetLease6 {
	if x != nil {
		return x.SubnetLease6
	}
	return nil
}

type DhcpSubnetLease6 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                    string            `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Type                  string            `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	CreationTimestamp     string            `protobuf:"bytes,3,opt,name=creation_timestamp,json=creationTimestamp,proto3" json:"creation_timestamp,omitempty"`
	DeletionTimestamp     string            `protobuf:"bytes,4,opt,name=deletion_timestamp,json=deletionTimestamp,proto3" json:"deletion_timestamp,omitempty"`
	Links                 map[string]string `protobuf:"bytes,5,rep,name=links,proto3" json:"links,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Subnet6               string            `protobuf:"bytes,6,opt,name=subnet6,proto3" json:"subnet6,omitempty"`
	Address               string            `protobuf:"bytes,7,opt,name=address,proto3" json:"address,omitempty"`
	AddressType           string            `protobuf:"bytes,8,opt,name=address_type,json=addressType,proto3" json:"address_type,omitempty"`
	PrefixLen             uint32            `protobuf:"varint,9,opt,name=prefix_len,json=prefixLen,proto3" json:"prefix_len,omitempty"`
	DUid                  string            `protobuf:"bytes,10,opt,name=d_uid,json=dUid,proto3" json:"d_uid,omitempty"`
	IAid                  uint32            `protobuf:"varint,11,opt,name=i_aid,json=iAid,proto3" json:"i_aid,omitempty"`
	PreferredLifetime     uint32            `protobuf:"varint,12,opt,name=preferred_lifetime,json=preferredLifetime,proto3" json:"preferred_lifetime,omitempty"`
	ValidLifetime         uint32            `protobuf:"varint,13,opt,name=valid_lifetime,json=validLifetime,proto3" json:"valid_lifetime,omitempty"`
	Expire                string            `protobuf:"bytes,14,opt,name=expire,proto3" json:"expire,omitempty"`
	HwAddress             string            `protobuf:"bytes,15,opt,name=hw_address,json=hwAddress,proto3" json:"hw_address,omitempty"`
	HwAddressType         string            `protobuf:"bytes,16,opt,name=hw_address_type,json=hwAddressType,proto3" json:"hw_address_type,omitempty"`
	HwAddressSource       string            `protobuf:"bytes,17,opt,name=hw_address_source,json=hwAddressSource,proto3" json:"hw_address_source,omitempty"`
	HwAddressOrganization string            `protobuf:"bytes,18,opt,name=hw_address_organization,json=hwAddressOrganization,proto3" json:"hw_address_organization,omitempty"`
	LeaseType             string            `protobuf:"bytes,19,opt,name=lease_type,json=leaseType,proto3" json:"lease_type,omitempty"`
	Hostname              string            `protobuf:"bytes,20,opt,name=hostname,proto3" json:"hostname,omitempty"`
	Fingerprint           string            `protobuf:"bytes,21,opt,name=fingerprint,proto3" json:"fingerprint,omitempty"`
	VendorId              string            `protobuf:"bytes,22,opt,name=vendor_id,json=vendorId,proto3" json:"vendor_id,omitempty"`
	OperatingSystem       string            `protobuf:"bytes,23,opt,name=operating_system,json=operatingSystem,proto3" json:"operating_system,omitempty"`
	ClientType            string            `protobuf:"bytes,24,opt,name=client_type,json=clientType,proto3" json:"client_type,omitempty"`
	LeaseState            string            `protobuf:"bytes,25,opt,name=leaseState,proto3" json:"leaseState,omitempty"`
}

func (x *DhcpSubnetLease6) Reset() {
	*x = DhcpSubnetLease6{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DhcpSubnetLease6) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DhcpSubnetLease6) ProtoMessage() {}

func (x *DhcpSubnetLease6) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DhcpSubnetLease6.ProtoReflect.Descriptor instead.
func (*DhcpSubnetLease6) Descriptor() ([]byte, []int) {
	return file_dhcp_proto_rawDescGZIP(), []int{55}
}

func (x *DhcpSubnetLease6) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *DhcpSubnetLease6) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *DhcpSubnetLease6) GetCreationTimestamp() string {
	if x != nil {
		return x.CreationTimestamp
	}
	return ""
}

func (x *DhcpSubnetLease6) GetDeletionTimestamp() string {
	if x != nil {
		return x.DeletionTimestamp
	}
	return ""
}

func (x *DhcpSubnetLease6) GetLinks() map[string]string {
	if x != nil {
		return x.Links
	}
	return nil
}

func (x *DhcpSubnetLease6) GetSubnet6() string {
	if x != nil {
		return x.Subnet6
	}
	return ""
}

func (x *DhcpSubnetLease6) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *DhcpSubnetLease6) GetAddressType() string {
	if x != nil {
		return x.AddressType
	}
	return ""
}

func (x *DhcpSubnetLease6) GetPrefixLen() uint32 {
	if x != nil {
		return x.PrefixLen
	}
	return 0
}

func (x *DhcpSubnetLease6) GetDUid() string {
	if x != nil {
		return x.DUid
	}
	return ""
}

func (x *DhcpSubnetLease6) GetIAid() uint32 {
	if x != nil {
		return x.IAid
	}
	return 0
}

func (x *DhcpSubnetLease6) GetPreferredLifetime() uint32 {
	if x != nil {
		return x.PreferredLifetime
	}
	return 0
}

func (x *DhcpSubnetLease6) GetValidLifetime() uint32 {
	if x != nil {
		return x.ValidLifetime
	}
	return 0
}

func (x *DhcpSubnetLease6) GetExpire() string {
	if x != nil {
		return x.Expire
	}
	return ""
}

func (x *DhcpSubnetLease6) GetHwAddress() string {
	if x != nil {
		return x.HwAddress
	}
	return ""
}

func (x *DhcpSubnetLease6) GetHwAddressType() string {
	if x != nil {
		return x.HwAddressType
	}
	return ""
}

func (x *DhcpSubnetLease6) GetHwAddressSource() string {
	if x != nil {
		return x.HwAddressSource
	}
	return ""
}

func (x *DhcpSubnetLease6) GetHwAddressOrganization() string {
	if x != nil {
		return x.HwAddressOrganization
	}
	return ""
}

func (x *DhcpSubnetLease6) GetLeaseType() string {
	if x != nil {
		return x.LeaseType
	}
	return ""
}

func (x *DhcpSubnetLease6) GetHostname() string {
	if x != nil {
		return x.Hostname
	}
	return ""
}

func (x *DhcpSubnetLease6) GetFingerprint() string {
	if x != nil {
		return x.Fingerprint
	}
	return ""
}

func (x *DhcpSubnetLease6) GetVendorId() string {
	if x != nil {
		return x.VendorId
	}
	return ""
}

func (x *DhcpSubnetLease6) GetOperatingSystem() string {
	if x != nil {
		return x.OperatingSystem
	}
	return ""
}

func (x *DhcpSubnetLease6) GetClientType() string {
	if x != nil {
		return x.ClientType
	}
	return ""
}

func (x *DhcpSubnetLease6) GetLeaseState() string {
	if x != nil {
		return x.LeaseState
	}
	return ""
}

type CreateReservation4SRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ParentSubnet *DhcpSubnet4      `protobuf:"bytes,1,opt,name=parent_subnet,json=parentSubnet,proto3" json:"parent_subnet,omitempty"`
	Reservation  *DhcpReservation4 `protobuf:"bytes,2,opt,name=reservation,proto3" json:"reservation,omitempty"`
}

func (x *CreateReservation4SRequest) Reset() {
	*x = CreateReservation4SRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateReservation4SRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateReservation4SRequest) ProtoMessage() {}

func (x *CreateReservation4SRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateReservation4SRequest.ProtoReflect.Descriptor instead.
func (*CreateReservation4SRequest) Descriptor() ([]byte, []int) {
	return file_dhcp_proto_rawDescGZIP(), []int{56}
}

func (x *CreateReservation4SRequest) GetParentSubnet() *DhcpSubnet4 {
	if x != nil {
		return x.ParentSubnet
	}
	return nil
}

func (x *CreateReservation4SRequest) GetReservation() *DhcpReservation4 {
	if x != nil {
		return x.Reservation
	}
	return nil
}

type CreateReservation4SResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Succeed bool `protobuf:"varint,1,opt,name=succeed,proto3" json:"succeed,omitempty"`
}

func (x *CreateReservation4SResponse) Reset() {
	*x = CreateReservation4SResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateReservation4SResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateReservation4SResponse) ProtoMessage() {}

func (x *CreateReservation4SResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateReservation4SResponse.ProtoReflect.Descriptor instead.
func (*CreateReservation4SResponse) Descriptor() ([]byte, []int) {
	return file_dhcp_proto_rawDescGZIP(), []int{57}
}

func (x *CreateReservation4SResponse) GetSucceed() bool {
	if x != nil {
		return x.Succeed
	}
	return false
}

type CreateReservedPool4Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ParentSubnet *DhcpSubnet4       `protobuf:"bytes,1,opt,name=parent_subnet,json=parentSubnet,proto3" json:"parent_subnet,omitempty"`
	ReservedPool *DhcpReservedPool4 `protobuf:"bytes,2,opt,name=reserved_pool,json=reservedPool,proto3" json:"reserved_pool,omitempty"`
}

func (x *CreateReservedPool4Request) Reset() {
	*x = CreateReservedPool4Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateReservedPool4Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateReservedPool4Request) ProtoMessage() {}

func (x *CreateReservedPool4Request) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateReservedPool4Request.ProtoReflect.Descriptor instead.
func (*CreateReservedPool4Request) Descriptor() ([]byte, []int) {
	return file_dhcp_proto_rawDescGZIP(), []int{58}
}

func (x *CreateReservedPool4Request) GetParentSubnet() *DhcpSubnet4 {
	if x != nil {
		return x.ParentSubnet
	}
	return nil
}

func (x *CreateReservedPool4Request) GetReservedPool() *DhcpReservedPool4 {
	if x != nil {
		return x.ReservedPool
	}
	return nil
}

type CreateReservedPool4Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Succeed bool `protobuf:"varint,1,opt,name=succeed,proto3" json:"succeed,omitempty"`
}

func (x *CreateReservedPool4Response) Reset() {
	*x = CreateReservedPool4Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateReservedPool4Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateReservedPool4Response) ProtoMessage() {}

func (x *CreateReservedPool4Response) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateReservedPool4Response.ProtoReflect.Descriptor instead.
func (*CreateReservedPool4Response) Descriptor() ([]byte, []int) {
	return file_dhcp_proto_rawDescGZIP(), []int{59}
}

func (x *CreateReservedPool4Response) GetSucceed() bool {
	if x != nil {
		return x.Succeed
	}
	return false
}

type CreateReservation6SRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ParentSubnet *DhcpSubnet6      `protobuf:"bytes,1,opt,name=parent_subnet,json=parentSubnet,proto3" json:"parent_subnet,omitempty"`
	Reservation  *DhcpReservation6 `protobuf:"bytes,2,opt,name=reservation,proto3" json:"reservation,omitempty"`
}

func (x *CreateReservation6SRequest) Reset() {
	*x = CreateReservation6SRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateReservation6SRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateReservation6SRequest) ProtoMessage() {}

func (x *CreateReservation6SRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateReservation6SRequest.ProtoReflect.Descriptor instead.
func (*CreateReservation6SRequest) Descriptor() ([]byte, []int) {
	return file_dhcp_proto_rawDescGZIP(), []int{60}
}

func (x *CreateReservation6SRequest) GetParentSubnet() *DhcpSubnet6 {
	if x != nil {
		return x.ParentSubnet
	}
	return nil
}

func (x *CreateReservation6SRequest) GetReservation() *DhcpReservation6 {
	if x != nil {
		return x.Reservation
	}
	return nil
}

type CreateReservation6SResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Succeed bool `protobuf:"varint,1,opt,name=succeed,proto3" json:"succeed,omitempty"`
}

func (x *CreateReservation6SResponse) Reset() {
	*x = CreateReservation6SResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateReservation6SResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateReservation6SResponse) ProtoMessage() {}

func (x *CreateReservation6SResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateReservation6SResponse.ProtoReflect.Descriptor instead.
func (*CreateReservation6SResponse) Descriptor() ([]byte, []int) {
	return file_dhcp_proto_rawDescGZIP(), []int{61}
}

func (x *CreateReservation6SResponse) GetSucceed() bool {
	if x != nil {
		return x.Succeed
	}
	return false
}

type CreateReservedPool6Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ParentSubnet *DhcpSubnet6       `protobuf:"bytes,1,opt,name=parent_subnet,json=parentSubnet,proto3" json:"parent_subnet,omitempty"`
	ReservedPool *DhcpReservedPool6 `protobuf:"bytes,2,opt,name=reserved_pool,json=reservedPool,proto3" json:"reserved_pool,omitempty"`
}

func (x *CreateReservedPool6Request) Reset() {
	*x = CreateReservedPool6Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateReservedPool6Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateReservedPool6Request) ProtoMessage() {}

func (x *CreateReservedPool6Request) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateReservedPool6Request.ProtoReflect.Descriptor instead.
func (*CreateReservedPool6Request) Descriptor() ([]byte, []int) {
	return file_dhcp_proto_rawDescGZIP(), []int{62}
}

func (x *CreateReservedPool6Request) GetParentSubnet() *DhcpSubnet6 {
	if x != nil {
		return x.ParentSubnet
	}
	return nil
}

func (x *CreateReservedPool6Request) GetReservedPool() *DhcpReservedPool6 {
	if x != nil {
		return x.ReservedPool
	}
	return nil
}

type CreateReservedPool6Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Succeed bool `protobuf:"varint,1,opt,name=succeed,proto3" json:"succeed,omitempty"`
}

func (x *CreateReservedPool6Response) Reset() {
	*x = CreateReservedPool6Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateReservedPool6Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateReservedPool6Response) ProtoMessage() {}

func (x *CreateReservedPool6Response) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateReservedPool6Response.ProtoReflect.Descriptor instead.
func (*CreateReservedPool6Response) Descriptor() ([]byte, []int) {
	return file_dhcp_proto_rawDescGZIP(), []int{63}
}

func (x *CreateReservedPool6Response) GetSucceed() bool {
	if x != nil {
		return x.Succeed
	}
	return false
}

var File_dhcp_proto protoreflect.FileDescriptor

var file_dhcp_proto_rawDesc = []byte{
	0x0a, 0x0a, 0x64, 0x68, 0x63, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x29, 0x0a, 0x17,
	0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x34, 0x57, 0x69, 0x74, 0x68, 0x49, 0x70,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x70, 0x22, 0xe1, 0x01, 0x0a, 0x07, 0x53, 0x75, 0x62, 0x6e,
	0x65, 0x74, 0x34, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x73,
	0x75, 0x62, 0x6e, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08,
	0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61, 0x70, 0x61,
	0x63, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x63, 0x61, 0x70, 0x61,
	0x63, 0x69, 0x74, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x75, 0x73, 0x65, 0x64, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x64, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x72, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x72, 0x6f, 0x75,
	0x74, 0x65, 0x72, 0x73, 0x12, 0x15, 0x0a, 0x06, 0x69, 0x70, 0x5f, 0x6e, 0x65, 0x74, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x69, 0x70, 0x4e, 0x65, 0x74, 0x22, 0xbc, 0x01, 0x0a, 0x18,
	0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x34, 0x57, 0x69, 0x74, 0x68, 0x49, 0x70,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63,
	0x65, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65,
	0x65, 0x64, 0x12, 0x40, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x34,
	0x57, 0x69, 0x74, 0x68, 0x49, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53,
	0x75, 0x62, 0x6e, 0x65, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x73, 0x75, 0x62,
	0x6e, 0x65, 0x74, 0x73, 0x1a, 0x44, 0x0a, 0x0c, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x1e, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x34, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x29, 0x0a, 0x17, 0x47, 0x65,
	0x74, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x36, 0x57, 0x69, 0x74, 0x68, 0x49, 0x70, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x70, 0x22, 0xe4, 0x01, 0x0a, 0x07, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74,
	0x36, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x75, 0x62,
	0x6e, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x73, 0x75,
	0x62, 0x6e, 0x65, 0x74, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69,
	0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69,
	0x74, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x75, 0x73, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x25, 0x0a, 0x0e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x64, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x5f,
	0x65, 0x75, 0x69, 0x36, 0x34, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x75, 0x73, 0x65,
	0x45, 0x75, 0x69, 0x36, 0x34, 0x12, 0x15, 0x0a, 0x06, 0x69, 0x70, 0x5f, 0x6e, 0x65, 0x74, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x69, 0x70, 0x4e, 0x65, 0x74, 0x22, 0xbc, 0x01, 0x0a,
	0x18, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x36, 0x57, 0x69, 0x74, 0x68, 0x49,
	0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63,
	0x63, 0x65, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63,
	0x65, 0x65, 0x64, 0x12, 0x40, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74,
	0x36, 0x57, 0x69, 0x74, 0x68, 0x49, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e,
	0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x73, 0x75,
	0x62, 0x6e, 0x65, 0x74, 0x73, 0x1a, 0x44, 0x0a, 0x0c, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x1e, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x36,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x2d, 0x0a, 0x19, 0x47,
	0x65, 0x74, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x73, 0x34, 0x57, 0x69, 0x74, 0x68, 0x49, 0x70,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x70, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x03, 0x69, 0x70, 0x73, 0x22, 0xc0, 0x01, 0x0a, 0x1a, 0x47,
	0x65, 0x74, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x73, 0x34, 0x57, 0x69, 0x74, 0x68, 0x49, 0x70,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63,
	0x63, 0x65, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63,
	0x65, 0x65, 0x64, 0x12, 0x42, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74,
	0x73, 0x34, 0x57, 0x69, 0x74, 0x68, 0x49, 0x70, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x2e, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07,
	0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x73, 0x1a, 0x44, 0x0a, 0x0c, 0x53, 0x75, 0x62, 0x6e, 0x65,
	0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x1e, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x53, 0x75, 0x62, 0x6e, 0x65,
	0x74, 0x34, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x2d, 0x0a,
	0x19, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x73, 0x36, 0x57, 0x69, 0x74, 0x68,
	0x49, 0x70, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x70,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x03, 0x69, 0x70, 0x73, 0x22, 0xc0, 0x01, 0x0a,
	0x1a, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x73, 0x36, 0x57, 0x69, 0x74, 0x68,
	0x49, 0x70, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73,
	0x75, 0x63, 0x63, 0x65, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75,
	0x63, 0x63, 0x65, 0x65, 0x64, 0x12, 0x42, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x6e,
	0x65, 0x74, 0x73, 0x36, 0x57, 0x69, 0x74, 0x68, 0x49, 0x70, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x2e, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x07, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x73, 0x1a, 0x44, 0x0a, 0x0c, 0x53, 0x75, 0x62,
	0x6e, 0x65, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x1e, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x53, 0x75, 0x62,
	0x6e, 0x65, 0x74, 0x36, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0x32, 0x0a, 0x20, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x34, 0x41, 0x6e, 0x64,
	0x4c, 0x65, 0x61, 0x73, 0x65, 0x34, 0x57, 0x69, 0x74, 0x68, 0x49, 0x70, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x70, 0x22, 0xfb, 0x02, 0x0a, 0x06, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x34, 0x12, 0x18,
	0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x68, 0x77, 0x5f, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x68, 0x77,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x36, 0x0a, 0x17, 0x68, 0x77, 0x5f, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x68, 0x77, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x6c, 0x69, 0x66, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x4c, 0x69, 0x66, 0x65, 0x74,
	0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x68,
	0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68,
	0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x76, 0x65, 0x6e, 0x64, 0x6f,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x76, 0x65, 0x6e, 0x64,
	0x6f, 0x72, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6e,
	0x67, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x12,
	0x1f, 0x0a, 0x0b, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x22, 0x8f, 0x01, 0x0a, 0x0f, 0x49, 0x70, 0x76, 0x34, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x21, 0x0a, 0x0c, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x20, 0x0a, 0x06, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x08, 0x2e, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x34, 0x52, 0x06, 0x73, 0x75,
	0x62, 0x6e, 0x65, 0x74, 0x12, 0x1d, 0x0a, 0x05, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x07, 0x2e, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x34, 0x52, 0x05, 0x6c, 0x65,
	0x61, 0x73, 0x65, 0x22, 0xfb, 0x01, 0x0a, 0x21, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x6e, 0x65,
	0x74, 0x34, 0x41, 0x6e, 0x64, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x34, 0x57, 0x69, 0x74, 0x68, 0x49,
	0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63,
	0x63, 0x65, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63,
	0x65, 0x65, 0x64, 0x12, 0x65, 0x0a, 0x11, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x38,
	0x2e, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x34, 0x41, 0x6e, 0x64, 0x4c, 0x65,
	0x61, 0x73, 0x65, 0x34, 0x57, 0x69, 0x74, 0x68, 0x49, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x2e, 0x49, 0x70, 0x76, 0x34, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x10, 0x69, 0x70, 0x76, 0x34, 0x49, 0x6e,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x55, 0x0a, 0x15, 0x49, 0x70,
	0x76, 0x34, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x26, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x49, 0x70, 0x76, 0x34, 0x49, 0x6e, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0x32, 0x0a, 0x20, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x36, 0x41,
	0x6e, 0x64, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x36, 0x57, 0x69, 0x74, 0x68, 0x49, 0x70, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x70, 0x22, 0xc7, 0x04, 0x0a, 0x06, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x36,
	0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72,
	0x65, 0x66, 0x69, 0x78, 0x5f, 0x6c, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09,
	0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4c, 0x65, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x75, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x75, 0x69, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x69, 0x61, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x69, 0x61, 0x69,
	0x64, 0x12, 0x2d, 0x0a, 0x12, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x5f, 0x6c,
	0x69, 0x66, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x70,
	0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x4c, 0x69, 0x66, 0x65, 0x74, 0x69, 0x6d, 0x65,
	0x12, 0x25, 0x0a, 0x0e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x6c, 0x69, 0x66, 0x65, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x4c,
	0x69, 0x66, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x78, 0x70, 0x69, 0x72,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x12,
	0x1d, 0x0a, 0x0a, 0x68, 0x77, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x68, 0x77, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x26,
	0x0a, 0x0f, 0x68, 0x77, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x68, 0x77, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x68, 0x77, 0x5f, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x68, 0x77, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x12, 0x36, 0x0a, 0x17, 0x68, 0x77, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x5f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x15, 0x68, 0x77, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x4f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x65,
	0x61, 0x73, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x6c, 0x65, 0x61, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x6f, 0x73,
	0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x6f, 0x73,
	0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72,
	0x49, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x5f,
	0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x1f, 0x0a,
	0x0b, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f,
	0x0a, 0x0b, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x22,
	0x8f, 0x01, 0x0a, 0x0f, 0x49, 0x70, 0x76, 0x36, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x21, 0x0a,
	0x0c, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x20, 0x0a, 0x06, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x08, 0x2e, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x36, 0x52, 0x06, 0x73, 0x75, 0x62, 0x6e,
	0x65, 0x74, 0x12, 0x1d, 0x0a, 0x05, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x07, 0x2e, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x36, 0x52, 0x05, 0x6c, 0x65, 0x61, 0x73,
	0x65, 0x22, 0xfb, 0x01, 0x0a, 0x21, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x36,
	0x41, 0x6e, 0x64, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x36, 0x57, 0x69, 0x74, 0x68, 0x49, 0x70, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65,
	0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x65,
	0x64, 0x12, 0x65, 0x0a, 0x11, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x47,
	0x65, 0x74, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x36, 0x41, 0x6e, 0x64, 0x4c, 0x65, 0x61, 0x73,
	0x65, 0x36, 0x57, 0x69, 0x74, 0x68, 0x49, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x2e, 0x49, 0x70, 0x76, 0x36, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x10, 0x69, 0x70, 0x76, 0x36, 0x49, 0x6e, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x55, 0x0a, 0x15, 0x49, 0x70, 0x76, 0x36,
	0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x26, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x10, 0x2e, 0x49, 0x70, 0x76, 0x36, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0x37, 0x0a, 0x23, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x73, 0x34, 0x41, 0x6e,
	0x64, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x34, 0x57, 0x69, 0x74, 0x68, 0x49, 0x70, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x70, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x03, 0x69, 0x70, 0x73, 0x22, 0x81, 0x02, 0x0a, 0x24, 0x47, 0x65, 0x74,
	0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x73, 0x34, 0x41, 0x6e, 0x64, 0x4c, 0x65, 0x61, 0x73, 0x65,
	0x73, 0x34, 0x57, 0x69, 0x74, 0x68, 0x49, 0x70, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x65, 0x64, 0x12, 0x68, 0x0a, 0x11, 0x69,
	0x70, 0x76, 0x34, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x6e,
	0x65, 0x74, 0x73, 0x34, 0x41, 0x6e, 0x64, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x34, 0x57, 0x69,
	0x74, 0x68, 0x49, 0x70, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x49, 0x70,
	0x76, 0x34, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x10, 0x69, 0x70, 0x76, 0x34, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x55, 0x0a, 0x15, 0x49, 0x70, 0x76, 0x34, 0x49, 0x6e, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x26, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x10, 0x2e, 0x49, 0x70, 0x76, 0x34, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x37, 0x0a, 0x23,
	0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x73, 0x36, 0x41, 0x6e, 0x64, 0x4c, 0x65,
	0x61, 0x73, 0x65, 0x73, 0x36, 0x57, 0x69, 0x74, 0x68, 0x49, 0x70, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x70, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x03, 0x69, 0x70, 0x73, 0x22, 0x81, 0x02, 0x0a, 0x24, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62,
	0x6e, 0x65, 0x74, 0x73, 0x36, 0x41, 0x6e, 0x64, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x36, 0x57,
	0x69, 0x74, 0x68, 0x49, 0x70, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x65, 0x64, 0x12, 0x68, 0x0a, 0x11, 0x69, 0x70, 0x76, 0x36,
	0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x73,
	0x36, 0x41, 0x6e, 0x64, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x36, 0x57, 0x69, 0x74, 0x68, 0x49,
	0x70, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x49, 0x70, 0x76, 0x36, 0x49,
	0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x10, 0x69, 0x70, 0x76, 0x36, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x1a, 0x55, 0x0a, 0x15, 0x49, 0x70, 0x76, 0x36, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x26, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x49,
	0x70, 0x76, 0x36, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x2f, 0x0a, 0x11, 0x47, 0x65, 0x74,
	0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x34, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a,
	0x0a, 0x08, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x08, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x22, 0x3e, 0x0a, 0x12, 0x47, 0x65,
	0x74, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x34, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x28, 0x0a, 0x08, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x34, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x44, 0x68, 0x63, 0x70, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x34,
	0x52, 0x08, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x34, 0x73, 0x22, 0xa0, 0x07, 0x0a, 0x0b, 0x44,
	0x68, 0x63, 0x70, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x34, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x2d,
	0x0a, 0x12, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x2d, 0x0a,
	0x12, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x64, 0x65, 0x6c, 0x65, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x2d, 0x0a, 0x05,
	0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x44, 0x68,
	0x63, 0x70, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x34, 0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x75, 0x62, 0x6e, 0x65, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x75, 0x62,
	0x6e, 0x65, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x69, 0x70, 0x5f, 0x6e, 0x65, 0x74, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x69, 0x70, 0x4e, 0x65, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x75,
	0x62, 0x6e, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x73,
	0x75, 0x62, 0x6e, 0x65, 0x74, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x5f, 0x6c, 0x69, 0x66, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0d, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x4c, 0x69, 0x66, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x2c,
	0x0a, 0x12, 0x6d, 0x61, 0x78, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x6c, 0x69, 0x66, 0x65,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x6d, 0x61, 0x78, 0x56,
	0x61, 0x6c, 0x69, 0x64, 0x4c, 0x69, 0x66, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x12,
	0x6d, 0x69, 0x6e, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x6c, 0x69, 0x66, 0x65, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x6d, 0x69, 0x6e, 0x56, 0x61, 0x6c,
	0x69, 0x64, 0x4c, 0x69, 0x66, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x75,
	0x62, 0x6e, 0x65, 0x74, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x4d, 0x61, 0x73, 0x6b, 0x12, 0x25, 0x0a, 0x0e, 0x64,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x18, 0x0d, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0d, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x73, 0x18, 0x0e, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x07, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x73, 0x12, 0x21, 0x0a, 0x0c,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x12,
	0x1f, 0x0a, 0x0b, 0x74, 0x66, 0x74, 0x70, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x66, 0x74, 0x70, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x12, 0x1b, 0x0a, 0x09, 0x62, 0x6f, 0x6f, 0x74, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x62, 0x6f, 0x6f, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x32, 0x0a,
	0x15, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x12, 0x20, 0x03, 0x28, 0x09, 0x52, 0x13, 0x72, 0x65,
	0x6c, 0x61, 0x79, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65,
	0x73, 0x12, 0x1e, 0x0a, 0x0b, 0x69, 0x5f, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x46, 0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6e, 0x65, 0x78, 0x74, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x73, 0x18, 0x16, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x6f, 0x64, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x17,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x63,
	0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x18, 0x18, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x63,
	0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x64, 0x5f,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x73, 0x65,
	0x64, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x75, 0x73, 0x65, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x1a, 0x38, 0x0a, 0x0a, 0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x40, 0x0a,
	0x18, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x6f, 0x6c, 0x34, 0x42, 0x79, 0x53, 0x75, 0x62, 0x6e, 0x65,
	0x74, 0x34, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x06, 0x73, 0x75, 0x62,
	0x6e, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x44, 0x68, 0x63, 0x70,
	0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x34, 0x52, 0x06, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x22,
	0x3f, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x6f, 0x6c, 0x34, 0x42, 0x79, 0x53, 0x75, 0x62,
	0x6e, 0x65, 0x74, 0x34, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x22, 0x0a, 0x06,
	0x70, 0x6f, 0x6f, 0x6c, 0x34, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x44,
	0x68, 0x63, 0x70, 0x50, 0x6f, 0x6f, 0x6c, 0x34, 0x52, 0x06, 0x70, 0x6f, 0x6f, 0x6c, 0x34, 0x73,
	0x22, 0x96, 0x04, 0x0a, 0x09, 0x44, 0x68, 0x63, 0x70, 0x50, 0x6f, 0x6f, 0x6c, 0x34, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x2d, 0x0a, 0x12, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x12, 0x2d, 0x0a, 0x12, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x64,
	0x65, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x12, 0x2b, 0x0a, 0x05, 0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x44, 0x68, 0x63, 0x70, 0x50, 0x6f, 0x6f, 0x6c, 0x34, 0x2e, 0x4c, 0x69, 0x6e, 0x6b,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x12, 0x18, 0x0a,
	0x07, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x34, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x34, 0x12, 0x23, 0x0a, 0x0d, 0x62, 0x65, 0x67, 0x69, 0x6e,
	0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x62, 0x65, 0x67, 0x69, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x19, 0x0a, 0x08,
	0x62, 0x65, 0x67, 0x69, 0x6e, 0x5f, 0x69, 0x70, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x62, 0x65, 0x67, 0x69, 0x6e, 0x49, 0x70, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x6e, 0x64, 0x5f, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x6e,
	0x64, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x15, 0x0a, 0x06, 0x65, 0x6e, 0x64, 0x5f,
	0x69, 0x70, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6e, 0x64, 0x49, 0x70, 0x12,
	0x1a, 0x0a, 0x08, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x08, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x75,
	0x73, 0x65, 0x64, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x75, 0x73, 0x65, 0x64, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73,
	0x65, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09,
	0x75, 0x73, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x1a,
	0x38, 0x0a, 0x0a, 0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x42, 0x0a, 0x22, 0x47, 0x65, 0x74,
	0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x50, 0x6f, 0x6f, 0x6c, 0x34, 0x42, 0x79, 0x53,
	0x75, 0x62, 0x6e, 0x65, 0x74, 0x34, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1c, 0x0a, 0x09, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x34, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x34, 0x49, 0x64, 0x22, 0x62, 0x0a,
	0x23, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x50, 0x6f, 0x6f, 0x6c,
	0x34, 0x42, 0x79, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x34, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3b, 0x0a, 0x0f, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64,
	0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x34, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x44, 0x68, 0x63, 0x70, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x50, 0x6f, 0x6f, 0x6c,
	0x34, 0x52, 0x0e, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x50, 0x6f, 0x6f, 0x6c, 0x34,
	0x73, 0x22, 0xa6, 0x04, 0x0a, 0x11, 0x44, 0x68, 0x63, 0x70, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x64, 0x50, 0x6f, 0x6f, 0x6c, 0x34, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x2d, 0x0a, 0x12, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x2d, 0x0a, 0x12, 0x64, 0x65,
	0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x33, 0x0a, 0x05, 0x6c, 0x69, 0x6e,
	0x6b, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x44, 0x68, 0x63, 0x70, 0x52,
	0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x50, 0x6f, 0x6f, 0x6c, 0x34, 0x2e, 0x4c, 0x69, 0x6e,
	0x6b, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x12, 0x18,
	0x0a, 0x07, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x34, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x34, 0x12, 0x23, 0x0a, 0x0d, 0x62, 0x65, 0x67, 0x69,
	0x6e, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x19, 0x0a,
	0x08, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x5f, 0x69, 0x70, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x49, 0x70, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x6e, 0x64, 0x5f,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65,
	0x6e, 0x64, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x15, 0x0a, 0x06, 0x65, 0x6e, 0x64,
	0x5f, 0x69, 0x70, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6e, 0x64, 0x49, 0x70,
	0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x08, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x12, 0x1d, 0x0a, 0x0a,
	0x75, 0x73, 0x65, 0x64, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x75, 0x73, 0x65, 0x64, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x12, 0x1d, 0x0a, 0x0a, 0x75,
	0x73, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x09, 0x75, 0x73, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x1a, 0x38, 0x0a, 0x0a, 0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x41, 0x0a, 0x21, 0x47, 0x65,
	0x74, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x34, 0x42, 0x79, 0x53,
	0x75, 0x62, 0x6e, 0x65, 0x74, 0x34, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1c, 0x0a, 0x09, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x34, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x34, 0x49, 0x64, 0x22, 0x5d, 0x0a,
	0x22, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x34,
	0x42, 0x79, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x34, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x34, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x44, 0x68, 0x63,
	0x70, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x34, 0x52, 0x0d, 0x72,
	0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x34, 0x73, 0x22, 0xde, 0x03, 0x0a,
	0x10, 0x44, 0x68, 0x63, 0x70, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x34, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x2d, 0x0a, 0x12, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x11, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x12, 0x2d, 0x0a, 0x12, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x11, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x12, 0x32, 0x0a, 0x05, 0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x18, 0x05, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x44, 0x68, 0x63, 0x70, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x34, 0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x05, 0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x6e, 0x65,
	0x74, 0x34, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74,
	0x34, 0x12, 0x1d, 0x0a, 0x0a, 0x68, 0x77, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x68, 0x77, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x70, 0x12,
	0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x64, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x73, 0x65, 0x64, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x12, 0x1d,
	0x0a, 0x0a, 0x75, 0x73, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x09, 0x75, 0x73, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a,
	0x08, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x08, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x74, 0x1a, 0x38, 0x0a, 0x0a, 0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x3c, 0x0a,
	0x1b, 0x47, 0x65, 0x74, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x34, 0x42, 0x79, 0x53, 0x75, 0x62, 0x6e,
	0x65, 0x74, 0x34, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a,
	0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x34, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x34, 0x49, 0x64, 0x22, 0x58, 0x0a, 0x1c, 0x47,
	0x65, 0x74, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x34, 0x42, 0x79, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74,
	0x34, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x38, 0x0a, 0x0e, 0x73,
	0x75, 0x62, 0x6e, 0x65, 0x74, 0x5f, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x34, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x44, 0x68, 0x63, 0x70, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74,
	0x4c, 0x65, 0x61, 0x73, 0x65, 0x34, 0x52, 0x0d, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x4c, 0x65,
	0x61, 0x73, 0x65, 0x34, 0x73, 0x22, 0xd4, 0x05, 0x0a, 0x10, 0x44, 0x68, 0x63, 0x70, 0x53, 0x75,
	0x62, 0x6e, 0x65, 0x74, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x34, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x2d,
	0x0a, 0x12, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x2d, 0x0a,
	0x12, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x64, 0x65, 0x6c, 0x65, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x32, 0x0a, 0x05,
	0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x44, 0x68,
	0x63, 0x70, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x34, 0x2e, 0x4c,
	0x69, 0x6e, 0x6b, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x6c, 0x69, 0x6e, 0x6b, 0x73,
	0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x34, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x34, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x68, 0x77, 0x5f, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x68, 0x77, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x36, 0x0a, 0x17, 0x68, 0x77, 0x5f, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x5f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x68, 0x77, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b,
	0x0a, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x5f, 0x6c, 0x69, 0x66, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0d, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x4c, 0x69, 0x66, 0x65, 0x74, 0x69,
	0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x6f,
	0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x6f,
	0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x66, 0x69, 0x6e, 0x67, 0x65, 0x72,
	0x70, 0x72, 0x69, 0x6e, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x66, 0x69, 0x6e,
	0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x76, 0x65, 0x6e, 0x64,
	0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x76, 0x65, 0x6e,
	0x64, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6e, 0x67, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x1a, 0x38, 0x0a, 0x0a, 0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x45, 0x0a, 0x14,
	0x47, 0x65, 0x74, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x34, 0x42, 0x79, 0x49, 0x70, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x34, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74,
	0x34, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x70, 0x22, 0x51, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x34,
	0x42, 0x79, 0x49, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x38, 0x0a, 0x0e,
	0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x5f, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x34, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x44, 0x68, 0x63, 0x70, 0x53, 0x75, 0x62, 0x6e, 0x65,
	0x74, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x34, 0x52, 0x0d, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x4c,
	0x65, 0x61, 0x73, 0x65, 0x34, 0x73, 0x22, 0x2f, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62,
	0x6e, 0x65, 0x74, 0x36, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x70,
	0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x70,
	0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x22, 0x3e, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x53, 0x75,
	0x62, 0x6e, 0x65, 0x74, 0x36, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x28, 0x0a,
	0x08, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x36, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0c, 0x2e, 0x44, 0x68, 0x63, 0x70, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x36, 0x52, 0x08, 0x73,
	0x75, 0x62, 0x6e, 0x65, 0x74, 0x36, 0x73, 0x22, 0xb0, 0x07, 0x0a, 0x0b, 0x44, 0x68, 0x63, 0x70,
	0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x36, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x2d, 0x0a, 0x12, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x2d, 0x0a, 0x12, 0x64, 0x65,
	0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x2d, 0x0a, 0x05, 0x6c, 0x69, 0x6e,
	0x6b, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x44, 0x68, 0x63, 0x70, 0x53,
	0x75, 0x62, 0x6e, 0x65, 0x74, 0x36, 0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x05, 0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x75, 0x62, 0x6e,
	0x65, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74,
	0x12, 0x15, 0x0a, 0x06, 0x69, 0x70, 0x5f, 0x6e, 0x65, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x69, 0x70, 0x4e, 0x65, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x75, 0x62, 0x6e, 0x65,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x73, 0x75, 0x62, 0x6e,
	0x65, 0x74, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x6c, 0x69,
	0x66, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x4c, 0x69, 0x66, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x6d,
	0x61, 0x78, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x6c, 0x69, 0x66, 0x65, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x6d, 0x61, 0x78, 0x56, 0x61, 0x6c, 0x69,
	0x64, 0x4c, 0x69, 0x66, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x6d, 0x69, 0x6e,
	0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x6c, 0x69, 0x66, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x6d, 0x69, 0x6e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x4c,
	0x69, 0x66, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x12, 0x70, 0x72, 0x65, 0x66, 0x65,
	0x72, 0x72, 0x65, 0x64, 0x5f, 0x6c, 0x69, 0x66, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x11, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x4c, 0x69,
	0x66, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d,
	0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x12, 0x21, 0x0a,
	0x0c, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x6c, 0x61, 0x73, 0x73,
	0x12, 0x1e, 0x0a, 0x0b, 0x69, 0x5f, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x46, 0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x32, 0x0a, 0x15, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x10, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x13, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x65, 0x73, 0x12, 0x37, 0x0a, 0x18, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x5f, 0x61, 0x67,
	0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x41, 0x67, 0x65,
	0x6e, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x61, 0x67,
	0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18,
	0x13, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x6f, 0x64, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73,
	0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x14, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x61, 0x70, 0x69, 0x64, 0x5f,
	0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x18, 0x15, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x72, 0x61,
	0x70, 0x69, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x73, 0x65,
	0x5f, 0x65, 0x75, 0x69, 0x36, 0x34, 0x18, 0x16, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x75, 0x73,
	0x65, 0x45, 0x75, 0x69, 0x36, 0x34, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69,
	0x74, 0x79, 0x18, 0x17, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69,
	0x74, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x64, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x73, 0x65, 0x64, 0x52, 0x61, 0x74, 0x69,
	0x6f, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x19, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x75, 0x73, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x1a, 0x38, 0x0a, 0x0a, 0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x42, 0x0a, 0x1a, 0x47, 0x65,
	0x74, 0x50, 0x6f, 0x6f, 0x6c, 0x36, 0x42, 0x79, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x36, 0x49,
	0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x06, 0x73, 0x75, 0x62, 0x6e,
	0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x44, 0x68, 0x63, 0x70, 0x53,
	0x75, 0x62, 0x6e, 0x65, 0x74, 0x36, 0x52, 0x06, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x22, 0x41,
	0x0a, 0x1b, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x6f, 0x6c, 0x36, 0x42, 0x79, 0x53, 0x75, 0x62, 0x6e,
	0x65, 0x74, 0x36, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x22, 0x0a,
	0x06, 0x70, 0x6f, 0x6f, 0x6c, 0x36, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e,
	0x44, 0x68, 0x63, 0x70, 0x50, 0x6f, 0x6f, 0x6c, 0x36, 0x52, 0x06, 0x70, 0x6f, 0x6f, 0x6c, 0x36,
	0x73, 0x22, 0x96, 0x04, 0x0a, 0x09, 0x44, 0x68, 0x63, 0x70, 0x50, 0x6f, 0x6f, 0x6c, 0x36, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x2d, 0x0a, 0x12, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x11, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x12, 0x2d, 0x0a, 0x12, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11,
	0x64, 0x65, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x12, 0x2b, 0x0a, 0x05, 0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x44, 0x68, 0x63, 0x70, 0x50, 0x6f, 0x6f, 0x6c, 0x36, 0x2e, 0x4c, 0x69, 0x6e,
	0x6b, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x12, 0x18,
	0x0a, 0x07, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x36, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x36, 0x12, 0x23, 0x0a, 0x0d, 0x62, 0x65, 0x67, 0x69,
	0x6e, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x19, 0x0a,
	0x08, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x5f, 0x69, 0x70, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x49, 0x70, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x6e, 0x64, 0x5f,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65,
	0x6e, 0x64, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x15, 0x0a, 0x06, 0x65, 0x6e, 0x64,
	0x5f, 0x69, 0x70, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6e, 0x64, 0x49, 0x70,
	0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x08, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x12, 0x1d, 0x0a, 0x0a,
	0x75, 0x73, 0x65, 0x64, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x75, 0x73, 0x65, 0x64, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x12, 0x1d, 0x0a, 0x0a, 0x75,
	0x73, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x09, 0x75, 0x73, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x1a, 0x38, 0x0a, 0x0a, 0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x4a, 0x0a, 0x22, 0x47, 0x65,
	0x74, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x50, 0x6f, 0x6f, 0x6c, 0x36, 0x42, 0x79,
	0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x36, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x24, 0x0a, 0x06, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0c, 0x2e, 0x44, 0x68, 0x63, 0x70, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x36, 0x52, 0x06,
	0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x22, 0x62, 0x0a, 0x23, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x64, 0x50, 0x6f, 0x6f, 0x6c, 0x36, 0x42, 0x79, 0x53, 0x75, 0x62, 0x6e,
	0x65, 0x74, 0x36, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3b, 0x0a,
	0x0f, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x36, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x44, 0x68, 0x63, 0x70, 0x52, 0x65, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x64, 0x50, 0x6f, 0x6f, 0x6c, 0x36, 0x52, 0x0e, 0x72, 0x65, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x64, 0x50, 0x6f, 0x6f, 0x6c, 0x36, 0x73, 0x22, 0xa6, 0x04, 0x0a, 0x11, 0x44,
	0x68, 0x63, 0x70, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x50, 0x6f, 0x6f, 0x6c, 0x36,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x2d, 0x0a, 0x12, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x11, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x12, 0x2d, 0x0a, 0x12, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x11, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x12, 0x33, 0x0a, 0x05, 0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x44, 0x68, 0x63, 0x70, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64,
	0x50, 0x6f, 0x6f, 0x6c, 0x36, 0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x05, 0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x6e, 0x65,
	0x74, 0x36, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74,
	0x36, 0x12, 0x23, 0x0a, 0x0d, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x5f,
	0x69, 0x70, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x49,
	0x70, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x6e, 0x64, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x6e, 0x64, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x15, 0x0a, 0x06, 0x65, 0x6e, 0x64, 0x5f, 0x69, 0x70, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x65, 0x6e, 0x64, 0x49, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61, 0x70,
	0x61, 0x63, 0x69, 0x74, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x63, 0x61, 0x70,
	0x61, 0x63, 0x69, 0x74, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x64, 0x5f, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x73, 0x65, 0x64, 0x52,
	0x61, 0x74, 0x69, 0x6f, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x75, 0x73, 0x65, 0x64, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x1a, 0x38, 0x0a, 0x0a, 0x4c, 0x69, 0x6e,
	0x6b, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0x42, 0x0a, 0x21, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x36, 0x42, 0x79, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x36, 0x49,
	0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x75, 0x62, 0x6e,
	0x65, 0x74, 0x36, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x75,
	0x62, 0x6e, 0x65, 0x74, 0x36, 0x49, 0x64, 0x22, 0x5d, 0x0a, 0x22, 0x47, 0x65, 0x74, 0x52, 0x65,
	0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x36, 0x42, 0x79, 0x53, 0x75, 0x62, 0x6e,
	0x65, 0x74, 0x36, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a,
	0x0d, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x36, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x44, 0x68, 0x63, 0x70, 0x52, 0x65, 0x73, 0x65, 0x72,
	0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x36, 0x52, 0x0d, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x36, 0x73, 0x22, 0x94, 0x04, 0x0a, 0x10, 0x44, 0x68, 0x63, 0x70, 0x52,
	0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x36, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x2d, 0x0a, 0x12, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x2d,
	0x0a, 0x12, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x64, 0x65, 0x6c, 0x65,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x32, 0x0a,
	0x05, 0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x44,
	0x68, 0x63, 0x70, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x36, 0x2e,
	0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x6c, 0x69, 0x6e, 0x6b,
	0x73, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x36, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x36, 0x12, 0x13, 0x0a, 0x05, 0x64,
	0x5f, 0x75, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x55, 0x69, 0x64,
	0x12, 0x1d, 0x0a, 0x0a, 0x68, 0x77, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x68, 0x77, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x21, 0x0a, 0x0c, 0x69, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18,
	0x09, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x65, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x70, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x03, 0x69, 0x70, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73,
	0x18, 0x0b, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73,
	0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x08, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x12, 0x1c, 0x0a, 0x09,
	0x75, 0x73, 0x65, 0x64, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x75, 0x73, 0x65, 0x64, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73,
	0x65, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09,
	0x75, 0x73, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x74, 0x1a, 0x38, 0x0a, 0x0a, 0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x3c, 0x0a,
	0x1b, 0x47, 0x65, 0x74, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x36, 0x42, 0x79, 0x53, 0x75, 0x62, 0x6e,
	0x65, 0x74, 0x36, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a,
	0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x36, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x36, 0x49, 0x64, 0x22, 0x56, 0x0a, 0x1c, 0x47,
	0x65, 0x74, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x36, 0x42, 0x79, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74,
	0x36, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x36, 0x0a, 0x0d, 0x73,
	0x75, 0x62, 0x6e, 0x65, 0x74, 0x5f, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x36, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x11, 0x2e, 0x44, 0x68, 0x63, 0x70, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x4c,
	0x65, 0x61, 0x73, 0x65, 0x36, 0x52, 0x0c, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x4c, 0x65, 0x61,
	0x73, 0x65, 0x36, 0x22, 0x45, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x36,
	0x42, 0x79, 0x49, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x73,
	0x75, 0x62, 0x6e, 0x65, 0x74, 0x36, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x36, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x70, 0x22, 0x4f, 0x0a, 0x15, 0x47, 0x65,
	0x74, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x36, 0x42, 0x79, 0x49, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x36, 0x0a, 0x0d, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x5f, 0x6c, 0x65,
	0x61, 0x73, 0x65, 0x36, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x44, 0x68, 0x63,
	0x70, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x36, 0x52, 0x0c, 0x73,
	0x75, 0x62, 0x6e, 0x65, 0x74, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x36, 0x22, 0xa1, 0x07, 0x0a, 0x10,
	0x44, 0x68, 0x63, 0x70, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x36,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x2d, 0x0a, 0x12, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x11, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x12, 0x2d, 0x0a, 0x12, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x11, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x12, 0x32, 0x0a, 0x05, 0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x44, 0x68, 0x63, 0x70, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x4c, 0x65,
	0x61, 0x73, 0x65, 0x36, 0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x05, 0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74,
	0x36, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x36,
	0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a,
	0x0a, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x6c, 0x65, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x09, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4c, 0x65, 0x6e, 0x12, 0x13, 0x0a, 0x05,
	0x64, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x55, 0x69,
	0x64, 0x12, 0x13, 0x0a, 0x05, 0x69, 0x5f, 0x61, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x04, 0x69, 0x41, 0x69, 0x64, 0x12, 0x2d, 0x0a, 0x12, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72,
	0x72, 0x65, 0x64, 0x5f, 0x6c, 0x69, 0x66, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x11, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x4c, 0x69, 0x66,
	0x65, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x6c,
	0x69, 0x66, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x4c, 0x69, 0x66, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x65, 0x78,
	0x70, 0x69, 0x72, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x68, 0x77, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x68, 0x77, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x68, 0x77, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x68, 0x77,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x68,
	0x77, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x68, 0x77, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x36, 0x0a, 0x17, 0x68, 0x77, 0x5f, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x68, 0x77, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x1d, 0x0a, 0x0a, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x13, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x66, 0x69,
	0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x66, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09,
	0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x18, 0x17, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6c, 0x65, 0x61, 0x73, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x1a, 0x38, 0x0a, 0x0a, 0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0x84, 0x01, 0x0a, 0x1a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x34, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x31,
	0x0a, 0x0d, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x44, 0x68, 0x63, 0x70, 0x53, 0x75, 0x62, 0x6e,
	0x65, 0x74, 0x34, 0x52, 0x0c, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x53, 0x75, 0x62, 0x6e, 0x65,
	0x74, 0x12, 0x33, 0x0a, 0x0b, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x44, 0x68, 0x63, 0x70, 0x52, 0x65, 0x73,
	0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x34, 0x52, 0x0b, 0x72, 0x65, 0x73, 0x65, 0x72,
	0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x37, 0x0a, 0x1b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x34, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x65, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x65, 0x64, 0x22,
	0x88, 0x01, 0x0a, 0x1a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x64, 0x50, 0x6f, 0x6f, 0x6c, 0x34, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x31,
	0x0a, 0x0d, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x44, 0x68, 0x63, 0x70, 0x53, 0x75, 0x62, 0x6e,
	0x65, 0x74, 0x34, 0x52, 0x0c, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x53, 0x75, 0x62, 0x6e, 0x65,
	0x74, 0x12, 0x37, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x5f, 0x70, 0x6f,
	0x6f, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x44, 0x68, 0x63, 0x70, 0x52,
	0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x50, 0x6f, 0x6f, 0x6c, 0x34, 0x52, 0x0c, 0x72, 0x65,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x50, 0x6f, 0x6f, 0x6c, 0x22, 0x37, 0x0a, 0x1b, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x50, 0x6f, 0x6f, 0x6c,
	0x34, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63,
	0x63, 0x65, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63,
	0x65, 0x65, 0x64, 0x22, 0x84, 0x01, 0x0a, 0x1a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x36, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x31, 0x0a, 0x0d, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x75, 0x62,
	0x6e, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x44, 0x68, 0x63, 0x70,
	0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x36, 0x52, 0x0c, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x53,
	0x75, 0x62, 0x6e, 0x65, 0x74, 0x12, 0x33, 0x0a, 0x0b, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x44, 0x68, 0x63,
	0x70, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x36, 0x52, 0x0b, 0x72,
	0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x37, 0x0a, 0x1b, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x36,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63,
	0x63, 0x65, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63,
	0x65, 0x65, 0x64, 0x22, 0x88, 0x01, 0x0a, 0x1a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x50, 0x6f, 0x6f, 0x6c, 0x36, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x31, 0x0a, 0x0d, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x75, 0x62,
	0x6e, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x44, 0x68, 0x63, 0x70,
	0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x36, 0x52, 0x0c, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x53,
	0x75, 0x62, 0x6e, 0x65, 0x74, 0x12, 0x37, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x64, 0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x44,
	0x68, 0x63, 0x70, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x50, 0x6f, 0x6f, 0x6c, 0x36,
	0x52, 0x0c, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x50, 0x6f, 0x6f, 0x6c, 0x22, 0x37,
	0x0a, 0x1b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64,
	0x50, 0x6f, 0x6f, 0x6c, 0x36, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x73, 0x75, 0x63, 0x63, 0x65, 0x65, 0x64, 0x32, 0xbf, 0x11, 0x0a, 0x0b, 0x44, 0x68, 0x63, 0x70,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x47, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x53, 0x75,
	0x62, 0x6e, 0x65, 0x74, 0x34, 0x57, 0x69, 0x74, 0x68, 0x49, 0x70, 0x12, 0x18, 0x2e, 0x47, 0x65,
	0x74, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x34, 0x57, 0x69, 0x74, 0x68, 0x49, 0x70, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x6e, 0x65,
	0x74, 0x34, 0x57, 0x69, 0x74, 0x68, 0x49, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x47, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x36, 0x57, 0x69,
	0x74, 0x68, 0x49, 0x70, 0x12, 0x18, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74,
	0x36, 0x57, 0x69, 0x74, 0x68, 0x49, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19,
	0x2e, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x36, 0x57, 0x69, 0x74, 0x68, 0x49,
	0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4d, 0x0a, 0x12, 0x47, 0x65, 0x74,
	0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x73, 0x34, 0x57, 0x69, 0x74, 0x68, 0x49, 0x70, 0x73, 0x12,
	0x1a, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x73, 0x34, 0x57, 0x69, 0x74,
	0x68, 0x49, 0x70, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x47, 0x65,
	0x74, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x73, 0x34, 0x57, 0x69, 0x74, 0x68, 0x49, 0x70, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4d, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x53,
	0x75, 0x62, 0x6e, 0x65, 0x74, 0x73, 0x36, 0x57, 0x69, 0x74, 0x68, 0x49, 0x70, 0x73, 0x12, 0x1a,
	0x2e, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x73, 0x36, 0x57, 0x69, 0x74, 0x68,
	0x49, 0x70, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x47, 0x65, 0x74,
	0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x73, 0x36, 0x57, 0x69, 0x74, 0x68, 0x49, 0x70, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x62, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x53, 0x75,
	0x62, 0x6e, 0x65, 0x74, 0x34, 0x41, 0x6e, 0x64, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x34, 0x57, 0x69,
	0x74, 0x68, 0x49, 0x70, 0x12, 0x21, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74,
	0x34, 0x41, 0x6e, 0x64, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x34, 0x57, 0x69, 0x74, 0x68, 0x49, 0x70,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62,
	0x6e, 0x65, 0x74, 0x34, 0x41, 0x6e, 0x64, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x34, 0x57, 0x69, 0x74,
	0x68, 0x49, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x62, 0x0a, 0x19, 0x47,
	0x65, 0x74, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x36, 0x41, 0x6e, 0x64, 0x4c, 0x65, 0x61, 0x73,
	0x65, 0x36, 0x57, 0x69, 0x74, 0x68, 0x49, 0x70, 0x12, 0x21, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x75,
	0x62, 0x6e, 0x65, 0x74, 0x36, 0x41, 0x6e, 0x64, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x36, 0x57, 0x69,
	0x74, 0x68, 0x49, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x47, 0x65,
	0x74, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x36, 0x41, 0x6e, 0x64, 0x4c, 0x65, 0x61, 0x73, 0x65,
	0x36, 0x57, 0x69, 0x74, 0x68, 0x49, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x6b, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x73, 0x34, 0x41, 0x6e,
	0x64, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x34, 0x57, 0x69, 0x74, 0x68, 0x49, 0x70, 0x73, 0x12,
	0x24, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x73, 0x34, 0x41, 0x6e, 0x64,
	0x4c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x34, 0x57, 0x69, 0x74, 0x68, 0x49, 0x70, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x6e, 0x65,
	0x74, 0x73, 0x34, 0x41, 0x6e, 0x64, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x34, 0x57, 0x69, 0x74,
	0x68, 0x49, 0x70, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6b, 0x0a, 0x1c,
	0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x73, 0x36, 0x41, 0x6e, 0x64, 0x4c, 0x65,
	0x61, 0x73, 0x65, 0x73, 0x36, 0x57, 0x69, 0x74, 0x68, 0x49, 0x70, 0x73, 0x12, 0x24, 0x2e, 0x47,
	0x65, 0x74, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x73, 0x36, 0x41, 0x6e, 0x64, 0x4c, 0x65, 0x61,
	0x73, 0x65, 0x73, 0x36, 0x57, 0x69, 0x74, 0x68, 0x49, 0x70, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x25, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x73, 0x36,
	0x41, 0x6e, 0x64, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x36, 0x57, 0x69, 0x74, 0x68, 0x49, 0x70,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3c, 0x0a, 0x11, 0x47, 0x65, 0x74,
	0x4c, 0x69, 0x73, 0x74, 0x41, 0x6c, 0x6c, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x34, 0x12, 0x12,
	0x2e, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x34, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x13, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x34, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x43, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x4c, 0x69,
	0x73, 0x74, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x34, 0x42, 0x79, 0x50, 0x72, 0x65, 0x66, 0x69,
	0x78, 0x65, 0x73, 0x12, 0x12, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x34,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62,
	0x6e, 0x65, 0x74, 0x34, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4e, 0x0a, 0x15,
	0x47, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x6f, 0x6f, 0x6c, 0x34, 0x42, 0x79, 0x53, 0x75,
	0x62, 0x6e, 0x65, 0x74, 0x34, 0x12, 0x19, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x6f, 0x6c, 0x34,
	0x42, 0x79, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x34, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1a, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x6f, 0x6c, 0x34, 0x42, 0x79, 0x53, 0x75, 0x62,
	0x6e, 0x65, 0x74, 0x34, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6c, 0x0a, 0x1f,
	0x47, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x50,
	0x6f, 0x6f, 0x6c, 0x34, 0x42, 0x79, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x34, 0x49, 0x64, 0x12,
	0x23, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x50, 0x6f, 0x6f,
	0x6c, 0x34, 0x42, 0x79, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x34, 0x49, 0x64, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x64, 0x50, 0x6f, 0x6f, 0x6c, 0x34, 0x42, 0x79, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x34,
	0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x69, 0x0a, 0x1e, 0x47, 0x65,
	0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x34, 0x42, 0x79, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x34, 0x49, 0x64, 0x12, 0x22, 0x2e, 0x47,
	0x65, 0x74, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x34, 0x42, 0x79,
	0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x34, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x23, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x34, 0x42, 0x79, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x34, 0x49, 0x64, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x57, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74,
	0x4c, 0x65, 0x61, 0x73, 0x65, 0x34, 0x42, 0x79, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x34, 0x49,
	0x64, 0x12, 0x1c, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x34, 0x42, 0x79, 0x53,
	0x75, 0x62, 0x6e, 0x65, 0x74, 0x34, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1d, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x34, 0x42, 0x79, 0x53, 0x75, 0x62,
	0x6e, 0x65, 0x74, 0x34, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x42,
	0x0a, 0x11, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x34, 0x42,
	0x79, 0x49, 0x70, 0x12, 0x15, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x34, 0x42,
	0x79, 0x49, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x47, 0x65, 0x74,
	0x4c, 0x65, 0x61, 0x73, 0x65, 0x34, 0x42, 0x79, 0x49, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x3c, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x6c, 0x6c,
	0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x36, 0x12, 0x12, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62,
	0x6e, 0x65, 0x74, 0x36, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e, 0x47, 0x65,
	0x74, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x36, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x43, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x75, 0x62, 0x6e, 0x65,
	0x74, 0x36, 0x42, 0x79, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x12, 0x12, 0x2e, 0x47,
	0x65, 0x74, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x36, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x13, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x36, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x54, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74,
	0x50, 0x6f, 0x6f, 0x6c, 0x36, 0x42, 0x79, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x36, 0x49, 0x64,
	0x12, 0x1b, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x6f, 0x6c, 0x36, 0x42, 0x79, 0x53, 0x75, 0x62,
	0x6e, 0x65, 0x74, 0x36, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e,
	0x47, 0x65, 0x74, 0x50, 0x6f, 0x6f, 0x6c, 0x36, 0x42, 0x79, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74,
	0x36, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6c, 0x0a, 0x1f, 0x47,
	0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x50, 0x6f,
	0x6f, 0x6c, 0x36, 0x42, 0x79, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x36, 0x49, 0x64, 0x12, 0x23,
	0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x50, 0x6f, 0x6f, 0x6c,
	0x36, 0x42, 0x79, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x36, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x64, 0x50, 0x6f, 0x6f, 0x6c, 0x36, 0x42, 0x79, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x36, 0x49,
	0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x69, 0x0a, 0x1e, 0x47, 0x65, 0x74,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x36,
	0x42, 0x79, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x36, 0x49, 0x64, 0x12, 0x22, 0x2e, 0x47, 0x65,
	0x74, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x36, 0x42, 0x79, 0x53,
	0x75, 0x62, 0x6e, 0x65, 0x74, 0x36, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x23, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x36, 0x42, 0x79, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x36, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x57, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x4c,
	0x65, 0x61, 0x73, 0x65, 0x36, 0x42, 0x79, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x36, 0x49, 0x64,
	0x12, 0x1c, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x36, 0x42, 0x79, 0x53, 0x75,
	0x62, 0x6e, 0x65, 0x74, 0x36, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d,
	0x2e, 0x47, 0x65, 0x74, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x36, 0x42, 0x79, 0x53, 0x75, 0x62, 0x6e,
	0x65, 0x74, 0x36, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x42, 0x0a,
	0x11, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x36, 0x42, 0x79,
	0x49, 0x70, 0x12, 0x15, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x36, 0x42, 0x79,
	0x49, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x47, 0x65, 0x74, 0x4c,
	0x65, 0x61, 0x73, 0x65, 0x36, 0x42, 0x79, 0x49, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x50, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x65, 0x72,
	0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x34, 0x73, 0x12, 0x1b, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x34, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x34, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x50, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x64, 0x50, 0x6f, 0x6f, 0x6c, 0x34, 0x12, 0x1b, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x50, 0x6f, 0x6f, 0x6c, 0x34,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x50, 0x6f, 0x6f, 0x6c, 0x34, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x50, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x36, 0x73, 0x12, 0x1b, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x36, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x36, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x50, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x50, 0x6f, 0x6f, 0x6c, 0x36, 0x12, 0x1b,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x50,
	0x6f, 0x6f, 0x6c, 0x36, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x50, 0x6f, 0x6f, 0x6c,
	0x36, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x09, 0x5a, 0x07, 0x2e, 0x2e, 0x2f,
	0x64, 0x68, 0x63, 0x70, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_dhcp_proto_rawDescOnce sync.Once
	file_dhcp_proto_rawDescData = file_dhcp_proto_rawDesc
)

func file_dhcp_proto_rawDescGZIP() []byte {
	file_dhcp_proto_rawDescOnce.Do(func() {
		file_dhcp_proto_rawDescData = protoimpl.X.CompressGZIP(file_dhcp_proto_rawDescData)
	})
	return file_dhcp_proto_rawDescData
}

var file_dhcp_proto_msgTypes = make([]protoimpl.MessageInfo, 82)
var file_dhcp_proto_goTypes = []interface{}{
	(*GetSubnet4WithIpRequest)(nil),              // 0: GetSubnet4WithIpRequest
	(*Subnet4)(nil),                              // 1: Subnet4
	(*GetSubnet4WithIpResponse)(nil),             // 2: GetSubnet4WithIpResponse
	(*GetSubnet6WithIpRequest)(nil),              // 3: GetSubnet6WithIpRequest
	(*Subnet6)(nil),                              // 4: Subnet6
	(*GetSubnet6WithIpResponse)(nil),             // 5: GetSubnet6WithIpResponse
	(*GetSubnets4WithIpsRequest)(nil),            // 6: GetSubnets4WithIpsRequest
	(*GetSubnets4WithIpsResponse)(nil),           // 7: GetSubnets4WithIpsResponse
	(*GetSubnets6WithIpsRequest)(nil),            // 8: GetSubnets6WithIpsRequest
	(*GetSubnets6WithIpsResponse)(nil),           // 9: GetSubnets6WithIpsResponse
	(*GetSubnet4AndLease4WithIpRequest)(nil),     // 10: GetSubnet4AndLease4WithIpRequest
	(*Lease4)(nil),                               // 11: Lease4
	(*Ipv4Information)(nil),                      // 12: Ipv4Information
	(*GetSubnet4AndLease4WithIpResponse)(nil),    // 13: GetSubnet4AndLease4WithIpResponse
	(*GetSubnet6AndLease6WithIpRequest)(nil),     // 14: GetSubnet6AndLease6WithIpRequest
	(*Lease6)(nil),                               // 15: Lease6
	(*Ipv6Information)(nil),                      // 16: Ipv6Information
	(*GetSubnet6AndLease6WithIpResponse)(nil),    // 17: GetSubnet6AndLease6WithIpResponse
	(*GetSubnets4AndLeases4WithIpsRequest)(nil),  // 18: GetSubnets4AndLeases4WithIpsRequest
	(*GetSubnets4AndLeases4WithIpsResponse)(nil), // 19: GetSubnets4AndLeases4WithIpsResponse
	(*GetSubnets6AndLeases6WithIpsRequest)(nil),  // 20: GetSubnets6AndLeases6WithIpsRequest
	(*GetSubnets6AndLeases6WithIpsResponse)(nil), // 21: GetSubnets6AndLeases6WithIpsResponse
	(*GetSubnet4Request)(nil),                    // 22: GetSubnet4Request
	(*GetSubnet4Response)(nil),                   // 23: GetSubnet4Response
	(*DhcpSubnet4)(nil),                          // 24: DhcpSubnet4
	(*GetPool4BySubnet4Request)(nil),             // 25: GetPool4BySubnet4Request
	(*GetPool4BySubnet4Response)(nil),            // 26: GetPool4BySubnet4Response
	(*DhcpPool4)(nil),                            // 27: DhcpPool4
	(*GetReservedPool4BySubnet4IdRequest)(nil),   // 28: GetReservedPool4BySubnet4IdRequest
	(*GetReservedPool4BySubnet4IdResponse)(nil),  // 29: GetReservedPool4BySubnet4IdResponse
	(*DhcpReservedPool4)(nil),                    // 30: DhcpReservedPool4
	(*GetReservation4BySubnet4IdRequest)(nil),    // 31: GetReservation4BySubnet4IdRequest
	(*GetReservation4BySubnet4IdResponse)(nil),   // 32: GetReservation4BySubnet4IdResponse
	(*DhcpReservation4)(nil),                     // 33: DhcpReservation4
	(*GetLease4BySubnet4IdRequest)(nil),          // 34: GetLease4BySubnet4IdRequest
	(*GetLease4BySubnet4IdResponse)(nil),         // 35: GetLease4BySubnet4IdResponse
	(*DhcpSubnetLease4)(nil),                     // 36: DhcpSubnetLease4
	(*GetLease4ByIpRequest)(nil),                 // 37: GetLease4ByIpRequest
	(*GetLease4ByIpResponse)(nil),                // 38: GetLease4ByIpResponse
	(*GetSubnet6Request)(nil),                    // 39: GetSubnet6Request
	(*GetSubnet6Response)(nil),                   // 40: GetSubnet6Response
	(*DhcpSubnet6)(nil),                          // 41: DhcpSubnet6
	(*GetPool6BySubnet6IdRequest)(nil),           // 42: GetPool6BySubnet6IdRequest
	(*GetPool6BySubnet6IdResponse)(nil),          // 43: GetPool6BySubnet6IdResponse
	(*DhcpPool6)(nil),                            // 44: DhcpPool6
	(*GetReservedPool6BySubnet6IdRequest)(nil),   // 45: GetReservedPool6BySubnet6IdRequest
	(*GetReservedPool6BySubnet6IdResponse)(nil),  // 46: GetReservedPool6BySubnet6IdResponse
	(*DhcpReservedPool6)(nil),                    // 47: DhcpReservedPool6
	(*GetReservation6BySubnet6IdRequest)(nil),    // 48: GetReservation6BySubnet6IdRequest
	(*GetReservation6BySubnet6IdResponse)(nil),   // 49: GetReservation6BySubnet6IdResponse
	(*DhcpReservation6)(nil),                     // 50: DhcpReservation6
	(*GetLease6BySubnet6IdRequest)(nil),          // 51: GetLease6BySubnet6IdRequest
	(*GetLease6BySubnet6IdResponse)(nil),         // 52: GetLease6BySubnet6IdResponse
	(*GetLease6ByIpRequest)(nil),                 // 53: GetLease6ByIpRequest
	(*GetLease6ByIpResponse)(nil),                // 54: GetLease6ByIpResponse
	(*DhcpSubnetLease6)(nil),                     // 55: DhcpSubnetLease6
	(*CreateReservation4SRequest)(nil),           // 56: CreateReservation4sRequest
	(*CreateReservation4SResponse)(nil),          // 57: CreateReservation4sResponse
	(*CreateReservedPool4Request)(nil),           // 58: CreateReservedPool4Request
	(*CreateReservedPool4Response)(nil),          // 59: CreateReservedPool4Response
	(*CreateReservation6SRequest)(nil),           // 60: CreateReservation6sRequest
	(*CreateReservation6SResponse)(nil),          // 61: CreateReservation6sResponse
	(*CreateReservedPool6Request)(nil),           // 62: CreateReservedPool6Request
	(*CreateReservedPool6Response)(nil),          // 63: CreateReservedPool6Response
	nil,                                          // 64: GetSubnet4WithIpResponse.SubnetsEntry
	nil,                                          // 65: GetSubnet6WithIpResponse.SubnetsEntry
	nil,                                          // 66: GetSubnets4WithIpsResponse.SubnetsEntry
	nil,                                          // 67: GetSubnets6WithIpsResponse.SubnetsEntry
	nil,                                          // 68: GetSubnet4AndLease4WithIpResponse.Ipv4InformationsEntry
	nil,                                          // 69: GetSubnet6AndLease6WithIpResponse.Ipv6InformationsEntry
	nil,                                          // 70: GetSubnets4AndLeases4WithIpsResponse.Ipv4InformationsEntry
	nil,                                          // 71: GetSubnets6AndLeases6WithIpsResponse.Ipv6InformationsEntry
	nil,                                          // 72: DhcpSubnet4.LinksEntry
	nil,                                          // 73: DhcpPool4.LinksEntry
	nil,                                          // 74: DhcpReservedPool4.LinksEntry
	nil,                                          // 75: DhcpReservation4.LinksEntry
	nil,                                          // 76: DhcpSubnetLease4.LinksEntry
	nil,                                          // 77: DhcpSubnet6.LinksEntry
	nil,                                          // 78: DhcpPool6.LinksEntry
	nil,                                          // 79: DhcpReservedPool6.LinksEntry
	nil,                                          // 80: DhcpReservation6.LinksEntry
	nil,                                          // 81: DhcpSubnetLease6.LinksEntry
}
var file_dhcp_proto_depIdxs = []int32{
	64, // 0: GetSubnet4WithIpResponse.subnets:type_name -> GetSubnet4WithIpResponse.SubnetsEntry
	65, // 1: GetSubnet6WithIpResponse.subnets:type_name -> GetSubnet6WithIpResponse.SubnetsEntry
	66, // 2: GetSubnets4WithIpsResponse.subnets:type_name -> GetSubnets4WithIpsResponse.SubnetsEntry
	67, // 3: GetSubnets6WithIpsResponse.subnets:type_name -> GetSubnets6WithIpsResponse.SubnetsEntry
	1,  // 4: Ipv4Information.subnet:type_name -> Subnet4
	11, // 5: Ipv4Information.lease:type_name -> Lease4
	68, // 6: GetSubnet4AndLease4WithIpResponse.ipv4_informations:type_name -> GetSubnet4AndLease4WithIpResponse.Ipv4InformationsEntry
	4,  // 7: Ipv6Information.subnet:type_name -> Subnet6
	15, // 8: Ipv6Information.lease:type_name -> Lease6
	69, // 9: GetSubnet6AndLease6WithIpResponse.ipv6_informations:type_name -> GetSubnet6AndLease6WithIpResponse.Ipv6InformationsEntry
	70, // 10: GetSubnets4AndLeases4WithIpsResponse.ipv4_informations:type_name -> GetSubnets4AndLeases4WithIpsResponse.Ipv4InformationsEntry
	71, // 11: GetSubnets6AndLeases6WithIpsResponse.ipv6_informations:type_name -> GetSubnets6AndLeases6WithIpsResponse.Ipv6InformationsEntry
	24, // 12: GetSubnet4Response.subnet4s:type_name -> DhcpSubnet4
	72, // 13: DhcpSubnet4.links:type_name -> DhcpSubnet4.LinksEntry
	24, // 14: GetPool4BySubnet4Request.subnet:type_name -> DhcpSubnet4
	27, // 15: GetPool4BySubnet4Response.pool4s:type_name -> DhcpPool4
	73, // 16: DhcpPool4.links:type_name -> DhcpPool4.LinksEntry
	30, // 17: GetReservedPool4BySubnet4IdResponse.reserved_pool4s:type_name -> DhcpReservedPool4
	74, // 18: DhcpReservedPool4.links:type_name -> DhcpReservedPool4.LinksEntry
	33, // 19: GetReservation4BySubnet4IdResponse.reservation4s:type_name -> DhcpReservation4
	75, // 20: DhcpReservation4.links:type_name -> DhcpReservation4.LinksEntry
	36, // 21: GetLease4BySubnet4IdResponse.subnet_lease4s:type_name -> DhcpSubnetLease4
	76, // 22: DhcpSubnetLease4.links:type_name -> DhcpSubnetLease4.LinksEntry
	36, // 23: GetLease4ByIpResponse.subnet_lease4s:type_name -> DhcpSubnetLease4
	41, // 24: GetSubnet6Response.subnet6s:type_name -> DhcpSubnet6
	77, // 25: DhcpSubnet6.links:type_name -> DhcpSubnet6.LinksEntry
	41, // 26: GetPool6BySubnet6IdRequest.subnet:type_name -> DhcpSubnet6
	44, // 27: GetPool6BySubnet6IdResponse.pool6s:type_name -> DhcpPool6
	78, // 28: DhcpPool6.links:type_name -> DhcpPool6.LinksEntry
	41, // 29: GetReservedPool6BySubnet6IdRequest.subnet:type_name -> DhcpSubnet6
	47, // 30: GetReservedPool6BySubnet6IdResponse.reserved_pool6s:type_name -> DhcpReservedPool6
	79, // 31: DhcpReservedPool6.links:type_name -> DhcpReservedPool6.LinksEntry
	50, // 32: GetReservation6BySubnet6IdResponse.reservation6s:type_name -> DhcpReservation6
	80, // 33: DhcpReservation6.links:type_name -> DhcpReservation6.LinksEntry
	55, // 34: GetLease6BySubnet6IdResponse.subnet_lease6:type_name -> DhcpSubnetLease6
	55, // 35: GetLease6ByIpResponse.subnet_lease6:type_name -> DhcpSubnetLease6
	81, // 36: DhcpSubnetLease6.links:type_name -> DhcpSubnetLease6.LinksEntry
	24, // 37: CreateReservation4sRequest.parent_subnet:type_name -> DhcpSubnet4
	33, // 38: CreateReservation4sRequest.reservation:type_name -> DhcpReservation4
	24, // 39: CreateReservedPool4Request.parent_subnet:type_name -> DhcpSubnet4
	30, // 40: CreateReservedPool4Request.reserved_pool:type_name -> DhcpReservedPool4
	41, // 41: CreateReservation6sRequest.parent_subnet:type_name -> DhcpSubnet6
	50, // 42: CreateReservation6sRequest.reservation:type_name -> DhcpReservation6
	41, // 43: CreateReservedPool6Request.parent_subnet:type_name -> DhcpSubnet6
	47, // 44: CreateReservedPool6Request.reserved_pool:type_name -> DhcpReservedPool6
	1,  // 45: GetSubnet4WithIpResponse.SubnetsEntry.value:type_name -> Subnet4
	4,  // 46: GetSubnet6WithIpResponse.SubnetsEntry.value:type_name -> Subnet6
	1,  // 47: GetSubnets4WithIpsResponse.SubnetsEntry.value:type_name -> Subnet4
	4,  // 48: GetSubnets6WithIpsResponse.SubnetsEntry.value:type_name -> Subnet6
	12, // 49: GetSubnet4AndLease4WithIpResponse.Ipv4InformationsEntry.value:type_name -> Ipv4Information
	16, // 50: GetSubnet6AndLease6WithIpResponse.Ipv6InformationsEntry.value:type_name -> Ipv6Information
	12, // 51: GetSubnets4AndLeases4WithIpsResponse.Ipv4InformationsEntry.value:type_name -> Ipv4Information
	16, // 52: GetSubnets6AndLeases6WithIpsResponse.Ipv6InformationsEntry.value:type_name -> Ipv6Information
	0,  // 53: DhcpService.GetSubnet4WithIp:input_type -> GetSubnet4WithIpRequest
	3,  // 54: DhcpService.GetSubnet6WithIp:input_type -> GetSubnet6WithIpRequest
	6,  // 55: DhcpService.GetSubnets4WithIps:input_type -> GetSubnets4WithIpsRequest
	8,  // 56: DhcpService.GetSubnets6WithIps:input_type -> GetSubnets6WithIpsRequest
	10, // 57: DhcpService.GetSubnet4AndLease4WithIp:input_type -> GetSubnet4AndLease4WithIpRequest
	14, // 58: DhcpService.GetSubnet6AndLease6WithIp:input_type -> GetSubnet6AndLease6WithIpRequest
	18, // 59: DhcpService.GetSubnets4AndLeases4WithIps:input_type -> GetSubnets4AndLeases4WithIpsRequest
	20, // 60: DhcpService.GetSubnets6AndLeases6WithIps:input_type -> GetSubnets6AndLeases6WithIpsRequest
	22, // 61: DhcpService.GetListAllSubnet4:input_type -> GetSubnet4Request
	22, // 62: DhcpService.GetListSubnet4ByPrefixes:input_type -> GetSubnet4Request
	25, // 63: DhcpService.GetListPool4BySubnet4:input_type -> GetPool4BySubnet4Request
	28, // 64: DhcpService.GetListReservedPool4BySubnet4Id:input_type -> GetReservedPool4BySubnet4IdRequest
	31, // 65: DhcpService.GetListReservation4BySubnet4Id:input_type -> GetReservation4BySubnet4IdRequest
	34, // 66: DhcpService.GetListLease4BySubnet4Id:input_type -> GetLease4BySubnet4IdRequest
	37, // 67: DhcpService.GetListLease4ByIp:input_type -> GetLease4ByIpRequest
	39, // 68: DhcpService.GetListAllSubnet6:input_type -> GetSubnet6Request
	39, // 69: DhcpService.GetListSubnet6ByPrefixes:input_type -> GetSubnet6Request
	42, // 70: DhcpService.GetListPool6BySubnet6Id:input_type -> GetPool6BySubnet6IdRequest
	45, // 71: DhcpService.GetListReservedPool6BySubnet6Id:input_type -> GetReservedPool6BySubnet6IdRequest
	48, // 72: DhcpService.GetListReservation6BySubnet6Id:input_type -> GetReservation6BySubnet6IdRequest
	51, // 73: DhcpService.GetListLease6BySubnet6Id:input_type -> GetLease6BySubnet6IdRequest
	53, // 74: DhcpService.GetListLease6ByIp:input_type -> GetLease6ByIpRequest
	56, // 75: DhcpService.CreateReservation4s:input_type -> CreateReservation4sRequest
	58, // 76: DhcpService.CreateReservedPool4:input_type -> CreateReservedPool4Request
	60, // 77: DhcpService.CreateReservation6s:input_type -> CreateReservation6sRequest
	62, // 78: DhcpService.CreateReservedPool6:input_type -> CreateReservedPool6Request
	2,  // 79: DhcpService.GetSubnet4WithIp:output_type -> GetSubnet4WithIpResponse
	5,  // 80: DhcpService.GetSubnet6WithIp:output_type -> GetSubnet6WithIpResponse
	7,  // 81: DhcpService.GetSubnets4WithIps:output_type -> GetSubnets4WithIpsResponse
	9,  // 82: DhcpService.GetSubnets6WithIps:output_type -> GetSubnets6WithIpsResponse
	13, // 83: DhcpService.GetSubnet4AndLease4WithIp:output_type -> GetSubnet4AndLease4WithIpResponse
	17, // 84: DhcpService.GetSubnet6AndLease6WithIp:output_type -> GetSubnet6AndLease6WithIpResponse
	19, // 85: DhcpService.GetSubnets4AndLeases4WithIps:output_type -> GetSubnets4AndLeases4WithIpsResponse
	21, // 86: DhcpService.GetSubnets6AndLeases6WithIps:output_type -> GetSubnets6AndLeases6WithIpsResponse
	23, // 87: DhcpService.GetListAllSubnet4:output_type -> GetSubnet4Response
	23, // 88: DhcpService.GetListSubnet4ByPrefixes:output_type -> GetSubnet4Response
	26, // 89: DhcpService.GetListPool4BySubnet4:output_type -> GetPool4BySubnet4Response
	29, // 90: DhcpService.GetListReservedPool4BySubnet4Id:output_type -> GetReservedPool4BySubnet4IdResponse
	32, // 91: DhcpService.GetListReservation4BySubnet4Id:output_type -> GetReservation4BySubnet4IdResponse
	35, // 92: DhcpService.GetListLease4BySubnet4Id:output_type -> GetLease4BySubnet4IdResponse
	38, // 93: DhcpService.GetListLease4ByIp:output_type -> GetLease4ByIpResponse
	40, // 94: DhcpService.GetListAllSubnet6:output_type -> GetSubnet6Response
	40, // 95: DhcpService.GetListSubnet6ByPrefixes:output_type -> GetSubnet6Response
	43, // 96: DhcpService.GetListPool6BySubnet6Id:output_type -> GetPool6BySubnet6IdResponse
	46, // 97: DhcpService.GetListReservedPool6BySubnet6Id:output_type -> GetReservedPool6BySubnet6IdResponse
	49, // 98: DhcpService.GetListReservation6BySubnet6Id:output_type -> GetReservation6BySubnet6IdResponse
	52, // 99: DhcpService.GetListLease6BySubnet6Id:output_type -> GetLease6BySubnet6IdResponse
	54, // 100: DhcpService.GetListLease6ByIp:output_type -> GetLease6ByIpResponse
	57, // 101: DhcpService.CreateReservation4s:output_type -> CreateReservation4sResponse
	59, // 102: DhcpService.CreateReservedPool4:output_type -> CreateReservedPool4Response
	61, // 103: DhcpService.CreateReservation6s:output_type -> CreateReservation6sResponse
	63, // 104: DhcpService.CreateReservedPool6:output_type -> CreateReservedPool6Response
	79, // [79:105] is the sub-list for method output_type
	53, // [53:79] is the sub-list for method input_type
	53, // [53:53] is the sub-list for extension type_name
	53, // [53:53] is the sub-list for extension extendee
	0,  // [0:53] is the sub-list for field type_name
}

func init() { file_dhcp_proto_init() }
func file_dhcp_proto_init() {
	if File_dhcp_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_dhcp_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSubnet4WithIpRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Subnet4); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSubnet4WithIpResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSubnet6WithIpRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Subnet6); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSubnet6WithIpResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSubnets4WithIpsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSubnets4WithIpsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSubnets6WithIpsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSubnets6WithIpsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSubnet4AndLease4WithIpRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Lease4); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ipv4Information); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSubnet4AndLease4WithIpResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSubnet6AndLease6WithIpRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Lease6); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ipv6Information); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSubnet6AndLease6WithIpResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSubnets4AndLeases4WithIpsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSubnets4AndLeases4WithIpsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSubnets6AndLeases6WithIpsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSubnets6AndLeases6WithIpsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSubnet4Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSubnet4Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DhcpSubnet4); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPool4BySubnet4Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPool4BySubnet4Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DhcpPool4); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetReservedPool4BySubnet4IdRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetReservedPool4BySubnet4IdResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DhcpReservedPool4); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetReservation4BySubnet4IdRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetReservation4BySubnet4IdResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DhcpReservation4); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLease4BySubnet4IdRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLease4BySubnet4IdResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DhcpSubnetLease4); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLease4ByIpRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLease4ByIpResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSubnet6Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSubnet6Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DhcpSubnet6); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPool6BySubnet6IdRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPool6BySubnet6IdResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DhcpPool6); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetReservedPool6BySubnet6IdRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetReservedPool6BySubnet6IdResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DhcpReservedPool6); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetReservation6BySubnet6IdRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetReservation6BySubnet6IdResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DhcpReservation6); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLease6BySubnet6IdRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLease6BySubnet6IdResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLease6ByIpRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLease6ByIpResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DhcpSubnetLease6); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateReservation4SRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateReservation4SResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateReservedPool4Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateReservedPool4Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateReservation6SRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateReservation6SResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateReservedPool6Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateReservedPool6Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_dhcp_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   82,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_dhcp_proto_goTypes,
		DependencyIndexes: file_dhcp_proto_depIdxs,
		MessageInfos:      file_dhcp_proto_msgTypes,
	}.Build()
	File_dhcp_proto = out.File
	file_dhcp_proto_rawDesc = nil
	file_dhcp_proto_goTypes = nil
	file_dhcp_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// DhcpServiceClient is the client API for DhcpService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DhcpServiceClient interface {
	GetSubnet4WithIp(ctx context.Context, in *GetSubnet4WithIpRequest, opts ...grpc.CallOption) (*GetSubnet4WithIpResponse, error)
	GetSubnet6WithIp(ctx context.Context, in *GetSubnet6WithIpRequest, opts ...grpc.CallOption) (*GetSubnet6WithIpResponse, error)
	GetSubnets4WithIps(ctx context.Context, in *GetSubnets4WithIpsRequest, opts ...grpc.CallOption) (*GetSubnets4WithIpsResponse, error)
	GetSubnets6WithIps(ctx context.Context, in *GetSubnets6WithIpsRequest, opts ...grpc.CallOption) (*GetSubnets6WithIpsResponse, error)
	GetSubnet4AndLease4WithIp(ctx context.Context, in *GetSubnet4AndLease4WithIpRequest, opts ...grpc.CallOption) (*GetSubnet4AndLease4WithIpResponse, error)
	GetSubnet6AndLease6WithIp(ctx context.Context, in *GetSubnet6AndLease6WithIpRequest, opts ...grpc.CallOption) (*GetSubnet6AndLease6WithIpResponse, error)
	GetSubnets4AndLeases4WithIps(ctx context.Context, in *GetSubnets4AndLeases4WithIpsRequest, opts ...grpc.CallOption) (*GetSubnets4AndLeases4WithIpsResponse, error)
	GetSubnets6AndLeases6WithIps(ctx context.Context, in *GetSubnets6AndLeases6WithIpsRequest, opts ...grpc.CallOption) (*GetSubnets6AndLeases6WithIpsResponse, error)
	GetListAllSubnet4(ctx context.Context, in *GetSubnet4Request, opts ...grpc.CallOption) (*GetSubnet4Response, error)
	GetListSubnet4ByPrefixes(ctx context.Context, in *GetSubnet4Request, opts ...grpc.CallOption) (*GetSubnet4Response, error)
	GetListPool4BySubnet4(ctx context.Context, in *GetPool4BySubnet4Request, opts ...grpc.CallOption) (*GetPool4BySubnet4Response, error)
	GetListReservedPool4BySubnet4Id(ctx context.Context, in *GetReservedPool4BySubnet4IdRequest, opts ...grpc.CallOption) (*GetReservedPool4BySubnet4IdResponse, error)
	GetListReservation4BySubnet4Id(ctx context.Context, in *GetReservation4BySubnet4IdRequest, opts ...grpc.CallOption) (*GetReservation4BySubnet4IdResponse, error)
	GetListLease4BySubnet4Id(ctx context.Context, in *GetLease4BySubnet4IdRequest, opts ...grpc.CallOption) (*GetLease4BySubnet4IdResponse, error)
	GetListLease4ByIp(ctx context.Context, in *GetLease4ByIpRequest, opts ...grpc.CallOption) (*GetLease4ByIpResponse, error)
	GetListAllSubnet6(ctx context.Context, in *GetSubnet6Request, opts ...grpc.CallOption) (*GetSubnet6Response, error)
	GetListSubnet6ByPrefixes(ctx context.Context, in *GetSubnet6Request, opts ...grpc.CallOption) (*GetSubnet6Response, error)
	GetListPool6BySubnet6Id(ctx context.Context, in *GetPool6BySubnet6IdRequest, opts ...grpc.CallOption) (*GetPool6BySubnet6IdResponse, error)
	GetListReservedPool6BySubnet6Id(ctx context.Context, in *GetReservedPool6BySubnet6IdRequest, opts ...grpc.CallOption) (*GetReservedPool6BySubnet6IdResponse, error)
	GetListReservation6BySubnet6Id(ctx context.Context, in *GetReservation6BySubnet6IdRequest, opts ...grpc.CallOption) (*GetReservation6BySubnet6IdResponse, error)
	GetListLease6BySubnet6Id(ctx context.Context, in *GetLease6BySubnet6IdRequest, opts ...grpc.CallOption) (*GetLease6BySubnet6IdResponse, error)
	GetListLease6ByIp(ctx context.Context, in *GetLease6ByIpRequest, opts ...grpc.CallOption) (*GetLease6ByIpResponse, error)
	CreateReservation4S(ctx context.Context, in *CreateReservation4SRequest, opts ...grpc.CallOption) (*CreateReservation4SResponse, error)
	CreateReservedPool4(ctx context.Context, in *CreateReservedPool4Request, opts ...grpc.CallOption) (*CreateReservedPool4Response, error)
	CreateReservation6S(ctx context.Context, in *CreateReservation6SRequest, opts ...grpc.CallOption) (*CreateReservation6SResponse, error)
	CreateReservedPool6(ctx context.Context, in *CreateReservedPool6Request, opts ...grpc.CallOption) (*CreateReservedPool6Response, error)
}

type dhcpServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDhcpServiceClient(cc grpc.ClientConnInterface) DhcpServiceClient {
	return &dhcpServiceClient{cc}
}

func (c *dhcpServiceClient) GetSubnet4WithIp(ctx context.Context, in *GetSubnet4WithIpRequest, opts ...grpc.CallOption) (*GetSubnet4WithIpResponse, error) {
	out := new(GetSubnet4WithIpResponse)
	err := c.cc.Invoke(ctx, "/DhcpService/GetSubnet4WithIp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dhcpServiceClient) GetSubnet6WithIp(ctx context.Context, in *GetSubnet6WithIpRequest, opts ...grpc.CallOption) (*GetSubnet6WithIpResponse, error) {
	out := new(GetSubnet6WithIpResponse)
	err := c.cc.Invoke(ctx, "/DhcpService/GetSubnet6WithIp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dhcpServiceClient) GetSubnets4WithIps(ctx context.Context, in *GetSubnets4WithIpsRequest, opts ...grpc.CallOption) (*GetSubnets4WithIpsResponse, error) {
	out := new(GetSubnets4WithIpsResponse)
	err := c.cc.Invoke(ctx, "/DhcpService/GetSubnets4WithIps", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dhcpServiceClient) GetSubnets6WithIps(ctx context.Context, in *GetSubnets6WithIpsRequest, opts ...grpc.CallOption) (*GetSubnets6WithIpsResponse, error) {
	out := new(GetSubnets6WithIpsResponse)
	err := c.cc.Invoke(ctx, "/DhcpService/GetSubnets6WithIps", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dhcpServiceClient) GetSubnet4AndLease4WithIp(ctx context.Context, in *GetSubnet4AndLease4WithIpRequest, opts ...grpc.CallOption) (*GetSubnet4AndLease4WithIpResponse, error) {
	out := new(GetSubnet4AndLease4WithIpResponse)
	err := c.cc.Invoke(ctx, "/DhcpService/GetSubnet4AndLease4WithIp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dhcpServiceClient) GetSubnet6AndLease6WithIp(ctx context.Context, in *GetSubnet6AndLease6WithIpRequest, opts ...grpc.CallOption) (*GetSubnet6AndLease6WithIpResponse, error) {
	out := new(GetSubnet6AndLease6WithIpResponse)
	err := c.cc.Invoke(ctx, "/DhcpService/GetSubnet6AndLease6WithIp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dhcpServiceClient) GetSubnets4AndLeases4WithIps(ctx context.Context, in *GetSubnets4AndLeases4WithIpsRequest, opts ...grpc.CallOption) (*GetSubnets4AndLeases4WithIpsResponse, error) {
	out := new(GetSubnets4AndLeases4WithIpsResponse)
	err := c.cc.Invoke(ctx, "/DhcpService/GetSubnets4AndLeases4WithIps", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dhcpServiceClient) GetSubnets6AndLeases6WithIps(ctx context.Context, in *GetSubnets6AndLeases6WithIpsRequest, opts ...grpc.CallOption) (*GetSubnets6AndLeases6WithIpsResponse, error) {
	out := new(GetSubnets6AndLeases6WithIpsResponse)
	err := c.cc.Invoke(ctx, "/DhcpService/GetSubnets6AndLeases6WithIps", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dhcpServiceClient) GetListAllSubnet4(ctx context.Context, in *GetSubnet4Request, opts ...grpc.CallOption) (*GetSubnet4Response, error) {
	out := new(GetSubnet4Response)
	err := c.cc.Invoke(ctx, "/DhcpService/GetListAllSubnet4", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dhcpServiceClient) GetListSubnet4ByPrefixes(ctx context.Context, in *GetSubnet4Request, opts ...grpc.CallOption) (*GetSubnet4Response, error) {
	out := new(GetSubnet4Response)
	err := c.cc.Invoke(ctx, "/DhcpService/GetListSubnet4ByPrefixes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dhcpServiceClient) GetListPool4BySubnet4(ctx context.Context, in *GetPool4BySubnet4Request, opts ...grpc.CallOption) (*GetPool4BySubnet4Response, error) {
	out := new(GetPool4BySubnet4Response)
	err := c.cc.Invoke(ctx, "/DhcpService/GetListPool4BySubnet4", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dhcpServiceClient) GetListReservedPool4BySubnet4Id(ctx context.Context, in *GetReservedPool4BySubnet4IdRequest, opts ...grpc.CallOption) (*GetReservedPool4BySubnet4IdResponse, error) {
	out := new(GetReservedPool4BySubnet4IdResponse)
	err := c.cc.Invoke(ctx, "/DhcpService/GetListReservedPool4BySubnet4Id", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dhcpServiceClient) GetListReservation4BySubnet4Id(ctx context.Context, in *GetReservation4BySubnet4IdRequest, opts ...grpc.CallOption) (*GetReservation4BySubnet4IdResponse, error) {
	out := new(GetReservation4BySubnet4IdResponse)
	err := c.cc.Invoke(ctx, "/DhcpService/GetListReservation4BySubnet4Id", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dhcpServiceClient) GetListLease4BySubnet4Id(ctx context.Context, in *GetLease4BySubnet4IdRequest, opts ...grpc.CallOption) (*GetLease4BySubnet4IdResponse, error) {
	out := new(GetLease4BySubnet4IdResponse)
	err := c.cc.Invoke(ctx, "/DhcpService/GetListLease4BySubnet4Id", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dhcpServiceClient) GetListLease4ByIp(ctx context.Context, in *GetLease4ByIpRequest, opts ...grpc.CallOption) (*GetLease4ByIpResponse, error) {
	out := new(GetLease4ByIpResponse)
	err := c.cc.Invoke(ctx, "/DhcpService/GetListLease4ByIp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dhcpServiceClient) GetListAllSubnet6(ctx context.Context, in *GetSubnet6Request, opts ...grpc.CallOption) (*GetSubnet6Response, error) {
	out := new(GetSubnet6Response)
	err := c.cc.Invoke(ctx, "/DhcpService/GetListAllSubnet6", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dhcpServiceClient) GetListSubnet6ByPrefixes(ctx context.Context, in *GetSubnet6Request, opts ...grpc.CallOption) (*GetSubnet6Response, error) {
	out := new(GetSubnet6Response)
	err := c.cc.Invoke(ctx, "/DhcpService/GetListSubnet6ByPrefixes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dhcpServiceClient) GetListPool6BySubnet6Id(ctx context.Context, in *GetPool6BySubnet6IdRequest, opts ...grpc.CallOption) (*GetPool6BySubnet6IdResponse, error) {
	out := new(GetPool6BySubnet6IdResponse)
	err := c.cc.Invoke(ctx, "/DhcpService/GetListPool6BySubnet6Id", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dhcpServiceClient) GetListReservedPool6BySubnet6Id(ctx context.Context, in *GetReservedPool6BySubnet6IdRequest, opts ...grpc.CallOption) (*GetReservedPool6BySubnet6IdResponse, error) {
	out := new(GetReservedPool6BySubnet6IdResponse)
	err := c.cc.Invoke(ctx, "/DhcpService/GetListReservedPool6BySubnet6Id", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dhcpServiceClient) GetListReservation6BySubnet6Id(ctx context.Context, in *GetReservation6BySubnet6IdRequest, opts ...grpc.CallOption) (*GetReservation6BySubnet6IdResponse, error) {
	out := new(GetReservation6BySubnet6IdResponse)
	err := c.cc.Invoke(ctx, "/DhcpService/GetListReservation6BySubnet6Id", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dhcpServiceClient) GetListLease6BySubnet6Id(ctx context.Context, in *GetLease6BySubnet6IdRequest, opts ...grpc.CallOption) (*GetLease6BySubnet6IdResponse, error) {
	out := new(GetLease6BySubnet6IdResponse)
	err := c.cc.Invoke(ctx, "/DhcpService/GetListLease6BySubnet6Id", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dhcpServiceClient) GetListLease6ByIp(ctx context.Context, in *GetLease6ByIpRequest, opts ...grpc.CallOption) (*GetLease6ByIpResponse, error) {
	out := new(GetLease6ByIpResponse)
	err := c.cc.Invoke(ctx, "/DhcpService/GetListLease6ByIp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dhcpServiceClient) CreateReservation4S(ctx context.Context, in *CreateReservation4SRequest, opts ...grpc.CallOption) (*CreateReservation4SResponse, error) {
	out := new(CreateReservation4SResponse)
	err := c.cc.Invoke(ctx, "/DhcpService/CreateReservation4s", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dhcpServiceClient) CreateReservedPool4(ctx context.Context, in *CreateReservedPool4Request, opts ...grpc.CallOption) (*CreateReservedPool4Response, error) {
	out := new(CreateReservedPool4Response)
	err := c.cc.Invoke(ctx, "/DhcpService/CreateReservedPool4", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dhcpServiceClient) CreateReservation6S(ctx context.Context, in *CreateReservation6SRequest, opts ...grpc.CallOption) (*CreateReservation6SResponse, error) {
	out := new(CreateReservation6SResponse)
	err := c.cc.Invoke(ctx, "/DhcpService/CreateReservation6s", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dhcpServiceClient) CreateReservedPool6(ctx context.Context, in *CreateReservedPool6Request, opts ...grpc.CallOption) (*CreateReservedPool6Response, error) {
	out := new(CreateReservedPool6Response)
	err := c.cc.Invoke(ctx, "/DhcpService/CreateReservedPool6", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DhcpServiceServer is the server API for DhcpService service.
type DhcpServiceServer interface {
	GetSubnet4WithIp(context.Context, *GetSubnet4WithIpRequest) (*GetSubnet4WithIpResponse, error)
	GetSubnet6WithIp(context.Context, *GetSubnet6WithIpRequest) (*GetSubnet6WithIpResponse, error)
	GetSubnets4WithIps(context.Context, *GetSubnets4WithIpsRequest) (*GetSubnets4WithIpsResponse, error)
	GetSubnets6WithIps(context.Context, *GetSubnets6WithIpsRequest) (*GetSubnets6WithIpsResponse, error)
	GetSubnet4AndLease4WithIp(context.Context, *GetSubnet4AndLease4WithIpRequest) (*GetSubnet4AndLease4WithIpResponse, error)
	GetSubnet6AndLease6WithIp(context.Context, *GetSubnet6AndLease6WithIpRequest) (*GetSubnet6AndLease6WithIpResponse, error)
	GetSubnets4AndLeases4WithIps(context.Context, *GetSubnets4AndLeases4WithIpsRequest) (*GetSubnets4AndLeases4WithIpsResponse, error)
	GetSubnets6AndLeases6WithIps(context.Context, *GetSubnets6AndLeases6WithIpsRequest) (*GetSubnets6AndLeases6WithIpsResponse, error)
	GetListAllSubnet4(context.Context, *GetSubnet4Request) (*GetSubnet4Response, error)
	GetListSubnet4ByPrefixes(context.Context, *GetSubnet4Request) (*GetSubnet4Response, error)
	GetListPool4BySubnet4(context.Context, *GetPool4BySubnet4Request) (*GetPool4BySubnet4Response, error)
	GetListReservedPool4BySubnet4Id(context.Context, *GetReservedPool4BySubnet4IdRequest) (*GetReservedPool4BySubnet4IdResponse, error)
	GetListReservation4BySubnet4Id(context.Context, *GetReservation4BySubnet4IdRequest) (*GetReservation4BySubnet4IdResponse, error)
	GetListLease4BySubnet4Id(context.Context, *GetLease4BySubnet4IdRequest) (*GetLease4BySubnet4IdResponse, error)
	GetListLease4ByIp(context.Context, *GetLease4ByIpRequest) (*GetLease4ByIpResponse, error)
	GetListAllSubnet6(context.Context, *GetSubnet6Request) (*GetSubnet6Response, error)
	GetListSubnet6ByPrefixes(context.Context, *GetSubnet6Request) (*GetSubnet6Response, error)
	GetListPool6BySubnet6Id(context.Context, *GetPool6BySubnet6IdRequest) (*GetPool6BySubnet6IdResponse, error)
	GetListReservedPool6BySubnet6Id(context.Context, *GetReservedPool6BySubnet6IdRequest) (*GetReservedPool6BySubnet6IdResponse, error)
	GetListReservation6BySubnet6Id(context.Context, *GetReservation6BySubnet6IdRequest) (*GetReservation6BySubnet6IdResponse, error)
	GetListLease6BySubnet6Id(context.Context, *GetLease6BySubnet6IdRequest) (*GetLease6BySubnet6IdResponse, error)
	GetListLease6ByIp(context.Context, *GetLease6ByIpRequest) (*GetLease6ByIpResponse, error)
	CreateReservation4S(context.Context, *CreateReservation4SRequest) (*CreateReservation4SResponse, error)
	CreateReservedPool4(context.Context, *CreateReservedPool4Request) (*CreateReservedPool4Response, error)
	CreateReservation6S(context.Context, *CreateReservation6SRequest) (*CreateReservation6SResponse, error)
	CreateReservedPool6(context.Context, *CreateReservedPool6Request) (*CreateReservedPool6Response, error)
}

// UnimplementedDhcpServiceServer can be embedded to have forward compatible implementations.
type UnimplementedDhcpServiceServer struct {
}

func (*UnimplementedDhcpServiceServer) GetSubnet4WithIp(context.Context, *GetSubnet4WithIpRequest) (*GetSubnet4WithIpResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSubnet4WithIp not implemented")
}
func (*UnimplementedDhcpServiceServer) GetSubnet6WithIp(context.Context, *GetSubnet6WithIpRequest) (*GetSubnet6WithIpResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSubnet6WithIp not implemented")
}
func (*UnimplementedDhcpServiceServer) GetSubnets4WithIps(context.Context, *GetSubnets4WithIpsRequest) (*GetSubnets4WithIpsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSubnets4WithIps not implemented")
}
func (*UnimplementedDhcpServiceServer) GetSubnets6WithIps(context.Context, *GetSubnets6WithIpsRequest) (*GetSubnets6WithIpsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSubnets6WithIps not implemented")
}
func (*UnimplementedDhcpServiceServer) GetSubnet4AndLease4WithIp(context.Context, *GetSubnet4AndLease4WithIpRequest) (*GetSubnet4AndLease4WithIpResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSubnet4AndLease4WithIp not implemented")
}
func (*UnimplementedDhcpServiceServer) GetSubnet6AndLease6WithIp(context.Context, *GetSubnet6AndLease6WithIpRequest) (*GetSubnet6AndLease6WithIpResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSubnet6AndLease6WithIp not implemented")
}
func (*UnimplementedDhcpServiceServer) GetSubnets4AndLeases4WithIps(context.Context, *GetSubnets4AndLeases4WithIpsRequest) (*GetSubnets4AndLeases4WithIpsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSubnets4AndLeases4WithIps not implemented")
}
func (*UnimplementedDhcpServiceServer) GetSubnets6AndLeases6WithIps(context.Context, *GetSubnets6AndLeases6WithIpsRequest) (*GetSubnets6AndLeases6WithIpsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSubnets6AndLeases6WithIps not implemented")
}
func (*UnimplementedDhcpServiceServer) GetListAllSubnet4(context.Context, *GetSubnet4Request) (*GetSubnet4Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetListAllSubnet4 not implemented")
}
func (*UnimplementedDhcpServiceServer) GetListSubnet4ByPrefixes(context.Context, *GetSubnet4Request) (*GetSubnet4Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetListSubnet4ByPrefixes not implemented")
}
func (*UnimplementedDhcpServiceServer) GetListPool4BySubnet4(context.Context, *GetPool4BySubnet4Request) (*GetPool4BySubnet4Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetListPool4BySubnet4 not implemented")
}
func (*UnimplementedDhcpServiceServer) GetListReservedPool4BySubnet4Id(context.Context, *GetReservedPool4BySubnet4IdRequest) (*GetReservedPool4BySubnet4IdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetListReservedPool4BySubnet4Id not implemented")
}
func (*UnimplementedDhcpServiceServer) GetListReservation4BySubnet4Id(context.Context, *GetReservation4BySubnet4IdRequest) (*GetReservation4BySubnet4IdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetListReservation4BySubnet4Id not implemented")
}
func (*UnimplementedDhcpServiceServer) GetListLease4BySubnet4Id(context.Context, *GetLease4BySubnet4IdRequest) (*GetLease4BySubnet4IdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetListLease4BySubnet4Id not implemented")
}
func (*UnimplementedDhcpServiceServer) GetListLease4ByIp(context.Context, *GetLease4ByIpRequest) (*GetLease4ByIpResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetListLease4ByIp not implemented")
}
func (*UnimplementedDhcpServiceServer) GetListAllSubnet6(context.Context, *GetSubnet6Request) (*GetSubnet6Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetListAllSubnet6 not implemented")
}
func (*UnimplementedDhcpServiceServer) GetListSubnet6ByPrefixes(context.Context, *GetSubnet6Request) (*GetSubnet6Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetListSubnet6ByPrefixes not implemented")
}
func (*UnimplementedDhcpServiceServer) GetListPool6BySubnet6Id(context.Context, *GetPool6BySubnet6IdRequest) (*GetPool6BySubnet6IdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetListPool6BySubnet6Id not implemented")
}
func (*UnimplementedDhcpServiceServer) GetListReservedPool6BySubnet6Id(context.Context, *GetReservedPool6BySubnet6IdRequest) (*GetReservedPool6BySubnet6IdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetListReservedPool6BySubnet6Id not implemented")
}
func (*UnimplementedDhcpServiceServer) GetListReservation6BySubnet6Id(context.Context, *GetReservation6BySubnet6IdRequest) (*GetReservation6BySubnet6IdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetListReservation6BySubnet6Id not implemented")
}
func (*UnimplementedDhcpServiceServer) GetListLease6BySubnet6Id(context.Context, *GetLease6BySubnet6IdRequest) (*GetLease6BySubnet6IdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetListLease6BySubnet6Id not implemented")
}
func (*UnimplementedDhcpServiceServer) GetListLease6ByIp(context.Context, *GetLease6ByIpRequest) (*GetLease6ByIpResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetListLease6ByIp not implemented")
}
func (*UnimplementedDhcpServiceServer) CreateReservation4S(context.Context, *CreateReservation4SRequest) (*CreateReservation4SResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateReservation4S not implemented")
}
func (*UnimplementedDhcpServiceServer) CreateReservedPool4(context.Context, *CreateReservedPool4Request) (*CreateReservedPool4Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateReservedPool4 not implemented")
}
func (*UnimplementedDhcpServiceServer) CreateReservation6S(context.Context, *CreateReservation6SRequest) (*CreateReservation6SResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateReservation6S not implemented")
}
func (*UnimplementedDhcpServiceServer) CreateReservedPool6(context.Context, *CreateReservedPool6Request) (*CreateReservedPool6Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateReservedPool6 not implemented")
}

func RegisterDhcpServiceServer(s *grpc.Server, srv DhcpServiceServer) {
	s.RegisterService(&_DhcpService_serviceDesc, srv)
}

func _DhcpService_GetSubnet4WithIp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSubnet4WithIpRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DhcpServiceServer).GetSubnet4WithIp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DhcpService/GetSubnet4WithIp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DhcpServiceServer).GetSubnet4WithIp(ctx, req.(*GetSubnet4WithIpRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DhcpService_GetSubnet6WithIp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSubnet6WithIpRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DhcpServiceServer).GetSubnet6WithIp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DhcpService/GetSubnet6WithIp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DhcpServiceServer).GetSubnet6WithIp(ctx, req.(*GetSubnet6WithIpRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DhcpService_GetSubnets4WithIps_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSubnets4WithIpsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DhcpServiceServer).GetSubnets4WithIps(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DhcpService/GetSubnets4WithIps",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DhcpServiceServer).GetSubnets4WithIps(ctx, req.(*GetSubnets4WithIpsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DhcpService_GetSubnets6WithIps_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSubnets6WithIpsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DhcpServiceServer).GetSubnets6WithIps(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DhcpService/GetSubnets6WithIps",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DhcpServiceServer).GetSubnets6WithIps(ctx, req.(*GetSubnets6WithIpsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DhcpService_GetSubnet4AndLease4WithIp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSubnet4AndLease4WithIpRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DhcpServiceServer).GetSubnet4AndLease4WithIp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DhcpService/GetSubnet4AndLease4WithIp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DhcpServiceServer).GetSubnet4AndLease4WithIp(ctx, req.(*GetSubnet4AndLease4WithIpRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DhcpService_GetSubnet6AndLease6WithIp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSubnet6AndLease6WithIpRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DhcpServiceServer).GetSubnet6AndLease6WithIp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DhcpService/GetSubnet6AndLease6WithIp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DhcpServiceServer).GetSubnet6AndLease6WithIp(ctx, req.(*GetSubnet6AndLease6WithIpRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DhcpService_GetSubnets4AndLeases4WithIps_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSubnets4AndLeases4WithIpsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DhcpServiceServer).GetSubnets4AndLeases4WithIps(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DhcpService/GetSubnets4AndLeases4WithIps",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DhcpServiceServer).GetSubnets4AndLeases4WithIps(ctx, req.(*GetSubnets4AndLeases4WithIpsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DhcpService_GetSubnets6AndLeases6WithIps_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSubnets6AndLeases6WithIpsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DhcpServiceServer).GetSubnets6AndLeases6WithIps(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DhcpService/GetSubnets6AndLeases6WithIps",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DhcpServiceServer).GetSubnets6AndLeases6WithIps(ctx, req.(*GetSubnets6AndLeases6WithIpsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DhcpService_GetListAllSubnet4_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSubnet4Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DhcpServiceServer).GetListAllSubnet4(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DhcpService/GetListAllSubnet4",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DhcpServiceServer).GetListAllSubnet4(ctx, req.(*GetSubnet4Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _DhcpService_GetListSubnet4ByPrefixes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSubnet4Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DhcpServiceServer).GetListSubnet4ByPrefixes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DhcpService/GetListSubnet4ByPrefixes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DhcpServiceServer).GetListSubnet4ByPrefixes(ctx, req.(*GetSubnet4Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _DhcpService_GetListPool4BySubnet4_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPool4BySubnet4Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DhcpServiceServer).GetListPool4BySubnet4(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DhcpService/GetListPool4BySubnet4",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DhcpServiceServer).GetListPool4BySubnet4(ctx, req.(*GetPool4BySubnet4Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _DhcpService_GetListReservedPool4BySubnet4Id_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReservedPool4BySubnet4IdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DhcpServiceServer).GetListReservedPool4BySubnet4Id(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DhcpService/GetListReservedPool4BySubnet4Id",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DhcpServiceServer).GetListReservedPool4BySubnet4Id(ctx, req.(*GetReservedPool4BySubnet4IdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DhcpService_GetListReservation4BySubnet4Id_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReservation4BySubnet4IdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DhcpServiceServer).GetListReservation4BySubnet4Id(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DhcpService/GetListReservation4BySubnet4Id",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DhcpServiceServer).GetListReservation4BySubnet4Id(ctx, req.(*GetReservation4BySubnet4IdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DhcpService_GetListLease4BySubnet4Id_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLease4BySubnet4IdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DhcpServiceServer).GetListLease4BySubnet4Id(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DhcpService/GetListLease4BySubnet4Id",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DhcpServiceServer).GetListLease4BySubnet4Id(ctx, req.(*GetLease4BySubnet4IdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DhcpService_GetListLease4ByIp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLease4ByIpRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DhcpServiceServer).GetListLease4ByIp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DhcpService/GetListLease4ByIp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DhcpServiceServer).GetListLease4ByIp(ctx, req.(*GetLease4ByIpRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DhcpService_GetListAllSubnet6_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSubnet6Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DhcpServiceServer).GetListAllSubnet6(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DhcpService/GetListAllSubnet6",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DhcpServiceServer).GetListAllSubnet6(ctx, req.(*GetSubnet6Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _DhcpService_GetListSubnet6ByPrefixes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSubnet6Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DhcpServiceServer).GetListSubnet6ByPrefixes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DhcpService/GetListSubnet6ByPrefixes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DhcpServiceServer).GetListSubnet6ByPrefixes(ctx, req.(*GetSubnet6Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _DhcpService_GetListPool6BySubnet6Id_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPool6BySubnet6IdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DhcpServiceServer).GetListPool6BySubnet6Id(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DhcpService/GetListPool6BySubnet6Id",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DhcpServiceServer).GetListPool6BySubnet6Id(ctx, req.(*GetPool6BySubnet6IdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DhcpService_GetListReservedPool6BySubnet6Id_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReservedPool6BySubnet6IdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DhcpServiceServer).GetListReservedPool6BySubnet6Id(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DhcpService/GetListReservedPool6BySubnet6Id",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DhcpServiceServer).GetListReservedPool6BySubnet6Id(ctx, req.(*GetReservedPool6BySubnet6IdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DhcpService_GetListReservation6BySubnet6Id_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReservation6BySubnet6IdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DhcpServiceServer).GetListReservation6BySubnet6Id(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DhcpService/GetListReservation6BySubnet6Id",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DhcpServiceServer).GetListReservation6BySubnet6Id(ctx, req.(*GetReservation6BySubnet6IdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DhcpService_GetListLease6BySubnet6Id_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLease6BySubnet6IdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DhcpServiceServer).GetListLease6BySubnet6Id(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DhcpService/GetListLease6BySubnet6Id",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DhcpServiceServer).GetListLease6BySubnet6Id(ctx, req.(*GetLease6BySubnet6IdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DhcpService_GetListLease6ByIp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLease6ByIpRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DhcpServiceServer).GetListLease6ByIp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DhcpService/GetListLease6ByIp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DhcpServiceServer).GetListLease6ByIp(ctx, req.(*GetLease6ByIpRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DhcpService_CreateReservation4S_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateReservation4SRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DhcpServiceServer).CreateReservation4S(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DhcpService/CreateReservation4S",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DhcpServiceServer).CreateReservation4S(ctx, req.(*CreateReservation4SRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DhcpService_CreateReservedPool4_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateReservedPool4Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DhcpServiceServer).CreateReservedPool4(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DhcpService/CreateReservedPool4",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DhcpServiceServer).CreateReservedPool4(ctx, req.(*CreateReservedPool4Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _DhcpService_CreateReservation6S_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateReservation6SRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DhcpServiceServer).CreateReservation6S(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DhcpService/CreateReservation6S",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DhcpServiceServer).CreateReservation6S(ctx, req.(*CreateReservation6SRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DhcpService_CreateReservedPool6_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateReservedPool6Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DhcpServiceServer).CreateReservedPool6(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DhcpService/CreateReservedPool6",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DhcpServiceServer).CreateReservedPool6(ctx, req.(*CreateReservedPool6Request))
	}
	return interceptor(ctx, in, info, handler)
}

var _DhcpService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "DhcpService",
	HandlerType: (*DhcpServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSubnet4WithIp",
			Handler:    _DhcpService_GetSubnet4WithIp_Handler,
		},
		{
			MethodName: "GetSubnet6WithIp",
			Handler:    _DhcpService_GetSubnet6WithIp_Handler,
		},
		{
			MethodName: "GetSubnets4WithIps",
			Handler:    _DhcpService_GetSubnets4WithIps_Handler,
		},
		{
			MethodName: "GetSubnets6WithIps",
			Handler:    _DhcpService_GetSubnets6WithIps_Handler,
		},
		{
			MethodName: "GetSubnet4AndLease4WithIp",
			Handler:    _DhcpService_GetSubnet4AndLease4WithIp_Handler,
		},
		{
			MethodName: "GetSubnet6AndLease6WithIp",
			Handler:    _DhcpService_GetSubnet6AndLease6WithIp_Handler,
		},
		{
			MethodName: "GetSubnets4AndLeases4WithIps",
			Handler:    _DhcpService_GetSubnets4AndLeases4WithIps_Handler,
		},
		{
			MethodName: "GetSubnets6AndLeases6WithIps",
			Handler:    _DhcpService_GetSubnets6AndLeases6WithIps_Handler,
		},
		{
			MethodName: "GetListAllSubnet4",
			Handler:    _DhcpService_GetListAllSubnet4_Handler,
		},
		{
			MethodName: "GetListSubnet4ByPrefixes",
			Handler:    _DhcpService_GetListSubnet4ByPrefixes_Handler,
		},
		{
			MethodName: "GetListPool4BySubnet4",
			Handler:    _DhcpService_GetListPool4BySubnet4_Handler,
		},
		{
			MethodName: "GetListReservedPool4BySubnet4Id",
			Handler:    _DhcpService_GetListReservedPool4BySubnet4Id_Handler,
		},
		{
			MethodName: "GetListReservation4BySubnet4Id",
			Handler:    _DhcpService_GetListReservation4BySubnet4Id_Handler,
		},
		{
			MethodName: "GetListLease4BySubnet4Id",
			Handler:    _DhcpService_GetListLease4BySubnet4Id_Handler,
		},
		{
			MethodName: "GetListLease4ByIp",
			Handler:    _DhcpService_GetListLease4ByIp_Handler,
		},
		{
			MethodName: "GetListAllSubnet6",
			Handler:    _DhcpService_GetListAllSubnet6_Handler,
		},
		{
			MethodName: "GetListSubnet6ByPrefixes",
			Handler:    _DhcpService_GetListSubnet6ByPrefixes_Handler,
		},
		{
			MethodName: "GetListPool6BySubnet6Id",
			Handler:    _DhcpService_GetListPool6BySubnet6Id_Handler,
		},
		{
			MethodName: "GetListReservedPool6BySubnet6Id",
			Handler:    _DhcpService_GetListReservedPool6BySubnet6Id_Handler,
		},
		{
			MethodName: "GetListReservation6BySubnet6Id",
			Handler:    _DhcpService_GetListReservation6BySubnet6Id_Handler,
		},
		{
			MethodName: "GetListLease6BySubnet6Id",
			Handler:    _DhcpService_GetListLease6BySubnet6Id_Handler,
		},
		{
			MethodName: "GetListLease6ByIp",
			Handler:    _DhcpService_GetListLease6ByIp_Handler,
		},
		{
			MethodName: "CreateReservation4s",
			Handler:    _DhcpService_CreateReservation4S_Handler,
		},
		{
			MethodName: "CreateReservedPool4",
			Handler:    _DhcpService_CreateReservedPool4_Handler,
		},
		{
			MethodName: "CreateReservation6s",
			Handler:    _DhcpService_CreateReservation6S_Handler,
		},
		{
			MethodName: "CreateReservedPool6",
			Handler:    _DhcpService_CreateReservedPool6_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dhcp.proto",
}
