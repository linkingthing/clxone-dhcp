// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.21.0
// 	protoc        v3.6.1
// source: dhcp.proto

package dhcp

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type GetSubnet4WithIpRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ip string `protobuf:"bytes,1,opt,name=ip,proto3" json:"ip,omitempty"`
}

func (x *GetSubnet4WithIpRequest) Reset() {
	*x = GetSubnet4WithIpRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSubnet4WithIpRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSubnet4WithIpRequest) ProtoMessage() {}

func (x *GetSubnet4WithIpRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSubnet4WithIpRequest.ProtoReflect.Descriptor instead.
func (*GetSubnet4WithIpRequest) Descriptor() ([]byte, []int) {
	return file_dhcp_proto_rawDescGZIP(), []int{0}
}

func (x *GetSubnet4WithIpRequest) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

type Subnet4 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Subnet        string   `protobuf:"bytes,2,opt,name=subnet,proto3" json:"subnet,omitempty"`
	SubnetId      uint64   `protobuf:"varint,3,opt,name=subnet_id,json=subnetId,proto3" json:"subnet_id,omitempty"`
	Capacity      uint64   `protobuf:"varint,4,opt,name=capacity,proto3" json:"capacity,omitempty"`
	UsedCount     uint64   `protobuf:"varint,5,opt,name=used_count,json=usedCount,proto3" json:"used_count,omitempty"`
	DomainServers []string `protobuf:"bytes,6,rep,name=domain_servers,json=domainServers,proto3" json:"domain_servers,omitempty"`
	Routers       []string `protobuf:"bytes,7,rep,name=routers,proto3" json:"routers,omitempty"`
}

func (x *Subnet4) Reset() {
	*x = Subnet4{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Subnet4) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Subnet4) ProtoMessage() {}

func (x *Subnet4) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Subnet4.ProtoReflect.Descriptor instead.
func (*Subnet4) Descriptor() ([]byte, []int) {
	return file_dhcp_proto_rawDescGZIP(), []int{1}
}

func (x *Subnet4) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Subnet4) GetSubnet() string {
	if x != nil {
		return x.Subnet
	}
	return ""
}

func (x *Subnet4) GetSubnetId() uint64 {
	if x != nil {
		return x.SubnetId
	}
	return 0
}

func (x *Subnet4) GetCapacity() uint64 {
	if x != nil {
		return x.Capacity
	}
	return 0
}

func (x *Subnet4) GetUsedCount() uint64 {
	if x != nil {
		return x.UsedCount
	}
	return 0
}

func (x *Subnet4) GetDomainServers() []string {
	if x != nil {
		return x.DomainServers
	}
	return nil
}

func (x *Subnet4) GetRouters() []string {
	if x != nil {
		return x.Routers
	}
	return nil
}

type GetSubnet4WithIpResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Succeed bool     `protobuf:"varint,1,opt,name=succeed,proto3" json:"succeed,omitempty"`
	Subnet  *Subnet4 `protobuf:"bytes,2,opt,name=subnet,proto3" json:"subnet,omitempty"`
}

func (x *GetSubnet4WithIpResponse) Reset() {
	*x = GetSubnet4WithIpResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSubnet4WithIpResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSubnet4WithIpResponse) ProtoMessage() {}

func (x *GetSubnet4WithIpResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSubnet4WithIpResponse.ProtoReflect.Descriptor instead.
func (*GetSubnet4WithIpResponse) Descriptor() ([]byte, []int) {
	return file_dhcp_proto_rawDescGZIP(), []int{2}
}

func (x *GetSubnet4WithIpResponse) GetSucceed() bool {
	if x != nil {
		return x.Succeed
	}
	return false
}

func (x *GetSubnet4WithIpResponse) GetSubnet() *Subnet4 {
	if x != nil {
		return x.Subnet
	}
	return nil
}

type GetSubnet6WithIpRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ip string `protobuf:"bytes,1,opt,name=ip,proto3" json:"ip,omitempty"`
}

func (x *GetSubnet6WithIpRequest) Reset() {
	*x = GetSubnet6WithIpRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSubnet6WithIpRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSubnet6WithIpRequest) ProtoMessage() {}

func (x *GetSubnet6WithIpRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSubnet6WithIpRequest.ProtoReflect.Descriptor instead.
func (*GetSubnet6WithIpRequest) Descriptor() ([]byte, []int) {
	return file_dhcp_proto_rawDescGZIP(), []int{3}
}

func (x *GetSubnet6WithIpRequest) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

type Subnet6 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Subnet        string   `protobuf:"bytes,2,opt,name=subnet,proto3" json:"subnet,omitempty"`
	SubnetId      uint64   `protobuf:"varint,3,opt,name=subnet_id,json=subnetId,proto3" json:"subnet_id,omitempty"`
	Capacity      uint64   `protobuf:"varint,4,opt,name=capacity,proto3" json:"capacity,omitempty"`
	UsedCount     uint64   `protobuf:"varint,5,opt,name=used_count,json=usedCount,proto3" json:"used_count,omitempty"`
	DomainServers []string `protobuf:"bytes,6,rep,name=domain_servers,json=domainServers,proto3" json:"domain_servers,omitempty"`
}

func (x *Subnet6) Reset() {
	*x = Subnet6{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Subnet6) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Subnet6) ProtoMessage() {}

func (x *Subnet6) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Subnet6.ProtoReflect.Descriptor instead.
func (*Subnet6) Descriptor() ([]byte, []int) {
	return file_dhcp_proto_rawDescGZIP(), []int{4}
}

func (x *Subnet6) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Subnet6) GetSubnet() string {
	if x != nil {
		return x.Subnet
	}
	return ""
}

func (x *Subnet6) GetSubnetId() uint64 {
	if x != nil {
		return x.SubnetId
	}
	return 0
}

func (x *Subnet6) GetCapacity() uint64 {
	if x != nil {
		return x.Capacity
	}
	return 0
}

func (x *Subnet6) GetUsedCount() uint64 {
	if x != nil {
		return x.UsedCount
	}
	return 0
}

func (x *Subnet6) GetDomainServers() []string {
	if x != nil {
		return x.DomainServers
	}
	return nil
}

type GetSubnet6WithIpResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Succeed bool     `protobuf:"varint,1,opt,name=succeed,proto3" json:"succeed,omitempty"`
	Subnet  *Subnet6 `protobuf:"bytes,2,opt,name=subnet,proto3" json:"subnet,omitempty"`
}

func (x *GetSubnet6WithIpResponse) Reset() {
	*x = GetSubnet6WithIpResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSubnet6WithIpResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSubnet6WithIpResponse) ProtoMessage() {}

func (x *GetSubnet6WithIpResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSubnet6WithIpResponse.ProtoReflect.Descriptor instead.
func (*GetSubnet6WithIpResponse) Descriptor() ([]byte, []int) {
	return file_dhcp_proto_rawDescGZIP(), []int{5}
}

func (x *GetSubnet6WithIpResponse) GetSucceed() bool {
	if x != nil {
		return x.Succeed
	}
	return false
}

func (x *GetSubnet6WithIpResponse) GetSubnet() *Subnet6 {
	if x != nil {
		return x.Subnet
	}
	return nil
}

type GetSubnet4AndLease4WithIpRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ip string `protobuf:"bytes,1,opt,name=ip,proto3" json:"ip,omitempty"`
}

func (x *GetSubnet4AndLease4WithIpRequest) Reset() {
	*x = GetSubnet4AndLease4WithIpRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSubnet4AndLease4WithIpRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSubnet4AndLease4WithIpRequest) ProtoMessage() {}

func (x *GetSubnet4AndLease4WithIpRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSubnet4AndLease4WithIpRequest.ProtoReflect.Descriptor instead.
func (*GetSubnet4AndLease4WithIpRequest) Descriptor() ([]byte, []int) {
	return file_dhcp_proto_rawDescGZIP(), []int{6}
}

func (x *GetSubnet4AndLease4WithIpRequest) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

type Lease4 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address         string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	AddressType     string `protobuf:"bytes,2,opt,name=address_type,json=addressType,proto3" json:"address_type,omitempty"`
	HwAddress       string `protobuf:"bytes,3,opt,name=hw_address,json=hwAddress,proto3" json:"hw_address,omitempty"`
	ClientId        string `protobuf:"bytes,4,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	ValidLifetime   uint32 `protobuf:"varint,5,opt,name=valid_lifetime,json=validLifetime,proto3" json:"valid_lifetime,omitempty"`
	Expire          string `protobuf:"bytes,6,opt,name=expire,proto3" json:"expire,omitempty"`
	Hostname        string `protobuf:"bytes,7,opt,name=hostname,proto3" json:"hostname,omitempty"`
	VendorId        string `protobuf:"bytes,8,opt,name=vendor_id,json=vendorId,proto3" json:"vendor_id,omitempty"`
	OperatingSystem string `protobuf:"bytes,9,opt,name=operating_system,json=operatingSystem,proto3" json:"operating_system,omitempty"`
	ClientType      string `protobuf:"bytes,10,opt,name=client_type,json=clientType,proto3" json:"client_type,omitempty"`
	LeaseState      string `protobuf:"bytes,11,opt,name=lease_state,json=leaseState,proto3" json:"lease_state,omitempty"`
}

func (x *Lease4) Reset() {
	*x = Lease4{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Lease4) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Lease4) ProtoMessage() {}

func (x *Lease4) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Lease4.ProtoReflect.Descriptor instead.
func (*Lease4) Descriptor() ([]byte, []int) {
	return file_dhcp_proto_rawDescGZIP(), []int{7}
}

func (x *Lease4) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *Lease4) GetAddressType() string {
	if x != nil {
		return x.AddressType
	}
	return ""
}

func (x *Lease4) GetHwAddress() string {
	if x != nil {
		return x.HwAddress
	}
	return ""
}

func (x *Lease4) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *Lease4) GetValidLifetime() uint32 {
	if x != nil {
		return x.ValidLifetime
	}
	return 0
}

func (x *Lease4) GetExpire() string {
	if x != nil {
		return x.Expire
	}
	return ""
}

func (x *Lease4) GetHostname() string {
	if x != nil {
		return x.Hostname
	}
	return ""
}

func (x *Lease4) GetVendorId() string {
	if x != nil {
		return x.VendorId
	}
	return ""
}

func (x *Lease4) GetOperatingSystem() string {
	if x != nil {
		return x.OperatingSystem
	}
	return ""
}

func (x *Lease4) GetClientType() string {
	if x != nil {
		return x.ClientType
	}
	return ""
}

func (x *Lease4) GetLeaseState() string {
	if x != nil {
		return x.LeaseState
	}
	return ""
}

type GetSubnet4AndLease4WithIpResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Succeed bool     `protobuf:"varint,1,opt,name=succeed,proto3" json:"succeed,omitempty"`
	Subnet  *Subnet4 `protobuf:"bytes,2,opt,name=subnet,proto3" json:"subnet,omitempty"`
	Lease   *Lease4  `protobuf:"bytes,3,opt,name=lease,proto3" json:"lease,omitempty"`
}

func (x *GetSubnet4AndLease4WithIpResponse) Reset() {
	*x = GetSubnet4AndLease4WithIpResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSubnet4AndLease4WithIpResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSubnet4AndLease4WithIpResponse) ProtoMessage() {}

func (x *GetSubnet4AndLease4WithIpResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSubnet4AndLease4WithIpResponse.ProtoReflect.Descriptor instead.
func (*GetSubnet4AndLease4WithIpResponse) Descriptor() ([]byte, []int) {
	return file_dhcp_proto_rawDescGZIP(), []int{8}
}

func (x *GetSubnet4AndLease4WithIpResponse) GetSucceed() bool {
	if x != nil {
		return x.Succeed
	}
	return false
}

func (x *GetSubnet4AndLease4WithIpResponse) GetSubnet() *Subnet4 {
	if x != nil {
		return x.Subnet
	}
	return nil
}

func (x *GetSubnet4AndLease4WithIpResponse) GetLease() *Lease4 {
	if x != nil {
		return x.Lease
	}
	return nil
}

type GetSubnet6AndLease6WithIpRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ip string `protobuf:"bytes,1,opt,name=ip,proto3" json:"ip,omitempty"`
}

func (x *GetSubnet6AndLease6WithIpRequest) Reset() {
	*x = GetSubnet6AndLease6WithIpRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSubnet6AndLease6WithIpRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSubnet6AndLease6WithIpRequest) ProtoMessage() {}

func (x *GetSubnet6AndLease6WithIpRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSubnet6AndLease6WithIpRequest.ProtoReflect.Descriptor instead.
func (*GetSubnet6AndLease6WithIpRequest) Descriptor() ([]byte, []int) {
	return file_dhcp_proto_rawDescGZIP(), []int{9}
}

func (x *GetSubnet6AndLease6WithIpRequest) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

type Lease6 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address           string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	AddressType       string `protobuf:"bytes,2,opt,name=address_type,json=addressType,proto3" json:"address_type,omitempty"`
	PrefixLen         uint32 `protobuf:"varint,3,opt,name=prefix_len,json=prefixLen,proto3" json:"prefix_len,omitempty"`
	Duid              string `protobuf:"bytes,4,opt,name=duid,proto3" json:"duid,omitempty"`
	Iaid              uint32 `protobuf:"varint,5,opt,name=iaid,proto3" json:"iaid,omitempty"`
	PreferredLifetime uint32 `protobuf:"varint,6,opt,name=preferred_lifetime,json=preferredLifetime,proto3" json:"preferred_lifetime,omitempty"`
	ValidLifetime     uint32 `protobuf:"varint,7,opt,name=valid_lifetime,json=validLifetime,proto3" json:"valid_lifetime,omitempty"`
	Expire            string `protobuf:"bytes,8,opt,name=expire,proto3" json:"expire,omitempty"`
	HwAddress         string `protobuf:"bytes,9,opt,name=hw_address,json=hwAddress,proto3" json:"hw_address,omitempty"`
	HwAddressType     string `protobuf:"bytes,10,opt,name=hw_address_type,json=hwAddressType,proto3" json:"hw_address_type,omitempty"`
	HwAddressSource   string `protobuf:"bytes,11,opt,name=hw_address_source,json=hwAddressSource,proto3" json:"hw_address_source,omitempty"`
	LeaseType         string `protobuf:"bytes,12,opt,name=lease_type,json=leaseType,proto3" json:"lease_type,omitempty"`
	Hostname          string `protobuf:"bytes,13,opt,name=hostname,proto3" json:"hostname,omitempty"`
	VendorId          string `protobuf:"bytes,14,opt,name=vendor_id,json=vendorId,proto3" json:"vendor_id,omitempty"`
	OperatingSystem   string `protobuf:"bytes,15,opt,name=operating_system,json=operatingSystem,proto3" json:"operating_system,omitempty"`
	ClientType        string `protobuf:"bytes,16,opt,name=client_type,json=clientType,proto3" json:"client_type,omitempty"`
	LeaseState        string `protobuf:"bytes,17,opt,name=lease_state,json=leaseState,proto3" json:"lease_state,omitempty"`
}

func (x *Lease6) Reset() {
	*x = Lease6{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Lease6) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Lease6) ProtoMessage() {}

func (x *Lease6) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Lease6.ProtoReflect.Descriptor instead.
func (*Lease6) Descriptor() ([]byte, []int) {
	return file_dhcp_proto_rawDescGZIP(), []int{10}
}

func (x *Lease6) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *Lease6) GetAddressType() string {
	if x != nil {
		return x.AddressType
	}
	return ""
}

func (x *Lease6) GetPrefixLen() uint32 {
	if x != nil {
		return x.PrefixLen
	}
	return 0
}

func (x *Lease6) GetDuid() string {
	if x != nil {
		return x.Duid
	}
	return ""
}

func (x *Lease6) GetIaid() uint32 {
	if x != nil {
		return x.Iaid
	}
	return 0
}

func (x *Lease6) GetPreferredLifetime() uint32 {
	if x != nil {
		return x.PreferredLifetime
	}
	return 0
}

func (x *Lease6) GetValidLifetime() uint32 {
	if x != nil {
		return x.ValidLifetime
	}
	return 0
}

func (x *Lease6) GetExpire() string {
	if x != nil {
		return x.Expire
	}
	return ""
}

func (x *Lease6) GetHwAddress() string {
	if x != nil {
		return x.HwAddress
	}
	return ""
}

func (x *Lease6) GetHwAddressType() string {
	if x != nil {
		return x.HwAddressType
	}
	return ""
}

func (x *Lease6) GetHwAddressSource() string {
	if x != nil {
		return x.HwAddressSource
	}
	return ""
}

func (x *Lease6) GetLeaseType() string {
	if x != nil {
		return x.LeaseType
	}
	return ""
}

func (x *Lease6) GetHostname() string {
	if x != nil {
		return x.Hostname
	}
	return ""
}

func (x *Lease6) GetVendorId() string {
	if x != nil {
		return x.VendorId
	}
	return ""
}

func (x *Lease6) GetOperatingSystem() string {
	if x != nil {
		return x.OperatingSystem
	}
	return ""
}

func (x *Lease6) GetClientType() string {
	if x != nil {
		return x.ClientType
	}
	return ""
}

func (x *Lease6) GetLeaseState() string {
	if x != nil {
		return x.LeaseState
	}
	return ""
}

type GetSubnet6AndLease6WithIpResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Succeed bool     `protobuf:"varint,1,opt,name=succeed,proto3" json:"succeed,omitempty"`
	Subnet  *Subnet6 `protobuf:"bytes,2,opt,name=subnet,proto3" json:"subnet,omitempty"`
	Lease   *Lease6  `protobuf:"bytes,3,opt,name=lease,proto3" json:"lease,omitempty"`
}

func (x *GetSubnet6AndLease6WithIpResponse) Reset() {
	*x = GetSubnet6AndLease6WithIpResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSubnet6AndLease6WithIpResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSubnet6AndLease6WithIpResponse) ProtoMessage() {}

func (x *GetSubnet6AndLease6WithIpResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSubnet6AndLease6WithIpResponse.ProtoReflect.Descriptor instead.
func (*GetSubnet6AndLease6WithIpResponse) Descriptor() ([]byte, []int) {
	return file_dhcp_proto_rawDescGZIP(), []int{11}
}

func (x *GetSubnet6AndLease6WithIpResponse) GetSucceed() bool {
	if x != nil {
		return x.Succeed
	}
	return false
}

func (x *GetSubnet6AndLease6WithIpResponse) GetSubnet() *Subnet6 {
	if x != nil {
		return x.Subnet
	}
	return nil
}

func (x *GetSubnet6AndLease6WithIpResponse) GetLease() *Lease6 {
	if x != nil {
		return x.Lease
	}
	return nil
}

var File_dhcp_proto protoreflect.FileDescriptor

var file_dhcp_proto_rawDesc = []byte{
	0x0a, 0x0a, 0x64, 0x68, 0x63, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x29, 0x0a, 0x17,
	0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x34, 0x57, 0x69, 0x74, 0x68, 0x49, 0x70,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x70, 0x22, 0xca, 0x01, 0x0a, 0x07, 0x53, 0x75, 0x62, 0x6e,
	0x65, 0x74, 0x34, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x73,
	0x75, 0x62, 0x6e, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08,
	0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61, 0x70, 0x61,
	0x63, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x63, 0x61, 0x70, 0x61,
	0x63, 0x69, 0x74, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x75, 0x73, 0x65, 0x64, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x64, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x72, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x72, 0x6f, 0x75,
	0x74, 0x65, 0x72, 0x73, 0x22, 0x56, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x6e, 0x65,
	0x74, 0x34, 0x57, 0x69, 0x74, 0x68, 0x49, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x65, 0x64, 0x12, 0x20, 0x0a, 0x06, 0x73, 0x75,
	0x62, 0x6e, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x53, 0x75, 0x62,
	0x6e, 0x65, 0x74, 0x34, 0x52, 0x06, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x22, 0x29, 0x0a, 0x17,
	0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x36, 0x57, 0x69, 0x74, 0x68, 0x49, 0x70,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x70, 0x22, 0xb0, 0x01, 0x0a, 0x07, 0x53, 0x75, 0x62, 0x6e,
	0x65, 0x74, 0x36, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x73,
	0x75, 0x62, 0x6e, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08,
	0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61, 0x70, 0x61,
	0x63, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x63, 0x61, 0x70, 0x61,
	0x63, 0x69, 0x74, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x75, 0x73, 0x65, 0x64, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x64, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x22, 0x56, 0x0a, 0x18, 0x47, 0x65,
	0x74, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x36, 0x57, 0x69, 0x74, 0x68, 0x49, 0x70, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x65,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x65, 0x64,
	0x12, 0x20, 0x0a, 0x06, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x08, 0x2e, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x36, 0x52, 0x06, 0x73, 0x75, 0x62, 0x6e,
	0x65, 0x74, 0x22, 0x32, 0x0a, 0x20, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x34,
	0x41, 0x6e, 0x64, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x34, 0x57, 0x69, 0x74, 0x68, 0x49, 0x70, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x70, 0x22, 0xe6, 0x02, 0x0a, 0x06, 0x4c, 0x65, 0x61, 0x73, 0x65,
	0x34, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d,
	0x0a, 0x0a, 0x68, 0x77, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x68, 0x77, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1b, 0x0a,
	0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x5f, 0x6c, 0x69, 0x66, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0d, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x4c, 0x69, 0x66, 0x65, 0x74, 0x69, 0x6d,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x6f, 0x73,
	0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x6f, 0x73,
	0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72,
	0x49, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x5f,
	0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x1f, 0x0a,
	0x0b, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f,
	0x0a, 0x0b, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x22,
	0x7e, 0x0a, 0x21, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x34, 0x41, 0x6e, 0x64,
	0x4c, 0x65, 0x61, 0x73, 0x65, 0x34, 0x57, 0x69, 0x74, 0x68, 0x49, 0x70, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x65, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x65, 0x64, 0x12, 0x20,
	0x0a, 0x06, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08,
	0x2e, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x34, 0x52, 0x06, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74,
	0x12, 0x1d, 0x0a, 0x05, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x07, 0x2e, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x34, 0x52, 0x05, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x22,
	0x32, 0x0a, 0x20, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x36, 0x41, 0x6e, 0x64,
	0x4c, 0x65, 0x61, 0x73, 0x65, 0x36, 0x57, 0x69, 0x74, 0x68, 0x49, 0x70, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x70, 0x22, 0xb2, 0x04, 0x0a, 0x06, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x36, 0x12, 0x18,
	0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70,
	0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x6c, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x09, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4c, 0x65, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x75,
	0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x75, 0x69, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x69, 0x61, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x69, 0x61,
	0x69, 0x64, 0x12, 0x2d, 0x0a, 0x12, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x5f,
	0x6c, 0x69, 0x66, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11,
	0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x4c, 0x69, 0x66, 0x65, 0x74, 0x69, 0x6d,
	0x65, 0x12, 0x25, 0x0a, 0x0e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x6c, 0x69, 0x66, 0x65, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x4c, 0x69, 0x66, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x78, 0x70, 0x69,
	0x72, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65,
	0x12, 0x1d, 0x0a, 0x0a, 0x68, 0x77, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x68, 0x77, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x26, 0x0a, 0x0f, 0x68, 0x77, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x68, 0x77, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x68, 0x77, 0x5f, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0f, 0x68, 0x77, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1b,
	0x0a, 0x09, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67,
	0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x65, 0x61, 0x73, 0x65,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6c, 0x65,
	0x61, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x22, 0x7e, 0x0a, 0x21, 0x47, 0x65, 0x74, 0x53,
	0x75, 0x62, 0x6e, 0x65, 0x74, 0x36, 0x41, 0x6e, 0x64, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x36, 0x57,
	0x69, 0x74, 0x68, 0x49, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x73, 0x75, 0x63, 0x63, 0x65, 0x65, 0x64, 0x12, 0x20, 0x0a, 0x06, 0x73, 0x75, 0x62, 0x6e, 0x65,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74,
	0x36, 0x52, 0x06, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x12, 0x1d, 0x0a, 0x05, 0x6c, 0x65, 0x61,
	0x73, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x07, 0x2e, 0x4c, 0x65, 0x61, 0x73, 0x65,
	0x36, 0x52, 0x05, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x32, 0xe7, 0x02, 0x0a, 0x0b, 0x44, 0x68, 0x63,
	0x70, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x47, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x53,
	0x75, 0x62, 0x6e, 0x65, 0x74, 0x34, 0x57, 0x69, 0x74, 0x68, 0x49, 0x70, 0x12, 0x18, 0x2e, 0x47,
	0x65, 0x74, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x34, 0x57, 0x69, 0x74, 0x68, 0x49, 0x70, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x6e,
	0x65, 0x74, 0x34, 0x57, 0x69, 0x74, 0x68, 0x49, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x47, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x36, 0x57,
	0x69, 0x74, 0x68, 0x49, 0x70, 0x12, 0x18, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x6e, 0x65,
	0x74, 0x36, 0x57, 0x69, 0x74, 0x68, 0x49, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x19, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x36, 0x57, 0x69, 0x74, 0x68,
	0x49, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x62, 0x0a, 0x19, 0x47, 0x65,
	0x74, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x34, 0x41, 0x6e, 0x64, 0x4c, 0x65, 0x61, 0x73, 0x65,
	0x34, 0x57, 0x69, 0x74, 0x68, 0x49, 0x70, 0x12, 0x21, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62,
	0x6e, 0x65, 0x74, 0x34, 0x41, 0x6e, 0x64, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x34, 0x57, 0x69, 0x74,
	0x68, 0x49, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x47, 0x65, 0x74,
	0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x34, 0x41, 0x6e, 0x64, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x34,
	0x57, 0x69, 0x74, 0x68, 0x49, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x62,
	0x0a, 0x19, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x36, 0x41, 0x6e, 0x64, 0x4c,
	0x65, 0x61, 0x73, 0x65, 0x36, 0x57, 0x69, 0x74, 0x68, 0x49, 0x70, 0x12, 0x21, 0x2e, 0x47, 0x65,
	0x74, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x36, 0x41, 0x6e, 0x64, 0x4c, 0x65, 0x61, 0x73, 0x65,
	0x36, 0x57, 0x69, 0x74, 0x68, 0x49, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22,
	0x2e, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x36, 0x41, 0x6e, 0x64, 0x4c, 0x65,
	0x61, 0x73, 0x65, 0x36, 0x57, 0x69, 0x74, 0x68, 0x49, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x42, 0x09, 0x5a, 0x07, 0x2e, 0x2e, 0x2f, 0x64, 0x68, 0x63, 0x70, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_dhcp_proto_rawDescOnce sync.Once
	file_dhcp_proto_rawDescData = file_dhcp_proto_rawDesc
)

func file_dhcp_proto_rawDescGZIP() []byte {
	file_dhcp_proto_rawDescOnce.Do(func() {
		file_dhcp_proto_rawDescData = protoimpl.X.CompressGZIP(file_dhcp_proto_rawDescData)
	})
	return file_dhcp_proto_rawDescData
}

var file_dhcp_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_dhcp_proto_goTypes = []interface{}{
	(*GetSubnet4WithIpRequest)(nil),           // 0: GetSubnet4WithIpRequest
	(*Subnet4)(nil),                           // 1: Subnet4
	(*GetSubnet4WithIpResponse)(nil),          // 2: GetSubnet4WithIpResponse
	(*GetSubnet6WithIpRequest)(nil),           // 3: GetSubnet6WithIpRequest
	(*Subnet6)(nil),                           // 4: Subnet6
	(*GetSubnet6WithIpResponse)(nil),          // 5: GetSubnet6WithIpResponse
	(*GetSubnet4AndLease4WithIpRequest)(nil),  // 6: GetSubnet4AndLease4WithIpRequest
	(*Lease4)(nil),                            // 7: Lease4
	(*GetSubnet4AndLease4WithIpResponse)(nil), // 8: GetSubnet4AndLease4WithIpResponse
	(*GetSubnet6AndLease6WithIpRequest)(nil),  // 9: GetSubnet6AndLease6WithIpRequest
	(*Lease6)(nil),                            // 10: Lease6
	(*GetSubnet6AndLease6WithIpResponse)(nil), // 11: GetSubnet6AndLease6WithIpResponse
}
var file_dhcp_proto_depIdxs = []int32{
	1,  // 0: GetSubnet4WithIpResponse.subnet:type_name -> Subnet4
	4,  // 1: GetSubnet6WithIpResponse.subnet:type_name -> Subnet6
	1,  // 2: GetSubnet4AndLease4WithIpResponse.subnet:type_name -> Subnet4
	7,  // 3: GetSubnet4AndLease4WithIpResponse.lease:type_name -> Lease4
	4,  // 4: GetSubnet6AndLease6WithIpResponse.subnet:type_name -> Subnet6
	10, // 5: GetSubnet6AndLease6WithIpResponse.lease:type_name -> Lease6
	0,  // 6: DhcpService.GetSubnet4WithIp:input_type -> GetSubnet4WithIpRequest
	3,  // 7: DhcpService.GetSubnet6WithIp:input_type -> GetSubnet6WithIpRequest
	6,  // 8: DhcpService.GetSubnet4AndLease4WithIp:input_type -> GetSubnet4AndLease4WithIpRequest
	9,  // 9: DhcpService.GetSubnet6AndLease6WithIp:input_type -> GetSubnet6AndLease6WithIpRequest
	2,  // 10: DhcpService.GetSubnet4WithIp:output_type -> GetSubnet4WithIpResponse
	5,  // 11: DhcpService.GetSubnet6WithIp:output_type -> GetSubnet6WithIpResponse
	8,  // 12: DhcpService.GetSubnet4AndLease4WithIp:output_type -> GetSubnet4AndLease4WithIpResponse
	11, // 13: DhcpService.GetSubnet6AndLease6WithIp:output_type -> GetSubnet6AndLease6WithIpResponse
	10, // [10:14] is the sub-list for method output_type
	6,  // [6:10] is the sub-list for method input_type
	6,  // [6:6] is the sub-list for extension type_name
	6,  // [6:6] is the sub-list for extension extendee
	0,  // [0:6] is the sub-list for field type_name
}

func init() { file_dhcp_proto_init() }
func file_dhcp_proto_init() {
	if File_dhcp_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_dhcp_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSubnet4WithIpRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Subnet4); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSubnet4WithIpResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSubnet6WithIpRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Subnet6); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSubnet6WithIpResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSubnet4AndLease4WithIpRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Lease4); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSubnet4AndLease4WithIpResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSubnet6AndLease6WithIpRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Lease6); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSubnet6AndLease6WithIpResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_dhcp_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_dhcp_proto_goTypes,
		DependencyIndexes: file_dhcp_proto_depIdxs,
		MessageInfos:      file_dhcp_proto_msgTypes,
	}.Build()
	File_dhcp_proto = out.File
	file_dhcp_proto_rawDesc = nil
	file_dhcp_proto_goTypes = nil
	file_dhcp_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// DhcpServiceClient is the client API for DhcpService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DhcpServiceClient interface {
	GetSubnet4WithIp(ctx context.Context, in *GetSubnet4WithIpRequest, opts ...grpc.CallOption) (*GetSubnet4WithIpResponse, error)
	GetSubnet6WithIp(ctx context.Context, in *GetSubnet6WithIpRequest, opts ...grpc.CallOption) (*GetSubnet6WithIpResponse, error)
	GetSubnet4AndLease4WithIp(ctx context.Context, in *GetSubnet4AndLease4WithIpRequest, opts ...grpc.CallOption) (*GetSubnet4AndLease4WithIpResponse, error)
	GetSubnet6AndLease6WithIp(ctx context.Context, in *GetSubnet6AndLease6WithIpRequest, opts ...grpc.CallOption) (*GetSubnet6AndLease6WithIpResponse, error)
}

type dhcpServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDhcpServiceClient(cc grpc.ClientConnInterface) DhcpServiceClient {
	return &dhcpServiceClient{cc}
}

func (c *dhcpServiceClient) GetSubnet4WithIp(ctx context.Context, in *GetSubnet4WithIpRequest, opts ...grpc.CallOption) (*GetSubnet4WithIpResponse, error) {
	out := new(GetSubnet4WithIpResponse)
	err := c.cc.Invoke(ctx, "/DhcpService/GetSubnet4WithIp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dhcpServiceClient) GetSubnet6WithIp(ctx context.Context, in *GetSubnet6WithIpRequest, opts ...grpc.CallOption) (*GetSubnet6WithIpResponse, error) {
	out := new(GetSubnet6WithIpResponse)
	err := c.cc.Invoke(ctx, "/DhcpService/GetSubnet6WithIp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dhcpServiceClient) GetSubnet4AndLease4WithIp(ctx context.Context, in *GetSubnet4AndLease4WithIpRequest, opts ...grpc.CallOption) (*GetSubnet4AndLease4WithIpResponse, error) {
	out := new(GetSubnet4AndLease4WithIpResponse)
	err := c.cc.Invoke(ctx, "/DhcpService/GetSubnet4AndLease4WithIp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dhcpServiceClient) GetSubnet6AndLease6WithIp(ctx context.Context, in *GetSubnet6AndLease6WithIpRequest, opts ...grpc.CallOption) (*GetSubnet6AndLease6WithIpResponse, error) {
	out := new(GetSubnet6AndLease6WithIpResponse)
	err := c.cc.Invoke(ctx, "/DhcpService/GetSubnet6AndLease6WithIp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DhcpServiceServer is the server API for DhcpService service.
type DhcpServiceServer interface {
	GetSubnet4WithIp(context.Context, *GetSubnet4WithIpRequest) (*GetSubnet4WithIpResponse, error)
	GetSubnet6WithIp(context.Context, *GetSubnet6WithIpRequest) (*GetSubnet6WithIpResponse, error)
	GetSubnet4AndLease4WithIp(context.Context, *GetSubnet4AndLease4WithIpRequest) (*GetSubnet4AndLease4WithIpResponse, error)
	GetSubnet6AndLease6WithIp(context.Context, *GetSubnet6AndLease6WithIpRequest) (*GetSubnet6AndLease6WithIpResponse, error)
}

// UnimplementedDhcpServiceServer can be embedded to have forward compatible implementations.
type UnimplementedDhcpServiceServer struct {
}

func (*UnimplementedDhcpServiceServer) GetSubnet4WithIp(context.Context, *GetSubnet4WithIpRequest) (*GetSubnet4WithIpResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSubnet4WithIp not implemented")
}
func (*UnimplementedDhcpServiceServer) GetSubnet6WithIp(context.Context, *GetSubnet6WithIpRequest) (*GetSubnet6WithIpResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSubnet6WithIp not implemented")
}
func (*UnimplementedDhcpServiceServer) GetSubnet4AndLease4WithIp(context.Context, *GetSubnet4AndLease4WithIpRequest) (*GetSubnet4AndLease4WithIpResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSubnet4AndLease4WithIp not implemented")
}
func (*UnimplementedDhcpServiceServer) GetSubnet6AndLease6WithIp(context.Context, *GetSubnet6AndLease6WithIpRequest) (*GetSubnet6AndLease6WithIpResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSubnet6AndLease6WithIp not implemented")
}

func RegisterDhcpServiceServer(s *grpc.Server, srv DhcpServiceServer) {
	s.RegisterService(&_DhcpService_serviceDesc, srv)
}

func _DhcpService_GetSubnet4WithIp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSubnet4WithIpRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DhcpServiceServer).GetSubnet4WithIp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DhcpService/GetSubnet4WithIp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DhcpServiceServer).GetSubnet4WithIp(ctx, req.(*GetSubnet4WithIpRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DhcpService_GetSubnet6WithIp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSubnet6WithIpRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DhcpServiceServer).GetSubnet6WithIp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DhcpService/GetSubnet6WithIp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DhcpServiceServer).GetSubnet6WithIp(ctx, req.(*GetSubnet6WithIpRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DhcpService_GetSubnet4AndLease4WithIp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSubnet4AndLease4WithIpRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DhcpServiceServer).GetSubnet4AndLease4WithIp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DhcpService/GetSubnet4AndLease4WithIp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DhcpServiceServer).GetSubnet4AndLease4WithIp(ctx, req.(*GetSubnet4AndLease4WithIpRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DhcpService_GetSubnet6AndLease6WithIp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSubnet6AndLease6WithIpRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DhcpServiceServer).GetSubnet6AndLease6WithIp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DhcpService/GetSubnet6AndLease6WithIp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DhcpServiceServer).GetSubnet6AndLease6WithIp(ctx, req.(*GetSubnet6AndLease6WithIpRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _DhcpService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "DhcpService",
	HandlerType: (*DhcpServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSubnet4WithIp",
			Handler:    _DhcpService_GetSubnet4WithIp_Handler,
		},
		{
			MethodName: "GetSubnet6WithIp",
			Handler:    _DhcpService_GetSubnet6WithIp_Handler,
		},
		{
			MethodName: "GetSubnet4AndLease4WithIp",
			Handler:    _DhcpService_GetSubnet4AndLease4WithIp_Handler,
		},
		{
			MethodName: "GetSubnet6AndLease6WithIp",
			Handler:    _DhcpService_GetSubnet6AndLease6WithIp_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dhcp.proto",
}
